{"three-tips-for-efficient-sql-queries":{"url":"https:\/\/tkouleris.eu\/blog\/three-tips-for-efficient-sql-queries","category":"sql","title":"Three (3) Tips for efficient SQL Queries","image":"https:\/\/tkouleris.eu\/img\/blog\/sql.png","date":"07 Sept. 2025","content":"<p style=\"text-align: justify;\">\n                                            A constant pain for every developer is how to handle sql queries of a\n                                            database table with many, many, many rows. Well, here some\n                                            tips for better sql queries.\n                                        <\/p>\n\n                                        <br\/>\n                                        <h3>1. Indexes<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Indexes are basically shortcuts for the database \u2014 instead of scanning the\n                                            whole table row by row, it can jump straight to what you need.\n                                            For example, let\u2019s say we\u2019re always looking up orders by customer_id.\n                                            Instead of the database digging through everything, we can help it out\n                                            by creating an index. To create an index on a specified column you simply\n                                            write <b>CREATE INDEX idx_orders_customer_id ON orders(customer_id);<\/b>\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            There are some types of indexes.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>a. Primary Index:<\/b> Automatically created on the primary key. Makes sure\n                                            values are unique and quick to access.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>b. Secondary Index:<\/b> Something we create ourselves on non-primary columns\n                                            (like customer_id) to speed up queries.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            A good indicator that a column needs indexing is where it is used a lot in\n                                            WHERE, JOIN or ORDER BY. You might say \"why not index every\n                                            column\". Well, indexing it might hit you with slowdowns in insert\/update\n                                            operations because when a new record will be added on the\n                                            table or you try to updated the indexing must be calculated. So, we need to\n                                            carefully create indexing to only the columns that will\n                                            actually be helpful.\n                                        <\/p>\n\n                                        <br\/>\n                                        <h3>2. SELECT only the required Columns<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Another bad habit that many of us have (I have it too) is using * with the\n                                            SELECT keyword. The most of the times we don't need\n                                            every column of a table. Only request the columns that you need. This is\n                                            because the more columns that you request the more you\n                                            increase the memory usage.\n                                        <\/p>\n\n                                        <br\/>\n                                        <h3>3. Be cautious with you WHERE clauses<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            How fast your database will retrieve data depends on you WHERE clause. You\n                                            must prevent using function on indexed columns\n                                            or use functions that will be applied on every row of a table. For example\n                                            don't use SELECT * FROM employees WHERE YEAR(joining_date) = 2022;\n                                            because the YEAR function first must be applied to each row of the employees\n                                            table.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Instead use the more efficient query\n                                            <b>\n                                                SELECT * FROM employees\n                                                WHERE joining_date >= '2022-01-01' AND joining_date < '2023-01-01';\n                                            <\/b>\n                                            that will give you the same result without any extra calculations\n                                        <\/p>","page":"three-tips-for-efficient-sql-queries","description":"Handling SQL queries on huge tables can be painful. Learn key tips: use indexes wisely, select only needed columns, and write efficient WHERE clauses to speed up queries and save resources.","keywords":"sql, database, queries, indexes, primary index, secondary index, select, where clause, performance, optimization, tips, columns, memory, efficiency","year":2025},"basics-of-http":{"url":"https:\/\/tkouleris.eu\/blog\/basics-of-http","category":"misc","title":"Basics of HTTP","image":"https:\/\/tkouleris.eu\/img\/blog\/basics-of-http\/basics-of-http.jpg","date":"31 Aug. 2025","content":"\n                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            <b>HTTP (Hypertext Transfer Protocol)<\/b> is the set of rules that define\n                                            how\n                                            information is exchanged between networked devices, primarily between web\n                                            servers and client browsers.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            It was first developed between 1989 and 1991 by Tim Berners-Lee, the creator\n                                            of the World Wide Web. As an application-layer protocol, early versions of\n                                            HTTP (prior to HTTP\/3) operated on top of the TCP\/IP (Transmission Control\n                                            Protocol\/Internet Protocol) suite. Together, HTTP, TCP, and IP form the core\n                                            foundation of today\u2019s internet.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            The most recent version, HTTP\/3, was officially published in 2021. It\n                                            represents a significant upgrade over its predecessor, HTTP\/2, though HTTP\/2\n                                            remains widely used and continues to be supported by many modern browsers.\n                                        <\/p>\n                                        <br\/>\n                                        <h3>Why to use HTTP<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            HTTP is used to enable communication between web browsers (clients) and web\n                                            servers, making it the core protocol that powers the web. It is primarily\n                                            responsible for <b>loading web pages<\/b> by transferring HTML, CSS,\n                                            JavaScript,\n                                            images, and other resources from a server to a browser. Beyond web pages,\n                                            HTTP is also widely used in <b>APIs<\/b> and <b>web services<\/b>, allowing\n                                            applications to\n                                            exchange data such as JSON or XML. It supports <b>file transfers<\/b> and <b>downloads<\/b>,\n                                            lets users submit forms like logins or checkout details, and even <b>enables\n                                            communication between devices<\/b> such as mobile apps, IoT gadgets, and\n                                            smart\n                                            TVs. In short, HTTP provides the rules that allow clients and servers to\n                                            exchange information reliably across the internet.\n                                        <\/p>\n                                        <br\/>\n                                        <h3>How does it work<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            HTTP works through a request-response model between a client and a server.\n                                            When you type a URL into your browser or click a link, the browser (the\n                                            client) sends an HTTP request to the web server hosting the website. This\n                                            request includes information such as the type of content the client can\n                                            accept, any cookies for that website, and the specific resource being\n                                            requested (like an HTML page or image). The server then processes this\n                                            request and sends back an HTTP response, which contains the requested\n                                            resource along with a status code indicating whether the request was\n                                            successful, redirected, or resulted in an error. Common status codes include\n                                            200 (OK), 404 (Not Found), and 500 (Internal Server Error).\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Once the client receives the response, it processes the data and renders the\n                                            content, such as displaying a web page in the browser. HTTP also supports\n                                            additional features like methods\u2014for example, GET to retrieve data, POST to\n                                            send data, PUT to update data, and DELETE to remove data\u2014allowing more\n                                            complex interactions between client and server. Each interaction is\n                                            independent, meaning HTTP is a stateless protocol, so the server does not\n                                            retain information about previous requests unless mechanisms like cookies,\n                                            sessions, or tokens are used. This simple yet flexible structure makes HTTP\n                                            the backbone of communication on the web.\n                                        <\/p>\n                                        <br\/>\n                                        <h3>Example of HTTP<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            When you type http:\/\/example.com in your browser, the following happens:\n                                        <\/p>\n                                        <b>1. HTTP Request (from browser to server):<\/b>\n                                        <pre><code>\nGET \/ HTTP\/1.1\nHost: example.com\nUser-Agent: Mozilla\/5.0\nAccept: text\/html\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            This request asks the server for the homepage (\/) of example.com. It also\n                                            includes information about the browser (User-Agent) and the types of content\n                                            it can accept (Accept).\n                                        <\/p>\n\n                                        <br\/><b>2. HTTP Response (from server to browser):<\/b>\n                                        <pre><code>\nHTTP\/1.1 200 OK\nContent-Type: text\/html\nContent-Length: 1256\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Example Domain&lt;\/title&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to Example.com!&lt;\/h1&gt;\n    &lt;p&gt;This is a simple HTTP example.&lt;\/p&gt;\n&lt;\/body&gt;\n&lt;\/html&gt;\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            The server responds with a status code (200 OK) indicating the request was\n                                            successful, the type of content (text\/html), and the actual HTML content of\n                                            the page. The browser then renders this HTML so you see the web page on your\n                                            screen.\n                                        <\/p>\n\n                                        <h3>Http Status Codes<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            HTTP status codes are three-digit numbers returned by a server in response\n                                            to a client\u2019s request. They indicate whether the request was successful,\n                                            encountered a problem, or requires further action. Status codes are grouped\n                                            into five categories:-->\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>1xx \u2013 Informational:<\/b> The request was received and is being processed.\n                                            Example: 100 Continue.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>2xx \u2013 Success:<\/b> The request was successfully received, understood, and\n                                            processed. Example: 200 OK, 201 Created.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>3xx \u2013 Redirection:<\/b> The client must take additional action to complete the\n                                            request, often involving a new URL. Example: 301 Moved Permanently, 302\n                                            Found.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>4xx \u2013 Client Error:<\/b> The request contains an error, such as a malformed\n                                            syntax or a resource that doesn\u2019t exist. Example: 400 Bad Request, 401\n                                            Unauthorized, 404 Not Found.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>5xx \u2013 Server Error:<\/b> The server failed to fulfill a valid request due to a\n                                            problem on its side. Example: 500 Internal Server Error, 503 Service\n                                            Unavailable.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            These codes help both the client and the server understand what happened\n                                            with a request and decide the next steps, such as retrying, redirecting, or\n                                            displaying an error message to the user.\n                                        <\/p>","page":"basics-of-http","description":"HTTP (Hypertext Transfer Protocol) enables web communication, transferring data between clients and servers. It works via requests and responses, uses methods like GET\/POST, returns status codes (200, 404, 500), and powers web pages, APIs, file transfers, and forms.","keywords":"http, hypertext transfer protocol, web communication, client, server, request, response, get, post, status codes, 200, 404, 500, web pages, api, file transfer, forms","year":2025},"eric-s-raymond":{"url":"https:\/\/tkouleris.eu\/blog\/eric-s-raymond","category":"tech heroes","title":"Tech Heroes #11: Eric S. Raymond","image":"https:\/\/tkouleris.eu\/img\/blog\/eric-s-raymond\/eric-s-raymond.jpg","date":"29 Aug. 2025","content":"<p style=\"text-align: justify;\">\n                                            Eric S. Raymond (aka ESR) is an American software developer, writer, and\n                                            open source\n                                            advocate, best known for his influential role in shaping the philosophy and\n                                            terminology\n                                            of the open source movement. Born in 1957, Raymond rose to prominence in the\n                                            1990s as\n                                            both a programmer and a thinker, bridging the gap between software\n                                            development, cultural analysis, and community organization.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Raymond was born in Boston, Massachusetts, and later studied mathematics\n                                            before moving\n                                            into computer science and programming. He was diagnosed with cerebral palsy\n                                            at birth,\n                                            which affected his speech and movement but did not deter him from pursuing a\n                                            career\n                                            in technology and writing. His intellectual curiosity led him to explore not\n                                            only\n                                            programming but also linguistics, science fiction, and hacker culture.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Raymond\u2019s most significant impact came through his essays and writings that\n                                            articulated\n                                            the values and practices of the hacker and open source communities. His 1997\n                                            essay,\n                                            \u201cThe Cathedral and the Bazaar,\u201d remains one of the most cited works in the\n                                            history of\n                                            software development. In it, he compared two different styles of software\n                                            creation:\n                                            the cathedral model, where software is built in a centralized, closed\n                                            manner, and\n                                            the bazaar model, where development is open, decentralized, and\n                                            collaborative.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            This essay played a major role in legitimizing open source software to the\n                                            business\n                                            world and helped convince companies that collaborative development could be\n                                            more\n                                            efficient and innovative than traditional proprietary models.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            In 1998, Raymond also co-founded the Open Source Initiative (OSI), alongside\n                                            Bruce Perens.\n                                            The OSI provided a framework for defining and promoting \u201copen source\u201d as a\n                                            business-friendly\n                                            term distinct from the more politically loaded \u201cfree software\u201d promoted by\n                                            Richard Stallman\n                                            and the Free Software Foundation.\n                                        <\/p>\n                                        <br\/>\n                                        <h3>Software Contributions<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            <b>Fetchmail:<\/b> An email retrieval and forwarding utility.<br\/>\n                                            <b>Jargon File:<\/b> A comprehensive and humorous glossary of hacker slang,\n                                            which Raymond maintained\n                                            and published as The New Hacker\u2019s Dictionary.<br\/>\n                                            And many more\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Eric S. Raymond stands as a key figure in the cultural and technical history\n                                            of software.\n                                            His ability to explain, defend, and promote the values of open collaboration\n                                            has left a\n                                            lasting mark on both the hacker community and the global tech industry.\n                                        <\/p>","page":"eric-s-raymond","description":"Eric S. Raymond is an American programmer, author, and open source advocate, best known for The Cathedral and the Bazaar and co-founding the Open Source Initiative.","keywords":"eric s raymond, open source, hacker culture, cathedral and the bazaar, fetchmail, jargon file, open source initiative, software development, programmer, author","year":2025},"adobe-flash":{"url":"https:\/\/tkouleris.eu\/blog\/adobe-flash","category":"forgotten technology","title":"Forgotten Technologies #7: Adobe Flash","image":"https:\/\/tkouleris.eu\/img\/blog\/adobe-flash\/adobe-flash.jpg","date":"28 Aug. 2025","content":"<p style=\"text-align: justify;\">\n                                            There was a time when the internet felt like a wild, unexplored frontier.\n                                            Pages weren\u2019t\n                                            just information\u2014they were little worlds you stumbled into, often strange,\n                                            often magical,\n                                            and almost always unpredictable. At the center of that digital playground\n                                            was Adobe Flash.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Flash wasn\u2019t just software\u2014it was the beating heart of the early web. It\n                                            gave us talking\n                                            hamsters, dancing animations, endless dress-up games, and the kind of\n                                            interactive chaos\n                                            that no clean, corporate web template could ever recreate. If you were\n                                            online in the\n                                            late 1990s or early 2000s, you didn\u2019t just see Flash\u2014you lived inside it.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            It was the golden era of Flash games. Hours disappeared in front of\n                                            pixelated adventures\n                                            and side-scrolling shooters, played on school computers that probably\n                                            weren\u2019t meant for it.\n                                            Websites like Newgrounds, Miniclip, and Armor Games were treasure troves\n                                            where creativity\n                                            was raw, unfiltered, and free. Developers with no big studios behind them\n                                            could reach millions,\n                                            armed with nothing but imagination and a bit of ActionScript.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            And then, there were the animations. From absurd internet memes to elaborate\n                                            shorts, Flash\n                                            turned the web into a giant canvas for amateur artists. It felt messy, sure,\n                                            but it was alive.\n                                            The loading screens with their ticking progress bars, the clunky \"Play\"\n                                            buttons\u2014you can almost\n                                            hear the click of an old mouse just thinking about them.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            But as technology marched forward, Flash began to stumble. Smartphones\n                                            didn\u2019t want it. Browsers\n                                            started to abandon it. Security concerns grew, and the once-vibrant engine\n                                            of web creativity slowly\n                                            faded into obsolescence. In 2020, Adobe officially pulled the plug, and with\n                                            it, an entire era of the\n                                            internet quietly closed its doors.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Today, Flash survives only in memory, in scattered emulators, or in the\n                                            corners of the internet where\n                                            digital archaeologists preserve its artifacts. To younger generations, it\u2019s\n                                            just another outdated plug-in.\n                                            But to those of us who were there, Flash was more than a tool\u2014it was the\n                                            soul of a freer, wilder web.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s strange, really, how a technology so flawed could feel so perfect in\n                                            its time. Maybe that\u2019s the essence\n                                            of nostalgia: remembering not just the thing itself, but the world it built\n                                            around us.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Adobe Flash may be gone, but for many, it will always remain a glowing ember\n                                            from the internet\u2019s untamed\n                                            youth\u2014a reminder of when the web was less polished, less safe, and\n                                            infinitely more fun.\n                                        <\/p>","page":"adobe-flash","description":"Adobe Flash was the spark of the early web\u2014games, animations, and chaos that defined a generation online. Now gone, it lives on in memory as the soul of a freer, wilder internet.","keywords":"adobe flash, forgotten technology, nostalgia, early internet, flash games, flash animations, newgrounds, miniclip, web history, digital art, obsolete software, online culture","year":2025},"async-await":{"url":"https:\/\/tkouleris.eu\/blog\/async-await","category":"misc","title":"async - await","image":"https:\/\/tkouleris.eu\/img\/blog\/async-await\/async-await.png","date":"27 Aug. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>What is async - await<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Asynchronous programming is one of the most important concepts in modern\n                                            JavaScript development.\n                                            It allows your code to perform tasks without blocking the execution of other\n                                            operations \u2014 making\n                                            apps faster and more responsive.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Traditionally, developers used callbacks and later Promises to handle\n                                            asynchronous tasks like network\n                                            requests or file operations. However, both approaches can sometimes make the\n                                            code harder to read.\n                                            This is where async and await come in.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <b>async:<\/b> A keyword used to declare that a function is asynchronous.\n                                            When you mark a function with\n                                            async, it automatically returns a Promise, even if you don\u2019t explicitly\n                                            return one.\n                                        <\/p>\n                                        <p style=\"text-align: justify\">\n                                            <b>await:<\/b> A keyword that pauses the execution of an async function until\n                                            the Promise is resolved\n                                            (or rejected). It makes asynchronous code look and behave like synchronous\n                                            code.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Together, async and await simplify working with Promises and make your code\n                                            cleaner, easier to read,\n                                            and easier to debug.\n                                        <\/p>\n\n                                        <br\/><h3>Real World Analogy<\/h3><br\/>\n\n                                        <p style=\"text-align: justify;\">\n                                            Imagine you are at a coffee shop. You order your coffee. While the barista\n                                            is preparing it, you don\u2019t\n                                            just stand there doing nothing \u2014 you check your phone, read emails, or chat\n                                            with a friend. When the\n                                            coffee is ready, the barista calls your name, and you pick it up.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Placing the order is like calling an async function. The Promise is the\n                                            preperation time. While waiting\n                                            for your coffee you do other tasks - non blocking asynchronous execution.\n                                            You await for the coffee to be\n                                            ready, and when ready you pick it up and go on with your life.\n                                        <\/p>\n\n                                        <br\/><h3>Example in Javascript<\/h3><br\/>\n\n                                        <pre><code>\n\/\/ A function that simulates fetching data from an API\nfunction fetchUserData() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ id: 1, name: \"Alice\" });\n    }, 2000); \/\/ simulating network delay\n  });\n}\n\n\/\/ Async function using await\nasync function displayUser() {\n  console.log(\"Fetching user data...\");\n\n  \/\/ Wait until the promise is resolved\n  const user = await fetchUserData();\n\n  console.log(\"User fetched:\", user);\n  console.log(\"Done!\");\n}\n\n\/\/ Call the async function\ndisplayUser();\n\nconsole.log(\"This runs while waiting for the data...\");\n\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            The function displayUser() starts running and logs on console the <i>\"Fetching\n                                            user data...\"<\/i> text. The\n                                            function pauses at await fetchUserData() while the Promise is pending. This\n                                            does not stop the rest\n                                            of the code. While you wait for the async function to finish the rest of the\n                                            code will be executed\n                                            so you will see on you console <i>\"This runs while waiting for the\n                                            data...\"<\/i>. After about 2 seconds\n                                            the Promise will be resolved and the user will be logged on you console.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The async and await keywords provide a cleaner way to handle asynchronous\n                                            code in JavaScript. They let\n                                            you write code that looks synchronous but still takes full advantage of\n                                            asynchronous operations.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Whenever you\u2019re working with APIs, databases, or any time-consuming tasks,\n                                            async\/await is the modern,\n                                            elegant solution to keep your code both efficient and easy to understand.\n                                        <\/p>","page":"async-await","description":"async and await in JavaScript make asynchronous code easier to read. async marks a function as returning a Promise, while await pauses execution until the Promise resolves.","keywords":"javascript, async, await, promises, asynchronous, code, functions, programming, example, tutorial, fetch, api, non-blocking, beginner, guide","year":2025},"a-programmers-guide-to-stress":{"url":"https:\/\/tkouleris.eu\/blog\/a-programmers-guide-to-stress","category":"misc","title":"A Programmers Guide to Stress","image":"https:\/\/tkouleris.eu\/img\/blog\/a-programmers-guide-to-stress\/a-programmers-guide-to-stress.jpg","date":"26 Aug. 2025","content":"                                        <p style=\"text-align: justify;\">\n                                            The life of a programmer is not just about their chair and computer,\n                                            or the breakfast, brunch, lunch, and afternoon snacks we often see\n                                            in \"A day in the life of a programmer\" type videos.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            A programmer can experience a lot of stress. Deadlines, new technologies,\n                                            client and manager demands. But also stress in their life outside of work.\n                                            Family issues, health problems, financial struggles, and many other things\n                                            that can stretch our nerves.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            So what can we do? I won\u2019t speak as an expert, because I\u2019m not one.\n                                            But I will speak from experience. Unfortunately, if there are no solutions\n                                            to our problems, we cannot get rid of stress. What we can do is change\n                                            our philosophy and the way we see things.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Stoic philosophy and the effort to bring our mind into such a state\n                                            can help us in daily life. Simply put, if a problem has a solution\n                                            that we can apply, then we do it. Otherwise, there\u2019s no need to stress\n                                            about it. If a problem has no solution or the solution is out of our hands,\n                                            then we let it take its course. We wait for it to resolve.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            And how do we deal with people who cause us stress? We try to understand\n                                            them.\n                                            We try to figure out what it is they want from us but don\u2019t say directly.\n                                            Most of the time, everyone wants something from us, and for various reasons,\n                                            they don\u2019t express it. So, we must learn how to draw out from others\n                                            what they want or what need they have but haven\u2019t realized themselves.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            But how can we stay calm and keep a clear mind? One practice is meditation.\n                                            For 10 minutes each day, we should train our mind to concentrate on one\n                                            thing\n                                            and not drift away with useless thoughts. For example, we can spend 10\n                                            minutes\n                                            each day focusing on our breath or on the sounds of nature and the\n                                            environment.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Of course, all of this can fail. I believe the reason for failure,\n                                            especially\n                                            when we\u2019ve put in the maximum possible effort, is a sign that something\n                                            needs to change radically in our life. To change jobs, set boundaries,\n                                            resolve misunderstandings, or whatever else might be necessary.\n                                            In any case, diving deeper into Stoic philosophy and practicing meditation\n                                            can help with the daily stress of our profession or our personal problems.\n                                        <\/p>","page":"a-programmers-guide-to-stress","description":"Programming isn\u2019t just code and deadlines\u2014it\u2019s stress, life challenges, and balance. Stoic philosophy and meditation can help programmers find clarity and peace in daily life.","keywords":"programmer life, stress management, stoicism, meditation, mental health, coding stress, work life balance, mindfulness, developer wellbeing, productivity, inner peace","year":2025},"facade-pattern":{"url":"https:\/\/tkouleris.eu\/blog\/facade-pattern","category":"design patterns","title":"The Facade Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"13 Aug. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            The <b>Facade Pattern<\/b> is a structural design pattern that provides a\n                                            simplified\n                                            interface to a complex subsystem. Instead of interacting with many classes\n                                            directly, each with its own API, you create a facade class that wraps these\n                                            subsystems and exposes a single, unified interface.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            The key goals of the <b>Facade Pattern<\/b> is to hide complexity in order to\n                                            improve\n                                            code readability and reduce coupling between client code and\n                                            subsystems.Think\n                                            of it like a hotel reception desk: instead of calling the chef, cleaners,\n                                            and\n                                            manager individually, you just talk to the receptionist.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            You can use the <b>Facade Pattern<\/b> when you have a complicated subsystem\n                                            with many dependencies,\n                                            when you want to decouple your code from details of the subsystem or when\n                                            you want to provide\n                                            clean, single entry point of for client code.\n                                        <\/p>\n                                        <h4>Example in PHP<\/h4>\n                                        <p style=\"text-align: justify\">\n                                            The classes that we have to use\n                                        <\/p>\n                                        <pre><code>\nclass CoffeeMachine {\n    public function start() {\n        echo \"Coffee machine started\\n\";\n    }\n\n    public function brew() {\n        echo \"Brewing coffee\\n\";\n    }\n}\n\nclass Grinder {\n    public function grindBeans() {\n        echo \"Grinding coffee beans\\n\";\n    }\n}\n\nclass WaterHeater {\n    public function heat() {\n        echo \"Heating water\\n\";\n    }\n}\n\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <p style=\"text-align: justify\">\n                                            The Facade class\n                                        <\/p>\n                                        <pre><code>\nclass CoffeeFacade {\n    private CoffeeMachine $coffeeMachine;\n    private Grinder $grinder;\n    private WaterHeater $waterHeater;\n\n    public function __construct(CoffeeMachine $coffeeMachine, Grinder $grinder, WaterHeater $waterHeater) {\n        $this->coffeeMachine = $coffeeMachine;\n        $this->grinder = $grinder;\n        $this->waterHeater = $waterHeater;\n    }\n\n    public function makeCoffee() {\n        $this->coffeeMachine->start();\n        $this->grinder->grindBeans();\n        $this->waterHeater->heat();\n        $this->coffeeMachine->brew();\n        echo \"Coffee is ready!\\n\";\n    }\n}\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify\">\n                                            Client code\n                                        <\/p>\n                                        <pre><code>\n$coffeeMachine = new CoffeeMachine();\n$grinder = new Grinder();\n$waterHeater = new WaterHeater();\n\n$coffeeFacade = new CoffeeFacade($coffeeMachine, $grinder, $waterHeater);\n$coffeeFacade->makeCoffee();\n                                        <\/code><\/pre>\n\n                                        <p style=\"text-align: justify;\">\n                                            The use of the <b>Facade Pattern<\/b> of the above code it has a simplified\n                                            interface by just calling\n                                            the makeCoffee() method instead of juggling with multiple classes. It is\n                                            loose coupled because\n                                            the client code has no need to know about the different subsystems and is\n                                            high maintainable\n                                            due to the fact that when the coffee making process changes only the facade\n                                            needs updating.\n                                        <\/p>\n\n                                        <h4>Facade vs Service<\/h4>\n                                        <p style=\"text-align: justify\">\n                                            Many times <b>Facade Pattern<\/b> is confused with the Service Pattern. The\n                                            main difference is that\n                                            of purpose of each. The <b>Facade Pattern<\/b> tries to conceal complex\n                                            proccess and the Service\n                                            Pattern encapsulates the business logic. For example a <b>Facade Pattern<\/b>\n                                            can be handling\n                                            the save to disk feature and the Service Pattern will handle wage\n                                            calculation.\n                                        <\/p>","page":"facade-pattern","description":"A Facade provides a simple, unified interface to complex subsystems, hiding their details and reducing coupling, while a Service encapsulates and executes specific business logic.","keywords":"facade pattern, php, design pattern, structural pattern, simplified interface, complex subsystem, service, business logic, code simplicity, loose coupling","year":2025},"strategy-design-pattern":{"url":"https:\/\/tkouleris.eu\/blog\/strategy-design-pattern","category":"design patterns","title":"Strategy Design Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"12 Aug. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            In software design, one of the most common challenges is handling different\n                                            algorithms or behaviors that can be swapped\n                                            without changing the rest of the code. This is where the <b>Strategy Pattern<\/b>\n                                            shines.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The <b>Strategy Pattern<\/b> is a behavioral design pattern that enables selecting\n                                            an algorithm\u2019s behavior at runtime.\n                                            Instead of hardcoding different cases into a class, you encapsulate each\n                                            behavior in its own class and make\n                                            them interchangeable.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            A good time to use the <b>Strategy Pattern<\/b> would be when you have multiple ways\n                                            of performing a specific task\n                                            (e.g., sorting, payment methods, logging), when you want to avoid long\n                                            if...else or switch statements\n                                            or when you need to change the algorithm at runtime without modifying the\n                                            calling code.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            The <b>Strategy Pattern<\/b> consists of three things:\n                                        <\/p>\n\n                                        <p>a. an interface<\/p>\n                                        <p>b. the concrete implementation of the different algorithms<\/p>\n                                        <p>c. a context class<\/p>\n\n                                        <br\/>\n\n                                        <h3>PHP Example<\/h3>\n                                        <h5>Step 1: Strategy Interface<\/h5>\n                                        <pre><code>\ninterface PaymentStrategy {\n    public function pay(float $amount): void;\n}\n                                        <\/code><\/pre>\n                                        <h5>Step 2: Concrete Strategies<\/h5>\n                                        <pre><code>\nclass CreditCardPayment implements PaymentStrategy {\n    public function pay(float $amount): void {\n        echo \"Paid $amount using Credit Card.\\n\";\n    }\n}\n\nclass PayPalPayment implements PaymentStrategy {\n    public function pay(float $amount): void {\n        echo \"Paid $amount using PayPal.\\n\";\n    }\n}\n                                        <\/code><\/pre>\n                                        <h5>Step 3: Context Class<\/h5>\n                                        <pre><code>\nclass PaymentContext {\n    private PaymentStrategy $paymentStrategy;\n\n    public function __construct(PaymentStrategy $paymentStrategy) {\n        $this->paymentStrategy = $paymentStrategy;\n    }\n\n    public function setPaymentStrategy(PaymentStrategy $paymentStrategy): void {\n        $this->paymentStrategy = $paymentStrategy;\n    }\n\n    public function checkout(float $amount): void {\n        $this->paymentStrategy->pay($amount);\n    }\n}\n                                        <\/code><\/pre>\n                                        <h5>Final step: Using it<\/h5>\n                                        <pre><code>\n$context = new PaymentContext(new CreditCardPayment());\n$context->checkout(100.0); \/\/ Paid 100 using Credit Card.\n\n$context->setPaymentStrategy(new PayPalPayment());\n$context->checkout(200.0); \/\/ Paid 200 using PayPal.\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            The <b>Strategy Pattern<\/b> can be combined with a Factory Pattern for the\n                                            selection of the right\n                                            Algorithm class that the Context Class will receive.\n                                        <\/p>\n                                        <h5>The Factory<\/h5>\n                                        <pre><code>\nclass PaymentFactory\n{\n    public static function make($option)\n    {\n        if($option == 1){\n            return new CreditCardPayment();\n        }\n\n        if($option == 2){\n            return new PayPalPayment();\n        }\n\n        throw Exception('Class not found');\n    }\n}\n                                        <\/code><\/pre>\n                                        <h5>Using the Factory<\/h5>\n                                        <pre><code>\n$option = $request->input('option');\n$paymentObject = PaymentFactory::make($option);\n$context = new PaymentContext($paymentObject);\n$context->checkout(100.0);\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            This can be a drawback of the <b>Strategy Pattern<\/b>. In some frameworks the\n                                            <b>Strategy Pattern<\/b> can\n                                            be used with the .env configuration file i.e. the logging algorithm\n                                            (daily\/stack) or the session in Laravel.\n                                            With the <b>Strategy Pattern<\/b> you comply to the open\/close principle and you\n                                            have code reusability but the\n                                            same time you increase the number of classes.\n                                        <\/p>","page":"strategy-design-pattern","description":"The Strategy Pattern lets you switch algorithms dynamically. Learn its benefits with a clear PHP example, improving flexibility, maintainability, and clean code architecture.","keywords":"strategy pattern, php strategy pattern, java strategy pattern, laravel strategy pattern, behavioral design pattern, design patterns in php, design patterns in java, laravel design patterns","year":2025},"programmers-get-moving":{"url":"https:\/\/tkouleris.eu\/blog\/programmers-get-moving","category":"misc","title":"Programmers, Get Moving: Your Brain Depends on It","image":"https:\/\/tkouleris.eu\/img\/blog\/programmers-get-moving\/programmers-get-moving.jpg","date":"03 Aug. 2025","content":"                                        <p style=\"text-align: justify;\">\n                                            It\u2019s a well-known fact that programmers tend to be less physically active\n                                            than people in many other professions.\n                                            It\u2019s simply the nature of our work \u2014 we sit in comfortable chairs, think,\n                                            code, then think some more. But\n                                            prolonged sitting takes a toll on our health, and ironically, it harms the\n                                            very organ we rely on most: the brain.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            That\u2019s why it's crucial for every programmer to make time \u2014 as much as\n                                            possible \u2014 to care for their body and\n                                            mind. I get it: \u201cI don\u2019t have time\u201d is a common response, and one I often\n                                            find myself saying, too. But even\n                                            15 minutes of exercise a day can make a difference. Personally, I aim for 30\n                                            minutes a day, and I recommend\n                                            it if you can manage.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            You might say, \u201cI can\u2019t run,\u201d or \u201cI can\u2019t lift weights,\u201d or \u201cYoga\u2019s not for\n                                            me.\u201d That\u2019s fine. Maybe your body\n                                            isn't ready for intense activity \u2014 but you can still walk. Maybe you can't\n                                            lift 20kg \u2014 but you can lift 5kg.\n                                            The point is to just do something. For 15 minutes a day, move.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Leave your chair and get your blood flowing. Dance if that\u2019s your thing.\n                                            Jump in place. Walk around the block.\n                                            It doesn\u2019t matter what you do, as long as you're moving. You might find it\n                                            boring (I often do), but it\u2019s about\n                                            long-term gains, not short-term excitement.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Our bodies decay because life wears them down (yes, a bit of an oxymoron).\n                                            Don\u2019t let inactivity speed up that\n                                            process. Just walking can do wonders \u2014 especially for the one thing we\n                                            programmers can't afford to lose: our\n                                            brain.\n                                        <\/p>","page":"programmers-get-moving","description":"A reminder for programmers to stay active daily\u2014just 15 minutes of movement can boost brain health and counteract the negative effects of prolonged sitting. Your future self will thank you.","keywords":"programmer health, physical activity, exercise for coders, daily movement, brain health, sedentary lifestyle, fitness tips, desk job exercise, walking benefits, programmer lifestyle, coding and health","year":2025},"slot-cpu":{"url":"https:\/\/tkouleris.eu\/blog\/slot-cpu","category":"forgotten technology","title":"Forgotten Technologies #6: Slot CPU","image":"https:\/\/tkouleris.eu\/img\/blog\/slot-cpu\/slot-cpu.jpg","date":"06 July 2025","content":"<p style=\"text-align: justify;\">\n                                            These days, most CPUs pretty much look the same. They're just flat chips\n                                            that drop into a socket\n                                            on the motherboard, you latch them in, slap a heatsink on top, and you're\n                                            good to go. But it wasn\u2019t\n                                            always like this. A while back, things looked a bit more... wild.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Back then, some CPUs basically looked like little adapter cards. You had the\n                                            processor itself\n                                            soldered onto a small PCB, along with separate cache chips, all wrapped in a\n                                            plastic shell.\n                                            Instead of dropping into a socket, these things slid into slots\u2014kind of like\n                                            PCIe slots.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Intel kicked things off with the Pentium II in '97, their first slot-based\n                                            desktop CPU.\n                                            They needed more room for the external cache, which today is just built\n                                            right into the chip.\n                                            AMD jumped on the slot train too with their original Athlon line.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Slot CPUs eventually went extinct\u2014for good reason. They were big, clunky,\n                                            and didn\u2019t age well.\n                                            If you\u2019ve never seen one in real life, you\u2019re not missing much\u2014but they were\n                                            definitely a thing.\n                                        <\/p>","page":"slot-cpu","description":"Back in the day, some CPUs looked like adapter cards and slotted into the motherboard. Intel's Pentium II and AMD's Athlon used this design before sockets took over and cache moved on-die.","keywords":"pentium ii, slot cpu, amd athlon, adapter card, cpu cache, motherboard slot, retro hardware, cpu design, intel, external cache, old cpus, desktop processors, slot-based cpu, pc history","year":2025},"law-of-demeter":{"url":"https:\/\/tkouleris.eu\/blog\/law-of-demeter","category":"programming","title":"The Law of Demeter","image":"https:\/\/tkouleris.eu\/img\/blog\/law-of-demeter\/law-of-demeter.jpg","date":"15 Jun. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            The Law of Demeter is a guideline that can help your code to be stable and\n                                            simple.\n                                            It is also known as the principle of least knowledge, a name that was given\n                                            by\n                                            the basic rules that a programmer must follow to comply to the Law of\n                                            Demeter.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            A method M of an object O should only call methods on the following:\n                                        <\/p>\n                                        <ul>\n                                            <li>O itself (i.e., call its own methods)<\/li>\n                                            <li>Objects passed in as arguments to M<\/li>\n                                            <li>Objects created\/instantiated within M<\/li>\n                                            <li>Direct component objects (fields) of O (i.e., objects that are directly\n                                                owned by O)\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Breaking the law<\/h3>\n\n                                        <p style=\"text-align: justify;\">\n                                            The most common practice to break the law is the by chained calls like:\n                                        <\/p>\n                                        <pre><code>\nobj.getA().getB().doSomething()\n                                        <\/code><\/pre>\n\n                                        <p style=\"text-align: justify;\">\n                                            The above example creates a tight coupling with the internal structure of\n                                            objects\n                                            that make your code more fragile.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"color:lightgreen;\">Good Example<\/h3>\n                                        <pre><code>\nclass Wallet:\n    def __init__(self, balance):\n        self._balance = balance\n\n    def get_balance(self):\n        return self._balance\n\n\nclass Customer:\n    def __init__(self, wallet):\n        self._wallet = wallet\n\n    def get_balance(self):\n        return self._wallet.get_balance()  # OK: direct field\n\n                                        <\/code><\/pre>\n\n                                        <br\/>\n                                        <h3 style=\"color: red;\">Bad Example<\/h3>\n                                        <pre><code>\nclass Money:\n    def __init__(self, amount):\n        self._amount = amount\n\n    def get_amount(self):\n        return self._amount\n\n\nclass Wallet:\n    def __init__(self, money):\n        self._money = money\n\n    def get_money(self):\n        return self._money\n\n\nclass Customer:\n    def __init__(self, wallet):\n        self._wallet = wallet\n\n    def get_wallet_amount(self):\n        return self._wallet.get_money().get_amount()\n        # \u274c Too many hops\n\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3 style=\"color: lightgreen;\">Fix by Delegation (Follows LoD)<\/h3>\n                                        <pre><code>\nclass Money:\n    def __init__(self, amount):\n        self._amount = amount\n\n    def get_amount(self):\n        return self._amount\n\n\nclass Wallet:\n    def __init__(self, money):\n        self._money = money\n\n    def get_amount(self):\n        return self._money.get_amount()  # Delegation\n\n\nclass Customer:\n    def __init__(self, wallet):\n        self._wallet = wallet\n\n    def get_wallet_amount(self):\n        return self._wallet.get_amount()\n        # \u2705 One-level call\n\n                                        <\/code><\/pre>\n\n                                        <p style=\"text-align: justify;\">\n                                            It is obvious that a simplified version of the Law of Demeter rules could be\n                                            that\n                                            an object only talks to his friends, never to strangers and its object must\n                                            have\n                                            a limited knowledge about other objects, only the objects that are closely\n                                            related\n                                            to it.\n                                        <\/p>","page":"law-of-demeter","description":"The Law of Demeter advises objects to only talk to their immediate friends\u2014avoiding chained calls\u2014to reduce coupling and improve code modularity, maintainability, and flexibility.","keywords":"law of demeter, object oriented design, software design principles, low coupling, encapsulation, demeter principle, clean code, design patterns, oop best practices, software architecture","year":2025},"binary-search-tree":{"url":"https:\/\/tkouleris.eu\/blog\/binary-search-tree","category":"data structures","title":"Data Structures #4: Binary Search Tree","image":"https:\/\/tkouleris.eu\/img\/blog\/data-structures.jpg","date":"09 Jun. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                        Binary Search Trees (BSTs) are a foundational concept in computer science and software engineering,\n                                        commonly used in implementing efficient searching, insertion, and deletion operations. A BST is a\n                                        type of binary tree with a specific structure that allows for fast data retrieval.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                        A binary search tree is consisted by nodes. Each node contains 3 informations. The data, the value\n                                        that the node carries, a left node pointer where it points to a node with a value less than the one\n                                        it carries and a right node pointer where it points to a node with a value larger than the one it\n                                        carries.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                        There are four main operations on a binary search tree.\n                                        <\/p>\n                                        <ul>\n                                            <li>search<\/li>\n                                            <li>insert<\/li>\n                                            <li>delete<\/li>\n                                            <li>traverse<\/li>\n                                        <\/ul>\n\n                                        <p style=\"text-align: justify;\">\n                                        The main advantage of a BST is the efficient lookup, insert and delete. You move along\n                                        the nodes by going left or right according to the value you search\/insert\/delete every time.\n                                        This comes with a drawback. A binary search tree is not balanced. You might have a node with\n                                        only left or only right node.\n                                        <\/p>\n\n                                        <h3>Where it is used<\/h3>\n                                        <ul>\n                                            <li>Databases<\/li>\n                                            <li>Filesystems<\/li>\n                                            <li>Auto complete and dictionaries<\/li>\n                                        <\/ul>\n                                        <pre><code>\nclass Node:\n    def __init__(self, value):\n        # print(\"__INIT__: \" + str(value))\n        self.left = None\n        self.right = None\n        self.value = value\n\nclass BST:\n    def __init__(self, value):\n        self.root = Node(value)\n\n    def insert(self, value):\n        current = self.root\n        while True:\n            if value < current.value:\n                if current.left is None:\n                    current.left = Node(value)\n                    return\n                current = current.left\n            else:\n                if current.right is None:\n                    current.right = Node(value)\n                    return\n                current = current.right\n\n    def search(self, value):\n        current = self.root\n        while current is not None:\n            if value == current.value:\n                return True\n            if value < current.value:\n                current = current.left\n            else:\n                current = current.right\n        return False\n\n\n\n\nobj = BST(10)\nobj.insert(1)\nobj.insert(11)\nobj.insert(12)\nobj.insert(4)\nprint(obj.search(4))\nprint(obj.search(2))\nprint(obj.search(12))\n                                        <\/code><\/pre>","page":"binary-search-tree","description":"A Binary Search Tree (BST) is a node-based structure where left children are smaller and right are larger, enabling efficient searching, insertion, and deletion in sorted data.","keywords":"binary search tree, bst, data structure, tree traversal, in-order, insertion, deletion, search, binary tree, algorithms, nodes, left child, right child, sorted data","year":2025},"ada-lovelace":{"url":"https:\/\/tkouleris.eu\/blog\/ada-lovelace","category":"tech heroes","title":"Tech Heroes #10: Ada Lovelace","image":"https:\/\/tkouleris.eu\/img\/blog\/ada-lovelace\/ada-lovelace.jpg","date":"01 Jun. 2025","content":"                                        <p style=\"text-align: justify;\">\n                                            Ada Lovelace, born in 1815, is often called the first computer\n                                            programmer\u2014despite\n                                            the fact that actual computers didn\u2019t exist yet. She was the daughter of the\n                                            famous\n                                            poet Lord Byron, but it was her interest in math and logic (influenced by\n                                            her mother)\n                                            that shaped her path.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Her main contribution came from working with Charles Babbage, who designed\n                                            the Analytical\n                                            Engine\u2014a mechanical computer that was never fully built. Ada translated an\n                                            article about\n                                            the machine and added her own detailed notes, which ended up being more\n                                            insightful than\n                                            the original piece. In those notes, she included an algorithm meant to run\n                                            on the machine,\n                                            making it the first published computer program in history.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            But what really makes Ada stand out is that she saw beyond number-crunching.\n                                            She imagined\n                                            that a machine like the Analytical Engine could handle things like music or\n                                            symbols\u2014not\n                                            just math. That kind of thinking was way ahead of her time.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            In short, Ada Lovelace laid down some of the earliest ideas behind\n                                            programming, nearly\n                                            a century before modern computers showed up. Her work helped shape how we\n                                            think about\n                                            machines and code today.\n                                        <\/p>","page":"ada-lovelace","description":"Ada Lovelace, the first computer programmer, wrote the first algorithm for Babbage's Analytical Engine, laying the groundwork for modern computing and the concept of software.","keywords":"ada lovelace, first computer programmer, history of computing, analytical engine, charles babbage, early computing, women in tech, computer history, ada algorithm, software pioneer","year":2025},"trie":{"url":"https:\/\/tkouleris.eu\/blog\/trie","category":"data structures","title":"Data Structures #3: Trie","image":"https:\/\/tkouleris.eu\/img\/blog\/data-structures.jpg","date":"25 May. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            The Tie data structure promotes the easiest way to search a prefix\n                                            of a word or words, spell checking and autocomplete.It's a Tree like\n                                            data structure that each node represents a character and has a\n                                            dictionary of children nodes.\n                                        <\/p><br\/>\n                                        <pre><code>\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self,word):\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = TrieNode()\n            current = current.children[char]\n        current.end_of_word = True\n\n    def search(self, word):\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                return False\n            current = current.children[char]\n        return current.end_of_word\n\n    def starts_with(self, prefix):\n        current = self.root\n        for char in prefix:\n            if char not in current.children:\n                return []\n            current = current.children[char]\n        words = []\n        self._collect_words(current, prefix, words)\n        return words\n\n    def _collect_words(self, node, prefix, words):\n        if node.end_of_word:\n            words.append(prefix)\n        for char, child in node.children.items():\n            self._collect_words(child, prefix+char, words)\n\ntrie = Trie()\nwords = [\"cat\", \"car\", \"cart\", \"carbon\", \"dog\", \"door\"]\nfor word in words:\n    trie.insert(word)\n\nprint(trie.search(\"car\"))      # True\nprint(trie.search(\"care\"))     # False\n\nprint(trie.starts_with(\"car\"))  # ['car', 'cart', 'carbon']\nprint(trie.starts_with(\"do\"))   # ['dog', 'door']\nprint(trie.starts_with(\"ca\"))   # ['cat', 'car', 'cart', 'carbon']\nprint(trie.starts_with(\"z\"))    # []\n                                        <\/code><\/pre>","page":"trie","description":"A trie (pronounced try) is a type of search tree\u2014more specifically, a prefix tree\u2014used to store a dynamic set of strings where common prefixes are shared.","keywords":"trie, data structure, search tree","year":2025},"binary-heap":{"url":"https:\/\/tkouleris.eu\/blog\/binary-heap","category":"data structures","title":"Data Structures #2: Binary Heap","image":"https:\/\/tkouleris.eu\/img\/blog\/data-structures.jpg","date":"18 May. 2025","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            A Binary Heap is a kind of binary tree that is a complete binary tree. A complete\n                                            binary tree is the binary tree that all levels are fully filled withe exception of\n                                            the last.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                        A Binary Heap can be a Min Heap or a Max Heap. For the Min Heap the root of the\n                                        tree keeps the minimum value and for the Max Heap the root keeps the maximum value.\n                                        And that is the strong part of the binary heap. The ability to get the min\/max value\n                                        of a set of numbers in O(1).\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                        The representation of the Binary Heap is achieved with the help of an array. The\n                                        first item of the array (index 0) keeps the root value (min or max). Each of the\n                                        items can have a parent or left\/right child. The parent of an item can be found\n                                            by the next formula<\/p>\n                                        <pre><code>\n(index - 1) \/\/ 2\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                        The left and right child can be found by the following formulas:\n                                        <\/p>\n                                        <pre><code>\nleft_child = index * 2 + 1\nright_child = index * 2 + 2\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                        The Binary Heap has 3 main operations. The Insertion where you insert a new value\n                                        in the binary tree that must be placed in the correct spot (heapify up, you go from\n                                        the last item of the array to the top in order to place the new value in the correct\n                                        spot), extraction where you get the min\/max value and extracted from the binary heap\n                                        (heapify down, you go from index 0 to the bottom and swapping the values in the correct\n                                        place) and peek min\/max where you just get back the root element without any extraction.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                        The practical use of a binary heap is priority queues where you need to find the next\n                                        job that must be executed in a given schedule with specified priorities.\n                                        <\/p><br\/>\n                                        <h3>Example In Python<\/h3><br\/>\n                                        <pre><code>\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def _parent(self, index):\n        return (index - 1) \/\/ 2\n\n    def _leftChild(self, index):\n        return 2 * index + 1\n\n    def _rightChild(self, index):\n        return 2 * index + 2\n\n    def _swap(self, index_1, index_2):\n        tmp = self.heap[index_1]\n        self.heap[index_1] = self.heap[index_2]\n        self.heap[index_2] = tmp\n\n    def _heapify_up(self, index):\n        parent = self._parent(index)\n        while parent >= 0:\n            if self.heap[parent] > self.heap[index]:\n                self._swap(parent, index)\n            index = parent\n            parent = self._parent(index)\n\n    def _heapify_down(self, index):\n        size = len(self.heap)\n        while self._leftChild(index) < size:\n            left = self._leftChild(index)\n            right = self._rightChild(index)\n            smaller = left\n\n            if right < size and self.heap[right] < self.heap[smaller]:\n                smaller = right\n\n            if self.heap[smaller] > self.heap[index]:\n                self._swap(smaller, index)\n            index = smaller\n\n    def insert(self, value):\n        self.heap.append(value)\n        self._heapify_up(len(self.heap)-1)\n\n    def extract_min(self):\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop(0)\n\n        out = self.heap.pop(0)\n        self._heapify_down(0)\n        return out\n\n    def __str__(self):\n        return str(self.heap)\n\n\nh = MinHeap()\nh.insert(10)\nh.insert(4)\nh.insert(15)\nh.insert(20)\nh.insert(0)\nh.insert(8)\n\nprint(\"Heap:\", h)\n\nprint(\"Extract min:\", h.extract_min())\nprint(\"Heap after extract:\", h)\n#\nprint(\"Extract min:\", h.extract_min())\nprint(\"Heap after extract:\", h)\n                                        <\/code><\/pre>","page":"binary-heap","description":"Efficient overview of binary heaps, including min\/max heap operations, array implementation, heapify, and usage in priority queues.","keywords":"binary heap, min heap, max heap, complete binary tree, heap data structure, heap operations","year":2025},"linked-lists":{"url":"https:\/\/tkouleris.eu\/blog\/linked-lists","category":"data structures","title":"Data Structures #1: Linked Lists","image":"https:\/\/tkouleris.eu\/img\/blog\/data-structures.jpg","date":"29 Apr. 2025","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>What is a linked list?<\/h3><br\/>\n\n                                        <p style=\"text-align: justify;\">\n                                            A linked list is a sequence of objects of the same type, where\n                                            each object leads to the next and contains some information. Each\n                                            such object (node) always holds at least these two pieces of information:\n                                            a value and a reference to the next node. In some cases, a node may also\n                                            point,\n                                            besides to the next node, to the previous one.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            When we want to traverse each object in the list, we start from the first\n                                            one,\n                                            called the head, and move through the subsequent nodes until the last one.\n                                            The\n                                            last object has the characteristic that its pointer points to nowhere\n                                            (null).\n                                        <\/p><br\/>\n\n                                        <h3>Advantages and Disadvantages<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            The main advantages of a linked list are its dynamic nature \u2014 you can add\n                                            and\n                                            delete as many elements as you want without having to declare the size in\n                                            advance \u2014 and the ease of insertion or deletion of elements, since you only\n                                            need to modify the pointers of the objects. The biggest disadvantage is the\n                                            search speed, as you often have to traverse the entire list to find a\n                                            specific\n                                            object.\n                                        <\/p><br\/>\n                                        <h3>Example In Python<\/h3><br\/>\n                                        <pre><code>\n# Define a Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data  # Store the data\n        self.next = None  # Pointer to the next node\n\n# Define a LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None  # Start with an empty list\n\n    # Function to add a new node at the end\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:  # If the list is empty\n            self.head = new_node\n            return\n        # Otherwise, find the last node\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    # Function to print the list\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nll = LinkedList()\nll.append(1)\nll.append(2)\nll.append(3)\nll.print_list()\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3>Example In Java<\/h3><br\/>\n                                        <pre><code>\n                                            \/\/ Define a Node class\nclass Node {\n    int data;\n    Node next;\n\n    \/\/ Constructor\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n\/\/ Define the LinkedList class\nclass LinkedList {\n    Node head; \/\/ head of the list\n\n    \/\/ Method to add a new node at the end\n    public void append(int data) {\n        Node newNode = new Node(data);\n\n        \/\/ If the linked list is empty, make the new node the head\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n\n        \/\/ Otherwise, traverse to the end\n        \/\/of the list and add the new node\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = newNode;\n    }\n\n    \/\/ Method to print the linked list\n    public void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n}\n\n\/\/ Example usage\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n\n        list.append(1);\n        list.append(2);\n        list.append(3);\n\n        list.printList();\n    }\n}\n                                        <\/code><\/pre>","page":"linked-lists","description":"A linked list is a dynamic data structure used in programming to store elements efficiently. Unlike arrays, linked lists allow fast insertions and deletions. Learn how to implement singly linked lists in Python and Java with easy code examples and tips.","keywords":"linked list, data structure, singly linked list, linked list in java, linked list in python, java linked list example, python linked list example, dynamic data structure, node in linked list, implement linked list, linked list tutorial, programming data structures","year":2025},"hackers":{"url":"https:\/\/tkouleris.eu\/blog\/hackers","category":"computer science movies","title":"Computer Science Movies #3: Hackers","image":"https:\/\/tkouleris.eu\/img\/blog\/hackers\/hackers.jpg","date":"14 Apr. 2025","content":"                                        <p style=\"text-align: justify;\">\n                                            Hackers follows a group of teenage computer prodigies in the mid-1990s who\n                                            get caught up in a high-stakes\n                                            corporate conspiracy. The story centers on Dade Murphy, a young hacker once\n                                            known as \"Zero Cool,\" who was\n                                            banned from using computers after crashing over a thousand systems at the\n                                            age of 11. Now a high schooler in\n                                            New York City, Dade adopts the alias \"Crash Override\" and quickly falls in\n                                            with an underground group of fellow\n                                            hackers: Acid Burn (played by Angelina Jolie), Cereal Killer, Lord Nikon,\n                                            and Phantom Phreak.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            When one of them accidentally uncovers part of a scheme involving a computer\n                                            virus designed to capsize oil\n                                            tankers, the group finds themselves targeted by the authorities and a\n                                            corrupt corporate security officer known\n                                            as The Plague. As the stakes rise, they must use their skills to clear their\n                                            names and expose the real villain\n                                            behind the cybercrime.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Despite mixed reviews at release, Hackers has become a beloved cult film\n                                            over time, especially admired for its\n                                            retro take on digital rebellion and youth culture at the dawn of the\n                                            internet age.\n                                        <\/p>\n                                        <h3>Details<\/h3>\n                                        <a href=\"https:\/\/www.imdb.com\/title\/tt0113243\/\"\n                                           target=\"_blank\">Hackers(1995)<\/a><br\/>\n                                        <strong>Director:<\/strong> <a href=\"https:\/\/www.imdb.com\/name\/nm0812200\/\"\n                                                                      target=\"_blank\">Iain Softley<\/a><br\/>\n                                        <strong>Writer:<\/strong> <a href=\"https:\/\/www.imdb.com\/name\/nm0604360\/\">Rafael\n                                        Moreu<\/a><br\/>\n                                        <strong>Starring: <\/strong> <a href=\"https:\/\/www.imdb.com\/name\/nm0001538\/\"\n                                                                       target=\"_blank\">Jonny Lee Miller<\/a> (Dade),\n                                        <a href=\"https:\/\/www.imdb.com\/name\/nm0001401\/\" target=\"_blank\">Angelina\n                                            Jolie<\/a>(Kate),\n                                        <a href=\"https:\/\/www.imdb.com\/name\/nm0000498\/\" target=\"_blank\">Matthew\n                                            Lillard<\/a> (Cereal)\n                                        <br\/><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/Rn2cf_wJ4f4?si=0-Ej-jMyMlgJ9zqK\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n\n","page":"hackers","description":"Teenage hackers discover a criminal conspiracy with plans to use a computer virus that will capsize five oil tankers.","keywords":"hackers, angelina jolie, freaking, outlaw","year":2025},"singleton-pattern":{"url":"https:\/\/tkouleris.eu\/blog\/singleton-pattern","category":"design patterns","title":"Singleton Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"06 Apr. 2025","content":"                                        <style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify;\">\n                                            The Singleton Pattern is a creational design pattern that ensures a class\n                                            has only one instance and provides a global point of access to that\n                                            instance.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            There will be times that as a programmer you will only need one object of a\n                                            specific class in order either to control access to a resource\n                                            like database connection, logging service or configuration manager or to one\n                                            global object for the entire application.\n                                            Without the singleton pattern, you risk creating multiple instances of a\n                                            class that should really only exist once.\n                                        <\/p>\n\n                                        <h3>How it works<\/h3>\n\n                                        <p style=\"text-align: justify;\">\n                                            The simplest way to restrict the creation of multiple objects is to restrict\n                                            the source of the object creation of a class aka the constructor.\n                                            Your class should have an private class instance property and you\n                                            constructor should also be private. You must have a method of getInstance\n                                            that\n                                            will return the instance property. When someone calls the getInstance the\n                                            method will check if the instance property is null and if it is\n                                            null will create an instance of the class. If the instance property is not\n                                            null there it returns it.\n                                        <\/p>\n                                        <br\/>\n                                        <p style=\"text-align: justify;font-weight: bold;\">Python Example<\/p>\n                                        <pre><code>\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n\n# Usage\ns1 = Singleton()\ns2 = Singleton()\nprint(s1 is s2)  # True\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <p style=\"text-align: justify;font-weight: bold;\">Java Example<\/p>\n                                        <pre><code>\npublic class Singleton {\n    private static Singleton instance;\n\n    \/\/ Private constructor prevents instantiation from other classes\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n                                        <\/code><\/pre>\n\n                                        <h3>Problems<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The most significant problem with the singleton pattern is that you have a\n                                            global state and it makes the unit testing difficult. It also\n                                            makes it easier to violate the single responsibility principle.\n                                        <\/p>","page":"singleton-pattern","description":"The Singleton Pattern is a creational design pattern that ensures a class has only one instance and provides a global point of access to that instance","keywords":"design pattern, singleton pattern, code, clean code, algorithms","year":2025},"my-ide-journey":{"url":"https:\/\/tkouleris.eu\/blog\/my-ide-journey","category":"misc","title":"My IDE Journey","image":"https:\/\/tkouleris.eu\/img\/blog\/my-ide-journey\/my-ide-journey.jpg","date":"31 Mar. 2025","content":"                                        <p style=\"text-align: justify;\">\n                                            Over the years, I have used many text editors and IDEs. Each one was\n                                            different,\n                                            had unique features, but ultimately did the job it was meant to do. This\n                                            article\n                                            is about my experience with IDEs and text editors.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            The most important text editor I used was <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Notepad%2B%2B\"\n                                            target=\"_blank\">Notepad++<\/a>. It was simple to use, had\n                                            some nice searching tools, and... everyone was using it. Back then, I had no\n                                            need for anything more advanced while I was just writing simple HTML and\n                                            CSS.\n                                            No JavaScript, no backend, nothing. The only flaw I could find with\n                                            Notepad++\n                                            was that it was not available for Linux. So, at work, I used Notepad++, and\n                                            at home...\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            \u2026I was using <a href=\"https:\/\/en.wikipedia.org\/wiki\/Vim_(text_editor)\"\n                                                            target=\"_blank\">Vim<\/a>. Yes, Vim is extremely difficult to\n                                            master, but the only\n                                            keyboard shortcuts I ever needed were to enter INSERT mode, save, and\u2014 the\n                                            most difficult one\u2014 save and exit. Even when I used it for C coding, Vim was\n                                            fine with just those simple shortcuts. Anyway, the important part was\n                                            compiling\n                                            the files, which I did using the command line and the gcc command.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            When I started with more serious programming\u2014 not just simple HTML and CSS,\n                                            but actual backend programming with PHP\u2014 I moved to <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Sublime_Text\" target=\"_blank\">Sublime\n                                            Text<\/a>. I don't know\u2026\n                                            back then, it seemed like a nice little text editor. Nothing fancy, but it\n                                            did\n                                            the job. I experimented with <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Visual_Studio_Code\" target=\"_blank\">Visual\n                                            Studio Code<\/a> and <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Brackets_(text_editor)\" target=\"_blank\">Brackets<\/a>,\n                                            but Sublime was\n                                            what I needed at the time.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The big IDE explosion in my life came when a colleague suggested I start\n                                            using\n                                            PHPStorm. I still remember how much I hated it. Everything was lighting up,\n                                            I was\n                                            trying to type, and suggestions were popping up under my typing, with curly\n                                            lines\n                                            under what the IDE thought was wrong. I hated it. And after a month or so\u2026 I\n                                            loved\n                                            it. So much so that I started using other <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/JetBrains\" target=\"_blank\">JetBrains<\/a>\n                                            products like IntelliJ, DataGrip,\n                                            and PyCharm. I loved it so much that I still have a subscription.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            After all the changes, and despite my initial hate, I found out that\n                                            JetBrains products\n                                            are great for me. I like having everything wrapped in one place\u2014 my\n                                            database, my debugger,\n                                            my command line. I know that there are probably other great IDEs out there,\n                                            but you can't\n                                            teach an old dog new tricks.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            <b>Honorable mentions:<\/b> <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Eclipse_(software)\" target=\"_blank\">Eclipse<\/a>\n                                            and <a href=\"https:\/\/en.wikipedia.org\/wiki\/NetBeans\" target=\"_blank\">NetBeans<\/a>\n                                            when I was learning Java, <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Turbo_Pascal\" target=\"_blank\">Turbo\n                                            Pascal<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Turbo_C\" target=\"_blank\">Turbo\n                                            C<\/a>,\n                                            and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Visual_Basic_(classic)\"\n                                                   target=\"_blank\">Visual Basic 6<\/a> when I was in college.\n                                        <\/p>","page":"my-ide-journey","description":"A personal journey through text editors and IDEs, from Notepad++ and Vim to Sublime Text and JetBrains products like PHPStorm, IntelliJ, and PyCharm. Discover the evolution of a developer\u2019s toolkit.","keywords":"text editors, ides, notepad++, vim, sublime text, visual studio code, brackets, phpstorm, jetbrains, intellij, datagrip, pycharm, eclipse, netbeans, turbo pascal, turbo c, visual basic 6, programming, coding, developer tools, software development","year":2025},"terry-davis-a-tortured-genius":{"url":"https:\/\/tkouleris.eu\/blog\/terry-davis-a-tortured-genius","category":"tech heroes","title":"Tech Heroes #9: Terry Davis - A Tortured Genius","image":"https:\/\/tkouleris.eu\/img\/blog\/terry-davis-a-tortured-genius\/terry-davis-a-tortured-genius.jpg","date":"23 Mar. 2025","content":"<p style=\"text-align: justify;\">\n                                            The story of Terry A. Davis is a tragic tale of a brilliant programmer \u2014 a\n                                            tortured\n                                            genius who suffered from schizophrenia and died young at the age of 48.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Terrence Andrew Davis was born in December 1969, and at an early age, he\n                                            learned\n                                            assembly on a Commodore 64. He graduated as a computer and electrical\n                                            engineer\n                                            and worked for Ticketmaster from 1990 until 1996.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The tragedy began somewhere in 1996 when he experienced his first\n                                            schizophrenic\n                                            episode. While he was an atheist, his illness led him to believe that he was\n                                            receiving messages from God. Later, he claimed that aliens and government\n                                            agents\n                                            were following him.\n                                        <\/p>\n                                        <br\/>\n                                        <img alt=\"terry davis 2000\"\n                                             style=\"height: 384px;display: block;margin-left: auto;margin-right: auto;width: 50%;\"\n                                             src=\"https:\/\/tkouleris.eu\/img\/blog\/terry-davis-a-tortured-genius\/terry_davis_2000.jpg\"\/>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            In 2005, he stated that he wanted to build an operating system. His illness,\n                                            combined with his genius, drove him to create an operating system called\n                                            \"Temple OS,\"\n                                            which he believed was the \"temple of God.\"\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            To build the OS, he created a new programming language called Holy C (a play\n                                            on \"Holy See\"),\n                                            a variant of C and C++. He worked alone for 12 years to complete the\n                                            operating system.\n                                            Temple OS had VGA 640x480 graphics, was multi-core, and supported FAT32.\n                                            Terry A. Davis\n                                            claimed that the specifications for Temple OS were given to him by God.\n                                        <\/p>\n                                        <br\/><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/h7gf5M04hdg?si=9kd9ZHK5KOB9wV1A\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n\n                                        <p style=\"text-align: justify;\">\n                                            He was undergoing treatment for his condition and lived with his parents.\n                                            However, after\n                                            Terry stopped taking his medication, his parents gave him an ultimatum:\n                                            either resume\n                                            treatment or leave the house. Terry chose to leave and lived on the streets,\n                                            receiving\n                                            food and support from his fans.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            In August 2018, he was struck by a train. The investigation did not conclude\n                                            whether\n                                            it was a suicide or an accident.\n                                        <\/p>","page":"terry-davis-a-tortured-genius","description":"Terry A. Davis, a brilliant programmer with schizophrenia, created Temple OS. He lived a tragic life, facing struggles, and passed away at 48.","keywords":"terry a. davis, temple os, holy c, programmer, schizophrenia, mental illness, operating system, genius, tragedy, software development, computing, technology, programming language, creative genius, vga graphics, fat32, ticketmaster.","year":2025},"code-kata":{"url":"https:\/\/tkouleris.eu\/blog\/code-kata","category":"programming","title":"Code Kata: The Art of Code","image":"https:\/\/tkouleris.eu\/img\/blog\/code-kata\/code-kata.jpg","date":"17 Mar. 2025","content":"                                        <p style=\"text-align: justify;\">\n                                            The best way to become a better programmer is to write more code. But what\n                                            kind of code should you write?\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Veteran developers often recommend Test Driven Development (TDD), and I\n                                            agree. But how can you transition\n                                            from a chaotic coding approach to the more organized and strategic method of\n                                            TDD? The key is to start small and\n                                            gradually build your skills \u2014 and that's where \"Code Katas\" come in.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Code Katas are similar to the katas practiced in martial arts: a precise set\n                                            of movements repeated over and over\n                                            until they become second nature. The term was first introduced by Dave\n                                            Thomas in the book The Pragmatic Programmer.\n                                            In the context of programming, Code Katas are small sets of problems that\n                                            you solve by following these steps:\n                                        <\/p>\n                                        <ul>\n                                            <li>(a) write a test,<\/li>\n                                            <li>(b) watch the test fail, and finally,<\/li>\n                                            <li>(c) write just enough code to pass the test \u2014 a process also known as\n                                                Red, Green, Refactor.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            If you\u2019re looking for some Code Kata problems to sink your teeth in, you can\n                                            find them here:\n                                        <\/p>\n\n                                        <a href=\"https:\/\/sammancoaching.org\/\" target=\"_blank\">https:\/\/sammancoaching.org\/<\/a>\n                                        <br\/><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/ZW4AEKbHE28?si=QV9tBqG28ZTE32MX\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>","page":"code-kata","description":"Improve programming skills with Code Katas: practice Test Driven Development and refine coding.","keywords":"code katas, test driven development, tdd, improve programming, red green refactor, coding skills, programming practice, test-driven approach, code kata exercises, software development, programming tips, coding technique","year":2025},"insertion-sort":{"url":"https:\/\/tkouleris.eu\/blog\/insertion-sort","category":"sorting algorithms","title":"Sorting Algorithms #2: Insertion Sort","image":"https:\/\/tkouleris.eu\/img\/blog\/insertion-sort\/insertion-sort.jpg","date":"09 Mar. 2025","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align: justify\">\n                                            Insertion Sort is a simple, comparison-based sorting algorithm that builds\n                                            the final sorted array one element at a time.\n                                            It works by taking each element from the unsorted portion and inserting it\n                                            into its correct position in the sorted\n                                            portion by shifting larger elements to the right. This algorithm is\n                                            efficient for small or nearly sorted datasets\n                                            but has a time complexity of O(n\u00b2) in the worst case. It is stable,\n                                            in-place, and widely used in practical\n                                            scenarios where minimal data movement is required.\n                                        <\/p>\n                                        <p style=\"text-align: justify\">\n                                            For example, consider the array [10, 4, 5, 8, 0]. In each iteration we get a\n                                            part of the complete array. We start from\n                                            the array of 1 element, this is [10]. The array is sorted, because it is\n                                            only one element. Next step we get the array\n                                            [10, 4]. We get the last element of the array, that is number 4, and we try\n                                            to sorted by checking with the rest of the\n                                            array elements. In this case we compare 4 with 10, 4 is smaller than 10, so\n                                            we \"insert\" 4 in the front of 10 and we get\n                                            the array [4, 10]. Next step we have the array[4,10,5]. We get the last\n                                            element of the array, that is number 5 and we\n                                            compare it with the rest of the elements. So, 4 is smaller than 5, 5 is\n                                            smaller than 10. So we \"insert\" 5 between 4 and 10\n                                            and we get the array [4, 5, 10]. We continue the same algorithm until the\n                                            end of the array.\n                                        <\/p>\n                                        <br\/>\n                                        <pre><code>\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n            arr[j + 1] = key\n\n    # Example usage\n    arr = [10, 4, 5, 8, 0]\n    insertion_sort(arr)\n    print(\"Sorted array:\", arr)\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3>Algorithm Complexity<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            Insertion sort time complexity, as bubble sort, is O(n\u00b2) and it is a very\n                                            similar algorithm and\n                                            not very efficient.\n                                        <\/p>","page":"insertion-sort","description":"Sorting algorithms are a set of algorithms that help us arrange data in ascending or descending order. They are fundamental to computer science, and the differences between them mainly lie in their time complexity and space complexity, which determine their suitability for handling larger datasets.","keywords":"sorting algorithms, insertion sort","year":2025},"three-sites-that-will-make-you-a-better-developer":{"url":"https:\/\/tkouleris.eu\/blog\/three-sites-that-will-make-you-a-better-developer","category":"misc","title":"Three sites that will make you a better developer","image":"https:\/\/tkouleris.eu\/img\/blog\/three-sites-that-will-make-you-a-better-developer\/three-sites-that-will-make-you-a-better-developer.jpg","date":"02 Mar. 2025","content":"                                        <h3>Hacksplaining<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            If you need to expand your knowledge and write more secure code\n                                            you need to understand what hackers do and how they exploit vulnarbilities\n                                            that you missed.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            Hacksplaining is a completely free, comprehensive security training for\n                                            web developers. Covers every major security vulnerability you are likely\n                                            to face. Concrete, no-nonsense advice for the developer in a hurry.\n                                        <\/p>\n\n                                        <a href=\"https:\/\/www.hacksplaining.com\/lessons\" target=\"_blank\">https:\/\/www.hacksplaining.com\/lessons<\/a>\n                                        <br\/><br\/>\n                                        <h3>Learn Git Branching<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            Every modern developer must know how to use Git. Git is a distributed\n                                            version control system that tracks versions of files. But how you can\n                                            learn all the commits and branches and forks? What are those and\n                                            what command will trigger them?\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            \"Learn Git Branching\" is the most visual and interactive way to\n                                            learn Git on the web; you'll be challenged with exciting levels,\n                                            given step-by-step demonstrations of powerful features, and maybe\n                                            even have a bit of fun along the way.\n                                        <\/p>\n\n                                        <a href=\"https:\/\/learngitbranching.js.org\/\" target=\"_blank\">https:\/\/learngitbranching.js.org\/<\/a>\n                                        <br\/><br\/>\n\n                                        <h3>SQL Noir<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            Every developer must know how to do an SQL query. Maybe a web developer\n                                            is not a Data Scientist but but must know how to retrieve the data that\n                                            want to show to the users.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            In SQL Noir, you are data detective solving criminal cases through the\n                                            power of SQL. Each case file presents you with a unique crime scenario\n                                            and a database full of evidence.\n                                        <\/p>\n\n                                        <a href=\"https:\/\/www.sqlnoir.com\/\" target=\"_blank\">https:\/\/www.sqlnoir.com\/<\/a>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify;font-weight: bold;\">\n                                            Have Fun!!!\n                                        <\/p>","page":"three-sites-that-will-make-you-a-better-developer","description":"As a developer you must always expand your knowledge. Learn about security, git and sql by visiting these three sites.","keywords":"web security, git, sql, learn","year":2025},"how-ssh-works":{"url":"https:\/\/tkouleris.eu\/blog\/how-ssh-works","category":"misc","title":"How SSH (Secure Shell) Works","image":"https:\/\/tkouleris.eu\/img\/blog\/how-ssh-works\/how-ssh-works.jpg","date":"23 Feb. 2025","content":"                                        <h3>Why SSH (Secure Shell) Exists<\/h3>\n\n                                        <p style=\"text-align: justify\">\n                                            The most well-known application for remote management of a computer since\n                                            the 1960's was Telnet.\n                                            In fact, its popularity was such that even in the early 2000, there were\n                                            network devices using Telnet\n                                            for remote management.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            The problem, however, was that Telnet had no encryption, meaning that anyone\n                                            with a packet\n                                            sniffer could intercept passwords or any information exchanged between two\n                                            points.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            SSH solved this exact problem. <a href=\"https:\/\/ylonen.org\/index.html\"\n                                                                              target=\"_blank\">Tatu Ylonen<\/a>, another\n                                            Finnish figure in computer history, gave us the first version in 1995. He\n                                            chose port 22 because it was between port 23 for Telnet and port 21 for FTP.\n                                            SSH was using cryptography to secure the data\n                                            transmission.\n                                        <\/p><br\/>\n\n                                        <h3>How SSH Works<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            The communication begins with the typical SYN, SYN\/ACK, ACK handshake. Then\n                                            they exchange the version\n                                            that are going to use and the cryptographic algorithm.\n                                            Immediately after, the public keys are generated and exchanged, since SSH\n                                            uses asymmetric encryption. The pair of\n                                            public-private keys that are going to use are ephemeral. Once both sides\n                                            agree, the first packet is sent.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            This usually happens over TCP, though it is not necessarily limited to TCP.\n                                            To achieve this,\n                                            the data being sent needs to be broken into smaller packets. Each of these\n                                            packets contains\n                                            the information the other end of the communication needs to reassemble the\n                                            original data.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            Each packet, therefore, has a header with the packet's size. Then, a section\n                                            is dedicated\n                                            to indicating the size of the packet\u2019s padding. After that, the payload is\n                                            included, which\n                                            is the data the computer needs to receive. Finally, there\u2019s the padding,\n                                            whose size is revealed\n                                            in the second section of the packet, along with some bytes for\n                                            authentication.\n                                        <\/p>\n\n                                        <div style=\"margin-top: 15px;margin-bottom: 15px;\">\n                                            <img alt=\"ssh-packet\"\n                                                 src=\"https:\/\/tkouleris.eu\/img\/blog\/how-ssh-works\/ssh-packet.jpg\"\n                                                 style=\"width: 100%;\">\n                                        <\/div>\n\n                                        <p style=\"text-align: justify\">\n                                            The encryption takes place in 4 of these sections of each packet: the\n                                            header, the section revealing the\n                                            padding size, the payload, and the padding itself.\n                                        <\/p>\n                                        <p style=\"text-align: justify\">\n                                            Each packet is sent from one side of the connection to the other using one\n                                            or more channels.\n                                            When the other side receives the packets, it decrypts them and combines the\n                                            payloads of each\n                                            packet to obtain the final data.\n                                        <\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            In SSH, there can be more than one channel. Each channel serves a different\n                                            purpose, for example,\n                                            one for the session, another for authentication, etc.\n                                        <\/p><br\/>\n                                        <h3>How Asymmetric Encryption Works<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            In asymmetric encryption, we have two keys: the public key and the private\n                                            key. The private key is\n                                            the one we never share with anyone. The public key is the one we give to\n                                            anyone who wants to communicate\n                                            with us.\n                                        <\/p>\n                                        <p style=\"text-align: justify\">\n                                            In this way, asymmetric encryption ensures that someone can send us any\n                                            message, and only we can read it.\n                                        <\/p><br\/>\n\n                                        <h3>Conclusion<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            SSH was truly a revolution in the way we remotely manage computers. Unlike\n                                            Telnet, which had serious\n                                            security issues, SSH offers a secure communication method, protecting data\n                                            from any kind of interception.\n                                            With the use of encryption and asymmetric encryption, it became the standard\n                                            for secure connections and\n                                            network communications. Today, in addition to system management, it is used\n                                            to ensure data protection in\n                                            many other services, making it an essential tool for securing modern\n                                            networks.\n                                        <\/p>","page":"how-ssh-works","description":"The Secure Shell (SSH) protocol sets up encrypted connections for remote logins and file transfers between computers. SSH also enables tunneling. Learn how SSH works.","keywords":"ssh packet structure, ssh encryption, secure shell, ssh security, ssh protocol, ssh communication, cybersecurity, network security, ssh authentication, ssh payload, ssh header, secure remote access","year":2025},"operation-takedown":{"url":"https:\/\/tkouleris.eu\/blog\/operation-takedown","category":"computer science movies","title":"Computer Science Movies #2: Operation Takedown","image":"https:\/\/tkouleris.eu\/img\/blog\/operation-takedown\/operation-takedown.jpg","date":"16 Feb. 2025","content":"<iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/NbgDMYy9mzM?si=eW-BYeenEMgOYaFF\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <p style=\"text-align: justify;\">\n                                            \"Operation Takedown\" (also known as Takedown) is a 2000 cybercrime thriller\n                                            based on the book Takedown\n                                            by John Markoff and Tsutomu Shimomura. The film dramatizes the real-life\n                                            capture of Kevin Mitnick,\n                                            a notorious hacker.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            <a href=\"https:\/\/en.wikipedia.org\/wiki\/Kevin_Mitnick\" target=\"_blank\">Kevin\n                                                Mitnick<\/a> (played by Skeet Ulrich) is a highly skilled hacker and\n                                            fugitive on the run from the FBI.\n                                            Using his expertise in social engineering and hacking, he infiltrates secure\n                                            computer systems, steals data,\n                                            and evades authorities. However, his actions catch the attention of\n                                            cybersecurity expert <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/Tsutomu_Shimomura\" target=\"_blank\">Tsutomu\n                                            Shimomura<\/a>\n                                            (played by Russell Wong), whose own system is hacked by Mitnick.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Determined to stop him, Shimomura teams up with the FBI to track Mitnick\n                                            down. The film follows their intense\n                                            cat-and-mouse game, showcasing Mitnick\u2019s hacking prowess, law enforcement\u2019s\n                                            efforts to apprehend him, and the\n                                            ethical dilemmas of cybersecurity. Eventually, Mitnick is captured in 1995,\n                                            marking the downfall of one of\n                                            the most infamous hackers of his time.\n                                        <\/p><br\/>\n\n                                        <h3>Criticism<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            The film depicts Mitnick as a dangerous criminal and almost a\n                                            cyberterrorist, which many\u2014including\n                                            Mitnick himself\u2014argue is highly exaggerated. In reality, while he was a\n                                            skilled hacker, he never engaged\n                                            in activities like financial fraud, selling stolen data, or causing damage\n                                            to systems, as the film implies.\n                                            Many critics believe the movie unfairly vilifies him.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            The movie is based on the book Takedown by John Markoff and Tsutomu\n                                            Shimomura, two people directly involved\n                                            in Mitnick\u2019s case. Markoff, a journalist, was accused of having a personal\n                                            vendetta against Mitnick, and\n                                            Shimomura was the hacker who helped track him down. This made the film\n                                            one-sided, favoring law enforcement\n                                            and portraying Mitnick in a negative light while glorifying Shimomura.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Like many Hollywood films, Operation Takedown takes significant creative\n                                            liberties. Some scenes in the movie,\n                                            including the high-stakes chases and some of Mitnick\u2019s hacking techniques,\n                                            were fictionalized or exaggerated\n                                            to make the story more dramatic. Many cybersecurity experts and hackers\n                                            pointed out that the film misrepresented\n                                            hacking methods, making them seem more like movie magic than actual\n                                            cybersecurity exploits.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Mitnick was not consulted for the film and was never given a chance to\n                                            present his side of the story. He even\n                                            attempted to sue to stop the movie\u2019s release, arguing that it was defamatory\n                                            and misrepresented key facts about\n                                            his case.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            The movie raises concerns about how hackers are treated by the justice\n                                            system. Mitnick served five years in prison,\n                                            including eight months in solitary confinement, which many felt was an\n                                            excessive punishment for crimes that did not\n                                            involve financial theft or system destruction. The film fails to explore the\n                                            debate about hacking ethics, instead\n                                            painting a black-and-white picture of good vs. evil.\n                                        <\/p><br\/>\n                                        <h3>My story with the film<\/h3><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Back when I was a CS student, the movie was kind of a legend since we\n                                            couldn't find it in any video store to buy it\n                                            or rent it. We didn't have an abundance of media to learn the truth about\n                                            Mitnick or even to watch the movie. Yet,\n                                            a friend of mine managed to find it\u2014without Greek subtitles\u2014probably by\n                                            downloading it illegally. I remember he\n                                            gave me the disc at 3:00 in the morning, and I watched it for the first\n                                            time. It was the first English-speaking\n                                            movie I ever watched without subtitles.\n                                        <\/p><br\/>\n\n                                        <h3>Details:<\/h3>\n                                        <a href=\"https:\/\/www.imdb.com\/title\/tt0159784\/\" target=\"_blank\">Operation\n                                            Takedown (2000)<\/a><br\/>\n                                        <b>Director:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0152640\/\" target=\"_blank\">Joe\n                                        Chappelle<\/a><br\/>\n                                        <b>Writers:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0793737\" target=\"_blank\">Tsutomu\n                                        Shimomura<\/a>, <a href=\"https:\/\/www.imdb.com\/name\/nm0548586\" target=\"_blank\">John\n                                        Markoff<\/a>, <a href=\"https:\/\/www.imdb.com\/name\/nm0628058\" target=\"_blank\">David\n                                        Newman<\/a><br\/>\n                                        <b>Music:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0391779\/\" target=\"_blank\">Chris\n                                        Holmes<\/a>, <a href=\"https:\/\/www.imdb.com\/name\/nm2100523\/?ref_=ttfc_fc_cr\"\n                                                       target=\"_blank\">James Kole<\/a><br\/>\n                                        <b>Starring:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0000240\/\" target=\"_blank\">Skeet\n                                        Ulrich<\/a> (Kevin Mitnick), <a href=\"https:\/\/www.imdb.com\/name\/nm0005568\/\"\n                                                                       target=\"_blank\">Russell Wong<\/a> (Tsutomu\n                                        Shimomura), <a href=\"https:\/\/www.imdb.com\/name\/nm0004911\/\" target=\"_blank\">Angela\n                                        Featherstone<\/a> (Julia)<br\/>","page":"operation-takedown","description":"Discover Operation Takedown (2000), a cybercrime thriller based on the real-life capture of hacker Kevin Mitnick. Starring Skeet Ulrich and Russell Wong, the film follows Mitnick\u2019s high-stakes battle against cybersecurity expert Tsutomu Shimomura and the FBI. While the movie dramatizes Mitnick\u2019s exploits, critics argue it unfairly vilifies him. Explore the film\u2019s accuracy, controversies, and its impact on hacker culture. Directed by Joe Chappelle, Takedown remains a must-watch for cybersecurity enthusiasts and tech history buffs. Read more about its plot, criticism, and my personal experience watching this elusive movie.","keywords":"operation takedown, takedown movie, kevin mitnick, kevin mitnick movie, cybercrime thriller, hacking movie, cybersecurity film, skeet ulrich, russell wong, tsutomu shimomura, fbi hacker chase, hacker movies, real-life hacking, cybercrime drama, operation takedown 2000, takedown 2000, kevin mitnick capture, hacking history, cybersecurity ethics, hacking controversy, hacker vs fbi, hollywood hacking movies, tech thriller film, cyber security movies, hacking culture, kevin mitnick story","year":2025},"raw-thoughts-on-ai":{"url":"https:\/\/tkouleris.eu\/blog\/raw-thoughts-on-ai","category":"opinion","title":"Raw thoughts on AI","image":"https:\/\/tkouleris.eu\/img\/blog\/raw-thoughts-on-ai\/raw-thoughts-on-ai.jpg","date":"09 Feb. 2025","content":"                                        <p style=\"text-align:justify\">It is a fact that artificial intelligence is the\n                                            future of humanity. The real question is how humans will approach it to\n                                            fulfill the fundamental goal of their evolution. Will it be just another\n                                            tool that enhances human creativity, or will humans become slaves to\n                                            artificial intelligence? The capitalist system, in the way we have seen it\n                                            evolve in our lives, suggests the latter. But what will happen with\n                                            intellectual property?<\/p>\n\n                                        <p style=\"text-align:justify\">For AI to function, it requires data from real\n                                            people to learn, just as a child observes the people around them and learns\n                                            from them. AI cannot generate anything new that has not first been said or\n                                            invented by humans. So, the question is: to whom does AI-generated content\n                                            belong?<\/p>\n\n                                        <p style=\"text-align:justify\">One could quickly and thoughtlessly say that it\n                                            belongs to the company that developed the model. And to some extent, that\n                                            might be true. However, as we said, no model has value without the data it\n                                            was fed to develop. If a script-generation model has been trained using the\n                                            scripts of the best Hollywood screenwriters, does the final product perhaps\n                                            belong to them? The same applies to programming\u2014if an AI model has been\n                                            trained on code from GitHub, does the code it produces ultimately belong to\n                                            the programmers who wrote the original material?<\/p>\n\n                                        <p style=\"text-align:justify\">I believe that the greatest challenge engineers\n                                            had to solve was how to feed AI with data. This issue was resolved with\n                                            Microsoft's acquisition of GitHub and the rise of social media in our lives.\n                                            Data has now become a commodity\u2014one that will generate another commodity\n                                            (AI) for the wealth of large corporations.<\/p>\n\n                                        <p style=\"text-align:justify\">Before AI becomes deeply integrated into the\n                                            professional lives of those whose work requires creative thinking, the issue\n                                            of intellectual property rights must first be resolved. I might be wrong\n                                            (probably), but what happens if, in the future, two scripts or pieces of\n                                            code produced by rival AI companies (e.g., OpenAI and DeepSeek) are 99%\n                                            identical? Who will own the rights? Surely, legal teams will use all their\n                                            creativity to win such a legal battle. Or rather (since we are talking about\n                                            the future), the AI-powered legal department will work based on all previous\n                                            similar cases. The problem is that until the first case emerges, AI models\n                                            will operate in legal uncertainty.<\/p>\n\n                                        <p style=\"text-align:justify\">And I believe this will be the greatest obstacle\n                                            for artificial intelligence\u2014it will not be able to produce truly original\n                                            work. Then again, I might be wrong, which is allowed by my human nature\u2014just\n                                            as it is for every professional in their field. But how much will we trust\n                                            AI in the future? Will we accept its answers as absolute truth, or will\n                                            there be room for doubt? Today, anyone can challenge the work of any\n                                            scientist or professional: \"The calculation is wrong,\" \"You didn\u2019t use the\n                                            right methodology,\" and so on\u2014phrases we often hear in debates among\n                                            professionals or scientists.<\/p>\n\n                                        <p style=\"text-align:justify\">In any case, no matter how much corporations and\n                                            the media try to ascribe authority to artificial intelligence or even\n                                            replace human creativity with it, we must approach AI with caution\u2014not like\n                                            a five-year-old child who just discovered the taste of sugar. To me,\n                                            artificial intelligence is a tool that can extend the capabilities of the\n                                            human species. It is not infallible, nor can it solve every problem\n                                            creatively, especially when it relies on existing human creations to\n                                            evolve.<\/p>","page":"raw-thoughts-on-ai","description":"Exploring the impact of artificial intelligence on creativity, intellectual property, and ethics. Discover AI\u2019s role in data, law, and innovation while questioning its limitations and future potential.","keywords":"artificial intelligence, ai future, human creativity, ai and capitalism, intellectual property, ai-generated content, ai ownership, data privacy, ai training data, github and ai, microsoft ai, social media data, ai legal issues, copyright and ai, ai in programming, ai-generated code, ai in hollywood, ai originality, trust in ai, ai ethical concerns, ai and creativity, machine learning, deep learning, ai-generated scripts, ai and law, ai regulation, ai industry, ai debate, ai innovation, ai limitations, ai and human evolution","year":2025},"richard-stallman":{"url":"https:\/\/tkouleris.eu\/blog\/richard-stallman","category":"tech heroes","title":"Tech Heroes #8: Richard Stallman","image":"https:\/\/tkouleris.eu\/img\/blog\/richard-stallman\/richard-stallman.jpg","date":"02 Feb. 2025","content":"                                        <p style=\"text-align:justify;\">When, as a student, I started to research the\n                                            Hacker culture I found two main figures that stand as beacon of\n                                            enlightenment. One of them was Richard Stallman. This man not only is a\n                                            well-known hacker but he also created the movement of Free Software.\n                                            Stallman had great influence on me, not only as a hacker but also as a\n                                            political thinker. I think it's time to learn more about Stallman.<\/p>\n                                        <br\/><br\/>\n\n                                        <h3>Who is Richard Stallman<\/h3><br\/>\n\n                                        <p style=\"text-align:justify;\">Richard Stallman (RMS) is a programmer, activist,\n                                            and founder of the Free Software Movement. In 1983, he launched the GNU\n                                            Project to create a free Unix-like operating system and later authored the\n                                            GNU General Public License (GPL) to protect software freedoms. Stallman\n                                            founded the Free Software Foundation (FSF) in 1985, advocating for user\n                                            rights to use, modify, and share software. Known for creating tools like GNU\n                                            Emacs and GCC, he remains a pivotal figure in software ethics, though his\n                                            outspoken views have sparked both admiration and controversy.<\/p>\n\n                                        <p style=\"text-align:justify;\">He was born on March 16, 1953, in New York City\n                                            to a family of Jewish heritage. He had a difficult relationship with his\n                                            parents and felt he lacked a proper home. Fascinated by computers from an\n                                            early age, he read manuals for the IBM 7094 during a summer camp as a\n                                            pre-teen. Between 1967 and 1969, Stallman attended a Saturday program for\n                                            high school students at Columbia University and volunteered as a laboratory\n                                            assistant in the biology department at Rockefeller University. Although he\n                                            had a keen interest in mathematics and physics, his supervising professor at\n                                            Rockefeller saw potential in him as a biologist.<\/p>\n\n                                        <p style=\"text-align:justify;\">Stallman\u2019s first hands-on experience with\n                                            computers came during high school at the IBM New York Scientific Center. In\n                                            the summer of 1970, after graduating high school, he was hired to write a\n                                            numerical analysis program in Fortran. He completed the task in just a few\n                                            weeks, vowing never to use Fortran again due to his dislike of the language.\n                                            He spent the rest of the summer creating a text editor in APL and developing\n                                            a preprocessor for the PL\/I programming language on the IBM System\/360.<\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/Hf2pfzzWPYE?si=TzTv_VHQiPjlaJMs\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n\n                                        <br\/><br\/>\n                                        <h3>The GNU Project<\/h3><br\/>\n\n                                        <p style=\"text-align:justify;\">Stallman initiated in 1983 the GNU Project in\n                                            response to the growing prevalence of proprietary software, which restricted\n                                            users from freely using, modifying, and sharing programs. Stallman, who\n                                            worked at MIT\u2019s Artificial Intelligence Lab, was accustomed to a\n                                            collaborative programming culture where source code was openly shared.\n                                            However, this culture began to erode in the late 1970s and early 1980s as\n                                            companies adopted restrictive software licenses. A key incident occurred\n                                            when Stallman was unable to access the source code of a printer driver he\n                                            wanted to improve, which highlighted the ethical problems of proprietary\n                                            software and motivated him to take action.<\/p>\n\n                                        <p style=\"text-align:justify;\">The GNU Project's goal was to develop a\n                                            completely free and open Unix-like operating system. \"GNU\" stands for \"GNU's\n                                            Not Unix,\" reflecting its compatibility with Unix systems while being\n                                            entirely free software. Stallman envisioned an operating system where users\n                                            would have the freedom to run, study, modify, and share all its components.\n                                            He also created the GNU General Public License (GPL) to legally guarantee\n                                            these freedoms and ensure that any derivative works would remain free.<\/p>\n\n                                        <p style=\"text-align:justify;\">To achieve its vision, the GNU Project developed\n                                            free replacements for key Unix tools. These included GNU Emacs (a powerful\n                                            text editor), GCC (a versatile compiler), and GDB (a debugging tool), among\n                                            others. While most components were completed, the GNU Hurd kernel faced\n                                            delays. In the 1990s, the GNU system was combined with the Linux kernel,\n                                            forming what is commonly known as GNU\/Linux, used in distributions like\n                                            Debian and Ubuntu.<\/p>\n\n                                        <p style=\"text-align:justify;\">The GNU Project not only provided the foundation\n                                            for many modern computing systems but also spearheaded the Free Software\n                                            Movement, advocating for software as a shared, community resource rather\n                                            than a proprietary product. It remains a cornerstone of the free and\n                                            open-source software ecosystem.<\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/UK52v6bCPvg?si=MMCtA0nY5ZU29DG7\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <h3>The Free Software Movement<\/h3><br\/>\n\n                                        <p style=\"text-align:justify;\">When Stallman launched the GNU Project, it was\n                                            the practical foundation that sparked the Free Software Movement. Stallman\n                                            created the GNU Project to develop a completely free Unix-like operating\n                                            system, ensuring that users could run, study, modify, and share software\n                                            without restrictions. This initiative introduced the concept of software\n                                            freedom as an ethical principle and provided the tools, such as GNU Emacs\n                                            and GCC, to make it a reality. The creation of the GNU General Public\n                                            License (GPL) further solidified this connection, as it legally guaranteed\n                                            these freedoms and established a framework for protecting free software.<\/p>\n\n                                        <p style=\"text-align:justify;\">Through the GNU Project, Stallman not only\n                                            produced vital software components but also highlighted the ethical issues\n                                            surrounding proprietary software, raising awareness and galvanizing support\n                                            for the Free Software Movement. The success of GNU tools and the eventual\n                                            collaboration with the Linux kernel (resulting in GNU\/Linux) demonstrated\n                                            the viability of free software, inspiring developers and users worldwide to\n                                            adopt and advocate for these principles. The GNU Project thus turned the\n                                            philosophy of free software into a tangible, impactful movement.<\/p>\n                                        <br\/><br\/>\n                                        <h3>Controversy<\/h3><br\/>\n\n                                        <p style=\"text-align:justify;\">In 2019, Richard Stallman became embroiled in\n                                            controversy over comments he made regarding the late Jeffrey Epstein and his\n                                            associate Marvin Minsky, a prominent AI researcher. During an email\n                                            discussion at MIT about Epstein\u2019s involvement in sex trafficking and\n                                            allegations that Minsky had been involved with an underage victim, Stallman\n                                            argued over the semantics of the situation. He claimed that the term \u201csexual\n                                            assault\u201d was misleading if Minsky\u2019s actions were consensual and suggested\n                                            that Minsky might not have known the victim\u2019s age. Many found his remarks\n                                            dismissive of the victim's experience, as they appeared to focus on\n                                            technical language rather than the broader ethical and moral implications of\n                                            the situation.<\/p>\n\n                                        <p style=\"text-align:justify;\">Stallman\u2019s comments sparked widespread backlash,\n                                            both within and beyond the MIT community. Critics accused him of being\n                                            insensitive to issues of sexual exploitation and human trafficking, with\n                                            some arguing that his responses minimized the harm done to victims. The\n                                            uproar led Stallman to resign from his positions at MIT and the Free\n                                            Software Foundation (FSF) in September 2019. His comments and subsequent\n                                            resignation intensified debates about the responsibilities of public figures\n                                            in addressing sensitive topics and their impact on the communities they\n                                            represent.<\/p>\n                                        <br\/><br\/>\n                                        <h3>Personal Life<\/h3><br\/>\n\n                                        <p style=\"text-align:justify;\">Richard Stallman has lived a highly\n                                            unconventional personal life, often reflecting the principles of simplicity\n                                            and independence that align with his advocacy for free software. Stallman is\n                                            known for his eccentric habits, such as living without a permanent address\n                                            for extended periods and carrying minimal personal belongings, often relying\n                                            on host accommodations during his travels. He publicly stated his distaste for certain modern conveniences and proprietary\n                                            technologies, avoiding them whenever possible. Stallman remains unmarried\n                                            and has described himself as someone who values his autonomy and\n                                            intellectual pursuits above traditional social conventions.<\/p>\n\n                                        <p style=\"text-align:justify;\">In 2019, Richard Stallman revealed that he had\n                                            been diagnosed with non-Hodgkin lymphoma, a type of cancer that affects the\n                                            lymphatic system. Despite the diagnosis, Stallman continued to work and\n                                            advocate for free software while undergoing treatment. He expressed optimism\n                                            about his prognosis, stating that the condition was treatable and that he\n                                            planned to continue his work once he recovered. Stallman\u2019s health challenges\n                                            brought attention to his resilience and dedication to his principles, as he\n                                            remained active in the Free Software Movement even during his battle with\n                                            cancer.<\/p>\n\n                                        <a href=\"https:\/\/stallman.org\/\" target=\"_blank\">Stallman's Web Site<\/a>\n                                        <br\/><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/xSkCny-HtTw?si=tyC3uyYVdydmxMkc\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>","page":"richard-stallman","description":"Discover the life and contributions of Richard Stallman, the founder of the Free Software Movement and the GNU Project. Learn about his influence on open-source software, ethical programming, and software freedom. Explore Stallman\u2019s early life, groundbreaking projects like GNU Emacs and GCC, his advocacy for digital rights, and the controversies surrounding his career. A comprehensive guide to Stallman's impact on the tech world and the philosophy of free software.","keywords":"richard stallman, free software movement, gnu project, open-source software, software freedom, digital rights, tech ethics, gnu emacs, gcc compiler, free software foundation, linux kernel, gnu license, programming activism, open-source advocacy, software development","year":2025},"computer-addiction-80s":{"url":"https:\/\/tkouleris.eu\/blog\/computer-addiction-80s","category":"misc","title":"Addiction to Computers...in 1980","image":"https:\/\/tkouleris.eu\/img\/blog\/computer-addiction-80s\/computer-addiction-80s.jpg","date":"25 Jan. 2025","content":" <p style=\"text-align:justify;\">Today, we talk about our addiction to computers.\nTo some extent, catastrophizing is understandable since computers are\neverywhere\u2014from our pockets to office facilities. However, it\u2019s not a new\nphenomenon to demonize technology.<\/p>\n\n<p style=\"text-align:justify;\">Forty years ago, the BBC covered a similar topic:\naddiction to computers. But what was different about computer addiction in\n1980 compared to 2020? What made people in 1980 eagerly use their computers,\ncompared to people in 2020, who can easily pull a computer out of their\npocket? Everything I write below is merely an opinion\u2014a perspective without\nstatistical data or studies\u2014and should be treated as such.<\/p>\n\n<p style=\"text-align:justify;\">Today\u2019s addiction is communicative in nature.\nComputers now, unlike in 1980, are all interconnected, and by extension, so\nare we. We want to share our experiences with the world, to communicate our\nemotions, the music we like, the movies we\u2019ve seen, the trips we\u2019ve taken.\nIn an oversimplified term: our lifestyle. It\u2019s the addiction to likes and\nshares. Some may view this negatively, but it\u2019s not far removed from basic\nhuman characteristics.<\/p>\n\n<p style=\"text-align:justify;\">The addiction of 1980, as shown by the BBC, was\nquite different. It was an addiction to the essence of technology,\ncreativity, learning, and solving a problem simply for the sake of solving\nit. It was an addiction akin to that of reading a book and wanting to\ndiscover the next part of the story. An addiction centered on making daily\nlife easier.<\/p>\n\n<p style=\"text-align:justify;\">The evolution of technology over the past 40\nyears, the way we use it, and what we perceive as addiction has changed\u2014and\nunderstandably so. It will be fascinating to see how both technology and the\nways people choose to use it evolve in the next 40 years.\n<\/p>\n<br\/>\n<iframe width=\"560\" height=\"315\"\n    src=\"https:\/\/www.youtube.com\/embed\/jbu0kmCeLSI?si=UwOPBL6oqBVQinHs\"\n    title=\"YouTube video player\" frameborder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    referrerpolicy=\"strict-origin-when-cross-origin\"\n    allowfullscreen>\n<\/iframe>","page":"computer-addiction-80s","description":"This article explores the evolution of computer addiction from 1980 to 2020, highlighting the shift from a focus on creativity, learning, and problem-solving to today\u2019s addiction driven by social media, communication, and lifestyle sharing. It examines how technology's role in daily life has changed and speculates on future trends in technology use and human behavior.","keywords":"computer addiction 1980, evolution of technology, technology and lifestyle, impact of social media, addiction to likes and shares, history of computer usage, computers in daily life, 1980s technology trends, social media addiction, creative use of technology, technology vs communication, interconnected devices, bbc computer addiction 1980, future of technology and addiction, human connection through technology","year":2025},"webcheck":{"url":"https:\/\/tkouleris.eu\/blog\/webcheck","category":"utilities","title":"WebCheck: Discover What Hackers Know About Your Site","image":"https:\/\/tkouleris.eu\/img\/blog\/webcheck\/webcheck.jpg","date":"19 Jan. 2025","content":"                                        <p style=\"text-align:justify\">There are times when you'd like to know what all\n                                            those hackers know about your site that you might be unaware of. So, you\n                                            fire up 5-6 tools on your computer, open browser tabs with helpful sites,\n                                            and start getting lost in applications and data that you're trying to\n                                            organize somehow.<\/p>\n\n                                        <p style=\"text-align:justify\">But fear not! Developers from around the world\n                                            have found the solution. <b>WebCheck<\/b>, the app that will help you discover what\n                                            hackers know about your site \u2014 or rather, what you've allowed them to know \u2014\n                                            all gathered in one place.<\/p>\n\n                                        <p style=\"text-align:justify\">All you need to do is enter your website's URL,\n                                            and within seconds, you'll know about your DNS, who has blocked you,\n                                            information about your SSL certificate, and many other things you might\n                                            never have thought to check\u2014like your website's CO2 emissions!<\/p>\n\n                                        <p style=\"text-align:justify\">Live version: <a href=\"https:\/\/web-check.xyz\/\">https:\/\/web-check.xyz\/<\/a>\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">Source code: <a\n                                            href=\"https:\/\/github.com\/Lissy93\/web-check\">https:\/\/github.com\/Lissy93\/web-check<\/a>\n                                        <\/p>","page":"webcheck","description":"There are times when you'd like to know what all those hackers know about your site that you might be unaware of. So, you fire up 5-6 tools on your computer, open browser tabs with helpful sites, and start getting lost in applications and data that you're trying to organize somehow.","keywords":"webcheck, security, tool, tools","year":2025},"the-ball-mouse":{"url":"https:\/\/tkouleris.eu\/blog\/the-ball-mouse","category":"forgotten technology","title":"Forgotten Technologies #5: The Ball Mouse","image":"https:\/\/tkouleris.eu\/img\/blog\/the_mouse_ball\/the_ball_mouse.png","date":"12 Jan. 2025","content":"<h3>The First Mouse<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            The first computer mouse was invented in 1964 by Douglas Engelbart, a\n                                            researcher at the Stanford Research Institute in the United States. The\n                                            prototype was made of wood and featured two metal wheels to detect movement\n                                            along the X and Y axes. Engelbart and his team were even awarded a patent\n                                            for the mouse in 1970.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            This device was first showcased in 1968 during the renowned <a\n                                            href=\"https:\/\/en.wikipedia.org\/wiki\/The_Mother_of_All_Demos\"\n                                            target=\"_blank\">\"The Mother of All Demos\"<\/a>, a historic technology\n                                            demonstration where Engelbart introduced not only the mouse but also other\n                                            innovations considered precursors to modern computers, such as graphical\n                                            user interfaces.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            The name \"mouse\" came from the shape of the device and its cable, which\n                                            resembled a tail. In the following decades, mouse technology advanced\n                                            significantly, starting with the introduction of a ball for movement\n                                            tracking and later evolving into optical and laser sensors.\n                                        <\/p>\n                                        <br\/>\n                                        <img alt=\"wooden mouse\"\n                                             style=\"height: 250px;display: block;margin-left: auto;margin-right: auto;width: 50%;\"\n                                             src=\"https:\/\/tkouleris.eu\/img\/blog\/the_mouse_ball\/wooden_mouse.jpg\"\/>\n                                        <br\/>\n                                        <h3>The Ball Mouse<\/h3>\n                                        <p style=\"text-align:justify\">The first ball mouse was developed in 1972 by Bill\n                                            English, a colleague of Douglas Engelbart. Unlike Engelbart's original\n                                            mouse, which relied on two wheels, the ball mouse used a rolling ball to\n                                            detect movement, making it more versatile and easier to use.<\/p>\n                                        <br\/>\n                                        <h3>How the Ball Mouse Worked<\/h3>\n                                        <p style=\"text-align:justify\">The ball inside the mouse was typically made of\n                                            rubber and could rotate in any direction. As the user moved the mouse across\n                                            a surface, the ball rolled and rotated. This rotation was transmitted to two\n                                            rollers that tracked movement along the horizontal (X) and vertical (Y)\n                                            axes. The rollers converted the ball's mechanical motion into electrical\n                                            signals, which were then translated into cursor movement on the computer\n                                            screen.<\/p>\n                                        <br\/>\n                                        <img alt=\"mouse sketch\"\n                                             style=\"height: 250px;display: block;margin-left: auto;margin-right: auto;width: 50%;\"\n                                             src=\"https:\/\/tkouleris.eu\/img\/blog\/the_mouse_ball\/mouse_sketch.png\"\/>\n                                        <br\/>\n                                        <p style=\"text-align:justify\">This ball mechanism made the mouse more practical,\n                                            as it could detect movement in any direction without restrictions. It was\n                                            also more durable and reliable than the earlier wheel-based mice, which\n                                            often encountered alignment and calibration issues. The ball mouse became\n                                            the dominant design for many years, until the advent of optical and laser\n                                            mice that no longer required physical contact with a surface.<\/p>\n                                        <br\/>\n                                        <img alt=\"mouse circuit\"\n                                             style=\"height: 250px;display: block;margin-left: auto;margin-right: auto;width: 50%;\"\n                                             src=\"https:\/\/tkouleris.eu\/img\/blog\/the_mouse_ball\/mouse_circuit.jpg\"\/>\n                                        <br\/>\n                                        <h3>Limitations of Ball Mice<\/h3>\n                                        <p style=\"text-align:justify\">Despite their success, ball mice had several\n                                            limitations that eventually led to their replacement by optical and laser\n                                            mice.<\/p>\n\n                                        <ol>\n                                            <li style=\"text-align:justify\">\n                                                <b>Need for Cleaning: <\/b>The ball would collect dust, dirt, and debris\n                                                as it rolled across surfaces. These particles would accumulate on the\n                                                rollers and internal components, causing the mouse to lose precision and\n                                                malfunction. Regular cleaning was necessary, which was inconvenient for\n                                                users.\n                                            <\/li>\n                                            <li style=\"text-align:justify\">\n                                                <b>Dependence on Specific Surfaces: <\/b>Ball mice worked well only on\n                                                smooth and clean surfaces, such as mouse pads. Surfaces that were too\n                                                slick, rough, or glossy could interfere with the ball\u2019s ability to roll\n                                                properly, limiting its effectiveness. Optical and laser mice overcame\n                                                this limitation by being compatible with a wider range of surfaces.\n                                            <\/li>\n                                            <li style=\"text-align:justify\">\n                                                <b>Limited Precision: <\/b>>While sufficient for early applications, the\n                                                precision of ball mice was inferior to that of modern optical and laser\n                                                mice. The mechanical nature of their design imposed limitations on the\n                                                level\n                                                of detail and responsiveness they could achieve, especially for tasks\n                                                requiring fine movements.\n                                            <\/li>\n                                            <li style=\"text-align:justify\">\n                                                <b>Wear and Tear of Mechanical Parts: <\/b>The mechanical components of\n                                                ball mice, including\n                                                the ball and rollers, experienced wear over time. This reduced their\n                                                performance and accuracy. The points of contact between the ball and\n                                                rollers\n                                                could degrade, causing the mouse to \u201cstick\u201d or function poorly.\n                                            <\/li>\n                                            <li style=\"text-align:justify\">\n                                                <b>Slower Response Times: <\/b>The mechanical nature of ball mice\n                                                introduced a\n                                                slight delay between movement and the corresponding cursor response.\n                                                While\n                                                not noticeable in early usage, this delay became more apparent as user\n                                                demands for speed and precision increased, especially in applications\n                                                like\n                                                gaming and graphic design.\n                                            <\/li>\n                                            <li style=\"text-align:justify\">\n                                                <b>Weight and Movement Resistance: <\/b>Ball mice were often heavier due\n                                                to their\n                                                construction, and the ball\u2019s motion could create minor resistance,\n                                                particularly during quick movements. In contrast, optical and laser mice\n                                                are\n                                                lighter and glide more smoothly, offering a better user experience.\n                                            <\/li>\n                                        <\/ol>\n                                        <br\/>\n                                        <h3>A Legacy in Computing History<\/h3>\n                                        <p style=\"text-align:justify\">Although ball mice were eventually replaced by\n                                            superior technologies like optical and laser mice, their impact on the\n                                            development of computing input devices is undeniable. Ball mice bridged the\n                                            gap between the mechanical limitations of early designs and the\n                                            high-performance standards of today, securing a place in the history of\n                                            computing innovation.<\/p>","page":"the-ball-mouse","description":"The first computer mouse was invented in 1964 by Douglas Engelbart, a researcher at the Stanford Research Institute in the United States. The prototype was made of wood and featured two metal wheels to detect movement along the X and Y axes. Engelbart and his team were even awarded a patent for the mouse in 1970.","keywords":"mouse, mice, computer mouse, ball mouse, analog mouse","year":2025},"jwt":{"url":"https:\/\/tkouleris.eu\/blog\/jwt","category":"programming","title":"What is JWT (JSON Web Token)?","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"05 Jan. 2025","content":"<h3>What is JWT (JSON Web Token)?<\/h3>\n                                        <p style=\"text-align: justify;\">The JWT (JSON Web Token) is a self-contained\n                                            means of securely transferring information between two parties. It is often\n                                            used to verify user identity in web applications.<\/p>\n                                        <br\/>\n                                        <h3>Key Features of JWT:<\/h3>\n                                        <p style=\"text-align: justify;\">1. <strong>Compact:<\/strong> JWT is a lightweight\n                                            text format that can be easily transferred via URL (GET), POST parameters,\n                                            or HTTP headers.<\/p>\n                                        <p style=\"text-align: justify;\">2. <strong>Self-Contained:<\/strong> It includes\n                                            all necessary information to verify a user's identity and the token's\n                                            validity without needing to retrieve additional data from a database.<\/p>\n                                        <p style=\"text-align: justify;\">3. <strong>Secure:<\/strong> It can be signed\n                                            using a secret key (with the HMAC algorithm) or a public\/private key pair\n                                            (with the RSA or ECDSA algorithm), ensuring that the content has not been\n                                            tampered with.<\/p>\n                                        <br\/>\n                                        <h3>JWT Structure:<\/h3>\n                                        <p style=\"text-align: justify;\">A JWT consists of three parts separated by\n                                            periods (<code>.<\/code>):<\/p>\n                                        <p style=\"text-align: justify;\">1. <strong>Header:<\/strong> The first part\n                                            contains information about the token type and the algorithm used for its\n                                            signature (e.g., HMAC SHA256 or RSA).<\/p>\n                                        <p style=\"text-align: justify;\">2. <strong>Payload:<\/strong> The second part\n                                            contains the data we want to transfer. This can include user-related\n                                            information (such as user ID, email) and token-related data (like expiration\n                                            date).<\/p>\n                                        <p style=\"text-align: justify;\">3. <strong>Signature:<\/strong> The third part\n                                            ensures the integrity of the token. It is computed by encrypting the header\n                                            and payload with a secret key or a private key.<\/p>\n\n                                        <h3>Example of a JWT:<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            <code>\n                                                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRrb3VsZXJpc0BnbWFpbC\n                                                5jb20iLCJleHBpcmF0aW9uIjoiMjAyNC0wMi0yMCAwNTo0Nzo1MS43Nzk5NzQifQ.lvibV2s\n                                                aR3X84gOeQA51bAFxdxqaxL4wOSP5UGvRQBY\n                                            <\/code>\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">The above is an example of a JWT token. You can\n                                            decode and inspect it using the following website:<\/p>\n                                        <p style=\"text-align: justify;\"><a href=\"https:\/\/jwt.io\/\" target=\"_blank\">https:\/\/jwt.io\/<\/a>\n                                        <\/p>\n                                        <br\/>\n                                        <h3>Decrypting the Token:<\/h3>\n                                        <p style=\"text-align: justify;\">To decrypt the token, you will need the secret\n                                            key:<\/p>\n                                        <p style=\"text-align: justify;\"><code>8c7fypDnFNcvsc8fUWPKh4lVWrhMfv<\/code><\/p>\n                                        <p style=\"text-align: justify;\">The secret key is usually stored in a\n                                            configuration file of your application. It is used to generate the JWT.<\/p>\n                                        <br\/>\n                                        <h3>Conclusion:<\/h3>\n                                        <p style=\"text-align: justify;\">JWT is a flexible and powerful technology for\n                                            secure web applications, especially in environments requiring scalability\n                                            and simplicity.<\/p>","page":"jwt","description":"The JWT (JSON Web Token) is a self-contained means of securely transferring information between two parties. It is often used to verify user identity in web applications.","keywords":"jwt, json web token, security","year":2025},"the-repository-pattern-java-php":{"url":"https:\/\/tkouleris.eu\/blog\/the-repository-pattern-java-php","category":"design patterns","title":"The Repository Pattern (Java \/ PHP)","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"29 Dec. 2024","content":"<p style=\"text-align:justify\">\n                                            The Repository Pattern is a design pattern commonly used in software development, particularly in the field of data management. Its purpose is to provide an additional abstraction layer for accessing data, ensuring that the code handling application logic remains independent of the storage system implementation.\n                                        <\/p><br\/>\n\n                                        <h3>Repository Pattern in Java<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            In Java, the Repository Pattern can be used to manage interactions with the database. Here\u2019s an example with a <code>UserRepository<\/code>:\n                                        <\/p>\n\n                                        <pre><code class=\"language-java\">\npublic interface UserRepository {\n    User findById(int id);\n    List<User> findAll();\n    void save(User user);\n    void delete(int id);\n}\n\npublic class JdbcUserRepository implements UserRepository {\n    \/\/ JDBC implementation\n}\n\npublic class HibernateUserRepository implements UserRepository {\n    \/\/ Hibernate implementation\n}\n\npublic class UserService {\n    private final UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public User getUserById(int id) {\n        return userRepository.findById(id);\n    }\n}\n<\/code><\/pre>\n\n                                        <p style=\"text-align:justify\">\n                                            Here, the <code>UserService<\/code> depends on <code>UserRepository<\/code> but does not know the actual implementation. This allows for easy replacement with different implementations (e.g., <code>JdbcUserRepository<\/code>, <code>HibernateUserRepository<\/code>).\n                                        <\/p><br\/>\n\n                                        <h3>Repository Pattern in PHP<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            In PHP, a similar structure can be used. Here\u2019s an example with a <code>UserRepository<\/code>:\n                                        <\/p>\n\n                                        <pre><code class=\"language-php\">\ninterface UserRepository {\n    public function findById(int $id): User;\n    public function findAll(): array;\n    public function save(User $user): void;\n    public function delete(int $id): void;\n}\n\nclass MySqlUserRepository implements UserRepository {\n    \/\/ MySQL-specific implementation\n}\n\nclass UserService {\n    private UserRepository $userRepository;\n\n    public function __construct(UserRepository $userRepository) {\n        this->userRepository = $userRepository;\n    }\n\n    public function getUserById(int $id): User {\n        return $this->userRepository->findById($id);\n    }\n}\n<\/code><\/pre>\n\n                                        <p style=\"text-align:justify\">\n                                            Here too, <code>UserService<\/code> uses <code>UserRepository<\/code> without concerning itself with the actual implementation. This allows flexibility in replacing <code>MySqlUserRepository<\/code> with other implementations.\n                                        <\/p><br\/>\n\n                                        <h3>Summary<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            The Repository Pattern provides efficient data and storage management while promoting flexibility and maintainability in software development, whether in Java or PHP.\n                                        <\/p>","page":"the-repository-pattern-java-php","description":"The Repository Pattern is a design pattern commonly used in software development, particularly in the field of data management. Its purpose is to provide an additional abstraction layer for accessing data, ensuring that the code handling application logic remains independent of the storage system implementation.\n\n","keywords":"repository pattern, design patterns, php, java, code","year":2024},"four-projects-for-beginners":{"url":"https:\/\/tkouleris.eu\/blog\/four-projects-for-beginners","category":"programming","title":"Four simple projects for beginner programmers","image":"https:\/\/tkouleris.eu\/img\/blog\/four-projects-for-beginners.png","date":"22 Dec. 2024","content":"<p style=\"text-align: justify;\">\n                                            If you're starting your journey into the world of programming, it's\n                                            important to choose projects that will help enhance your skills. Here are\n                                            four project ideas for beginner programmers, along with the technologies and\n                                            techniques you can use for each:\n                                        <\/p><br\/>\n                                        <h3 style=\"text-align:justify;\">Shopping List App<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            You can create a shopping list application using programming languages like\n                                            Python, JavaScript, or PHP. For app development, you can use technologies\n                                            such as HTML, CSS, and JavaScript, along with a simple back-end framework\n                                            like Flask, Express, or Laravel. You\u2019ll also need a database such as\n                                            MariaDB, MySQL, or even SQLite.\n                                        <\/p>\n\n                                        <h3 style=\"text-align:justify;\">Image Collection<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Build an application that allows users to upload images and organize them\n                                            into albums. You can include features for viewing, editing, and deleting\n                                            images, as well as creating albums for photo organization. The back-end\n                                            implementation can again be done using Python, JavaScript, or PHP, along\n                                            with a database like MariaDB, MySQL, or SQLite.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"text-align:justify;\">Task Calendar<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Develop a simple calendar app that enables users to schedule and manage\n                                            their daily tasks. You can use programming languages like Python, Java, or\n                                            JavaScript to build the application, and frameworks such as Flask or Spring\n                                            Boot for the back-end. For the front-end, you might use a library like\n                                            <a href=\"https:\/\/fullcalendar.io\/\" target=\"_blank\">FullCalendar<\/a>.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"text-align:justify;\">Currency Converter<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Create a simple application that converts currency values from one unit to\n                                            another. You can use free <a href=\"https:\/\/exchangeratesapi.io\/\"\n                                                                         target=\"_blank\">API<\/a> to fetch current\n                                            exchange rates and implement\n                                            the functionality using languages like Python or JavaScript.\n                                        <\/p><br\/>\n                                        <p style=\"text-align:justify;\">\n                                            These project ideas can help beginner programmers develop their skills and\n                                            understand fundamental programming concepts. Happy Coding! \ud83d\ude0a\n                                        <\/p>","page":"four-projects-for-beginners","description":"If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them","keywords":"junior programmer, beginner, simple projects","year":2024},"immutable-databases":{"url":"https:\/\/tkouleris.eu\/blog\/immutable-databases","category":"sql","title":"Immutable Databases: A Paradigm for Trust and Data Integrity","image":"https:\/\/tkouleris.eu\/img\/blog\/immutable-databases.jpg","date":"15 Dec. 2024","content":"<p style=\"text-align: justify;\">In the ever-evolving landscape of data\n                                            management, one concept is gaining traction for its potential to redefine\n                                            how we think about data security, integrity, and trust: immutable databases.\n                                            These databases, by design, ensure that once data is written, it cannot be\n                                            altered or deleted. Instead of the traditional approach to data management\n                                            where records can be updated or overwritten, immutable databases append\n                                            changes, maintaining a verifiable and permanent record of all transactions\n                                            or updates.<\/p>\n                                        <br\/>\n                                        <h3>The Core Concept of Immutability<\/h3>\n\n                                        <p style=\"text-align: justify;\">Immutability in databases originates from the\n                                            principle of \"write-once-read-many\" (WORM). Unlike traditional relational or\n                                            non-relational databases, immutable databases use data structures that\n                                            maintain the history of data. This means that every state of the database is\n                                            preserved, and the system creates a new version of the data for every\n                                            modification.<\/p>\n\n                                        <p style=\"text-align: justify;\">The immutable model offers several key\n                                            advantages:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Auditability<\/strong>: Since data cannot be overwritten or\n                                                deleted, immutable databases create a complete, verifiable history of\n                                                changes. This feature is particularly beneficial for industries like\n                                                finance, healthcare, and legal systems, where transparency and\n                                                accountability are paramount.\n                                            <\/li>\n                                            <li><strong>Enhanced Security<\/strong>: Immutable databases significantly\n                                                reduce the risk of malicious data tampering. Cyberattacks aimed at\n                                                altering data post-entry, such as ransomware or insider threats, are\n                                                rendered ineffective.\n                                            <\/li>\n                                            <li><strong>Data Integrity<\/strong>: The inability to alter or delete data\n                                                ensures the consistency and reliability of stored information, making it\n                                                ideal for mission-critical applications.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Technologies Behind Immutable Databases<\/h3>\n\n                                        <p style=\"text-align: justify;\">The rise of immutable databases is closely\n                                            linked to advancements in blockchain and distributed ledger technologies\n                                            (DLTs). Blockchain systems, such as Bitcoin or Ethereum, are prime examples\n                                            of immutable databases. These systems append data to a chain of blocks\n                                            secured by cryptographic hashes, making it virtually impossible to alter\n                                            past entries without invalidating the entire chain.<\/p>\n\n                                        <p style=\"text-align: justify;\">However, immutable databases are not limited to\n                                            blockchain. Several database systems have implemented immutability\n                                            principles in more traditional database contexts:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Event Sourcing<\/strong>: In event-sourced systems, every state\n                                                change is recorded as an event. These events are immutable and are\n                                                stored sequentially, allowing the system to reconstruct any previous\n                                                state.\n                                            <\/li>\n                                            <li><strong>Immutable Log-Based Storage<\/strong>: Systems like Apache Kafka\n                                                store data as immutable logs, which provide a reliable record of events\n                                                over time.\n                                            <\/li>\n                                            <li><strong>Versioned Databases<\/strong>: Tools like Datomic and\n                                                FoundationDB provide versioning capabilities, preserving historical\n                                                states alongside current ones.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Use Cases of Immutable Databases<\/h3>\n\n                                        <p style=\"text-align: justify;\">Immutable databases have diverse applications,\n                                            including:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Compliance and Regulatory Requirements<\/strong>: Immutable\n                                                databases are invaluable in sectors with strict regulatory requirements,\n                                                such as finance and healthcare. They provide the transparency and\n                                                traceability needed for compliance with standards like GDPR, HIPAA, or\n                                                SOX.\n                                            <\/li>\n                                            <li><strong>Fraud Detection and Prevention<\/strong>: By maintaining an\n                                                unalterable history of transactions, immutable databases can help detect\n                                                and prevent fraud. Any attempt to manipulate data can be immediately\n                                                identified.\n                                            <\/li>\n                                            <li><strong>Scientific Research<\/strong>: In fields like genomics or climate\n                                                modeling, maintaining the integrity of research data is crucial.\n                                                Immutable databases ensure that raw data and analyses remain unchanged\n                                                over time, fostering reproducibility and trust.\n                                            <\/li>\n                                            <li><strong>Supply Chain Management<\/strong>: Immutable databases enable\n                                                enhanced tracking and verification of goods across complex supply\n                                                chains. Blockchain-based solutions, for example, can confirm the\n                                                authenticity of products and trace their journey from origin to\n                                                consumer.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Challenges and Considerations<\/h3>\n\n                                        <p style=\"text-align: justify;\">Despite their advantages, immutable databases\n                                            are not without challenges:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Storage Overhead<\/strong>: Since data is never deleted or\n                                                overwritten, the storage requirements of immutable databases can grow\n                                                significantly over time. Efficient compression and archival strategies\n                                                are essential.\n                                            <\/li>\n                                            <li><strong>Complexity<\/strong>: Implementing and maintaining an immutable\n                                                database requires careful planning, especially when integrating with\n                                                existing systems.\n                                            <\/li>\n                                            <li><strong>Performance<\/strong>: Writing data in an immutable fashion can\n                                                introduce latency, especially in high-throughput environments.\n                                                Optimizations like batching and asynchronous writes can help mitigate\n                                                this.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>The Future of Immutable Databases<\/h3>\n\n                                        <p style=\"text-align: justify;\">As organizations continue to prioritize data\n                                            security and integrity, immutable databases are likely to play an\n                                            increasingly prominent role. Innovations in storage efficiency,\n                                            cryptographic techniques, and distributed systems are expected to address\n                                            many of the current limitations, making these databases more accessible and\n                                            performant.<\/p>\n\n                                        <p style=\"text-align: justify;\">Moreover, the rise of data-centric regulations\n                                            and the growing importance of digital trust signal a broader shift towards\n                                            systems that emphasize transparency and immutability. For businesses looking\n                                            to stay ahead in this era of accountability, adopting immutable database\n                                            technologies may no longer be an option but a necessity.<\/p>\n\n                                        <p style=\"text-align: justify;\">In conclusion, immutable databases represent a\n                                            powerful tool for organizations aiming to build robust, secure, and\n                                            transparent data systems. While challenges remain, their benefits in terms\n                                            of trust, compliance, and data integrity are undeniable, making them a\n                                            cornerstone of the future of data management.<\/p>","page":"immutable-databases","description":"An immutable database ensures data cannot be altered or deleted, preserving append-only records for transparency, integrity, and auditability.","keywords":"immutable database, blockchain database, append-only database, write-once-read-many (worm) database, event-sourced database, immutable data storage, data immutability, tamper-proof database, versioned database systems, cryptographic data integrity, audit trail database, immutable logs, secure data storage, what is an immutable database?, benefits of immutable databases, immutable database for compliance and audit, how immutable databases work, blockchain vs traditional databases, event sourcing with immutable databases, best immutable database solutions, financial transaction immutability, immutable healthcare records, supply chain immutable ledger, tamper-proof data for legal compliance","year":2024},"composite-pattern":{"url":"https:\/\/tkouleris.eu\/blog\/composite-pattern","category":"design patterns","title":"Composite Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"08 Dec. 2024","content":"<p>The <b>Composite Design Pattern<\/b> is a structural pattern used to represent part-whole hierarchies. It allows you to treat individual objects and compositions of objects uniformly, enabling a tree structure to represent complex object hierarchies.<\/p>\n                          <p>\n                            The Composite Design Pattern consists of three pillars:\n                            <ul>\n                              <li>When your application requires a tree structure to represent hierarchies of objects.<\/li>\n                              <li>When you want to treat individual objects and composite objects uniformly.<\/li>\n                              <li>When operations on nodes in a hierarchy should work in the same way for leaves and composites.<\/li>\n                            <\/ul>                            \n                          <\/p>\n                          <p>\n                            You can use the Composite Design Pattern when your application requires a tree structure to represent hierarchies of objects, when you want to treat individual objects and composite objects uniformly, or when operations on nodes in a hierarchy should work in the same way for leaves and composites.\n                          <\/p>\n                          <h4>UML<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-1.png\" \/>\n                          <h4>Example In Java<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-java.png\" \/>\n                          <h4>Example In Python<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-python.png\" \/>\n                          <h4>Advantages and Disadvantages of the Pattern<\/h4>\n                          <p>The Composite Design Pattern provides an elegant way to represent and work with tree structures. It simplifies client code by allowing uniform treatment of both individual (leaf) and composite objects. This uniformity makes it easier to perform operations on entire hierarchies without needing to distinguish between leaf and composite objects explicitly. Furthermore, the pattern promotes flexibility by enabling new types of components to be introduced with minimal changes to existing code, making the design more extensible and easier to maintain.<\/p>\n                          <p>However, the pattern is not without its downsides. Managing complex component hierarchies can add overhead, especially if the tree structure is large or frequently modified. Additionally, the uniform treatment of objects might lead to overly generic interfaces that don\u2019t adequately represent specific behaviors of individual components. If the application does not naturally require a hierarchical structure, implementing the Composite Pattern can result in unnecessary complexity.<\/p>\n                          <h4>Final<\/h4>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/EWDmWbJ4wRA?si=XDQ_Bx1uOmv6rVbo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                        ","page":"composite-pattern","description":"The Composite Design Pattern is a structural pattern used to represent part-whole hierarchies","keywords":"design pattern, composite design pattern, code, clean code, algorithms","year":2024},"open-source-conspiracy":{"url":"https:\/\/tkouleris.eu\/blog\/open-source-conspiracy","category":"misc","title":"The Open Source conspiracy","image":"https:\/\/tkouleris.eu\/img\/blog\/open-source-conspiracy.png","date":"01 Dec. 2024","content":"<p>A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.<\/p><p>The truth is that software companies like Microsoft have often fought against open-source and free software. But is that enough to claim that the philosophy of free code (from now on, by \"free code,\" I mean both free software and open-source software) doesn't \"suit\" them? Certainly, it doesn't benefit a company directly if a new competitor emerges for its office suite, such as OpenOffice or LibreOffice, especially if the company sells its own suite. However, this isn't the software we\u2019re talking about here.<\/p><p>Let\u2019s consider software like Linux. For a company like Microsoft to develop such software would require significant time and money. Of course, they could invest some funds to make it \"compatible\" with other software they sell, but even then, the cost wouldn't be the same. Especially if they use Linux on some of their cloud platforms, the cost for the company is almost zero, and they would keep most of the revenue from the service, perhaps only deducting maintenance costs.<\/p><p>Another example is the Edge browser. Microsoft cleverly used the open-source Chromium code to release its own browser, leaving behind the outdated Internet Explorer. Creating a new browser from scratch with the security and features Google had developed would have been difficult and costly.<\/p><p>Perhaps this is why, in recent years, companies have stopped fighting against free code and joined the game instead. It has become evident that free code benefits companies\u2014especially large corporations. How else could Microsoft have developed Copilot without access to a vast pool of code to train its new tool?<\/p><p>Thus, it seems that free code might be a grand \"conspiracy\" to allow large companies access to cheaper software\u2014or even code\u2014so they can generate greater profits at the lowest possible cost. Of course, this is just a conspiracy theory, one of those fleeting thoughts that come to you just before drifting off to sleep, and its value is about as significant as that of Internet Explorer.<\/p>","page":"open-source-conspiracy","description":"A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.","keywords":"open source, conspiracy, office, microsoft, libre office, open office","year":2024},"donkey-kong-country-behind-the-scenes":{"url":"https:\/\/tkouleris.eu\/blog\/donkey-kong-country-behind-the-scenes","category":"video games","title":"When Rare was eating bananas","image":"https:\/\/tkouleris.eu\/img\/blog\/donkey-kong-country-behind-the-scenes.jpg","date":"24 Nov. 2024","content":"                                        <p style=\"text-align: justify;\">\n                                            Several years ago, back when I was still uploading videos to YouTube, I did\n                                            a review of <b>Donkey Kong Country<\/b>, one of the best games for the SNES. Of\n                                            course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s\n                                            development but rather at presenting my subjective opinion of the game.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Naturally, when someone has more resources and, most importantly, the game\u2019s\n                                            actual creators talking about it, the quality of the final product is much\n                                            better. That\u2019s exactly the case with DF Retro\u2019s video about the game. The\n                                            video is a documentary on the creation of Donkey Kong Country and runs just\n                                            under 50 minutes. Enjoy!\n                                        <\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/GQ7qtqqgTlo?si=hoqI_o283XolJenn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Of course, for historical reasons, I\u2019m also including my own video (what a show-off):\n                                        <\/p>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/OHlACXYiaE4?si=4nSgwVbME7ILhOr3\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>","page":"donkey-kong-country-behind-the-scenes","description":"Several years ago, back when I was still uploading videos to YouTube, I did a review of Donkey Kong Country, one of the best games for the SNES. Of course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s development but rather at presenting my subjective opinion of the game.","keywords":"donkey kong, rare, donkey kong country, snes, super nintendo, 16 bit","year":2024},"bubble-sort":{"url":"https:\/\/tkouleris.eu\/blog\/bubble-sort","category":"sorting algorithms","title":"Sorting Algorithms #1: Bubble Sort","image":"https:\/\/tkouleris.eu\/img\/blog\/code.jpg","date":"17 Nov. 2024","content":"<style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <!-- Start -->\n                                        <h3>What are Sorting Algorithms?<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            Sorting algorithms are a set of algorithms that help us arrange data in\n                                            ascending or descending order. They are fundamental to computer science, and\n                                            the differences between them mainly lie in their time complexity and space\n                                            complexity, which determine their suitability for handling larger\n                                            datasets.<\/p><br\/>\n                                        <h3>Bubble Sort<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            The simplest and, at the same time, the worst sorting algorithm is Bubble\n                                            Sort. In Bubble Sort, we start from the beginning of the dataset and compare\n                                            the first two elements. The smaller one is placed first, and the larger one\n                                            second. Then, we compare the next two elements and repeat the process. This\n                                            continues until all elements are compared. Once a full pass is complete, the\n                                            process is repeated from the start until the dataset is fully sorted.<\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            For example, consider the array [10, 4, 5, 8, 0]. To execute the algorithm:\n\n                                            Compare 10 with 4. Since 4 is smaller, the array becomes [4, 10, 5, 8, 0].\n                                            Compare 10 with 5. Since 5 is smaller, the array becomes [4, 5, 10, 8, 0].\n                                            Compare 10 with 8. Since 8 is smaller, the array becomes [4, 5, 8, 10, 0].\n                                            Compare 10 with 0. Since 0 is smaller, the array becomes [4, 5, 8, 0, 10].\n                                            This completes the first pass. The process is repeated until the array is\n                                            fully sorted.<\/p><br\/>\n                                        <h3>Code<\/h3>\n                                        <pre><code>\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already sorted, no need to check them\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Example usage\ndata = [10, 4, 5, 8, 0]\nsorted_data = bubble_sort(data)\nprint(\"Sorted array:\", sorted_data)\n    <\/code><\/pre><br\/>\n\n                                        <h3>Algorithm Complexity<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The time complexity of Bubble Sort is <span\n                                            style=\"font-family: 'Times New Roman', serif;\">O(n<sup>2<\/sup>)<\/span> in\n                                            the worst case, where <i>n<\/i> is the number of elements. This makes the\n                                            algorithm unsuitable for large datasets.<\/p>","page":"bubble-sort","description":"","keywords":"bubble sort, algorithm, sorting algorithms, python","year":2024},"three-rules-for-readable-code":{"url":"https:\/\/tkouleris.eu\/blog\/three-rules-for-readable-code","category":"programming","title":"Three (3) rules for readable code","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"10 Nov. 2024","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>1. Avoid Deeply Nested Code<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s common, especially among newer developers, to try to handle one case\n                                            inside another and then handle yet another case within that, and so on.<\/p>\n\n                                        <b>Example:<\/b>\n                                        <pre><code>\nif condition1:\n    if condition2:\n        if condition3:\n            # Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            In this scenario, anyone trying to read the code will struggle\n                                            significantly.\n                                            Every time they encounter an if, they need to remember where they are and\n                                            why. This makes the code harder to read and more difficult to\n                                            understand.<\/p>\n                                        <b>A Better Approach:<\/b>\n                                        <pre><code>\nif not condition1:\n    return\n\nif not condition2:\n    return\n\nif not condition3:\n    return\n\n# Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            To make the above code more readable, we created a helper function and\n                                            utilized the early return technique. If data is missing, we return. If the\n                                            user is inactive, we return. If the user\u2019s profile doesn\u2019t exist, we return.\n                                            This way, the code becomes more readable and easier for the reader to follow\n                                            without overloading their memory.\n                                        <\/p><br\/>\n                                        <h3>2. Extract Variable Checks into Functions<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            In many cases, variable checks can make code harder to read, requiring you\n                                            to keep track of what each variable does. A simple way to make your code\n                                            read like plain text is to extract variable checks into functions. For\n                                            example:\n                                        <\/p>\n\n                                        <b>Before:<\/b>\n                                        <pre><code>\nif data.users.length > 0:\n    # Do something\n\n                                        <\/code><\/pre>\n                                        <b>After:<\/b>\n                                        <pre><code>\ndef has_users(data):\n    return len(data.users) > 0\n\nif has_users(data):\n    # Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            In the above block, we created the has_users function. This allows the\n                                            reader to interpret the code as \u201cif the data has users\u201d rather than\n                                            deciphering what data.users.length means.\n                                        <\/p><br\/>\n                                        <h3>3. Avoid Code Duplication<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            In programming, it\u2019s important not to write the same code repeatedly. This\n                                            can simplify future changes to the code. For example, what if you needed to\n                                            change the text from \"User is active and\" to \"Client is available and\"?\n                                            While this might only appear in two lines in a small example, in a\n                                            real-world application, such a string might be duplicated across 10 or 20\n                                            places. You\u2019d need to find and modify the string in all of those instances.\n                                            Instead, you can use a function to handle this centrally.\n                                        <\/p>\n\n                                        Example:\n                                        <pre><code>\ndef log_user_status(user):\n    print(f\"{user.name} is active and {user.status}\")\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            By using this function, you only need to update the logic in one place if\n                                            changes are required.<\/p><br\/>\n                                        <h3>Final Code with All Three Improvements:<\/h3>\n                                        <pre><code>\ndef has_users(data):\n    return len(data.users) > 0\n\ndef log_user_status(user):\n    print(f\"{user.name} is active and {user.status}\")\n\ndef process_data(data):\n    if not data:\n        return\n\n    if not data.is_active:\n        return\n\n    if not has_users(data):\n        return\n\n    for user in data.users:\n        log_user_status(user)\n\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3>Why These Rules Are Important<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            These three rules are crucial for writing readable code and making future\n                                            changes easier. Even code we wrote today might be hard to remember after\n                                            three years when modifications are required. If we don\u2019t structure the code\n                                            to be navigable and readable, we will spend more time developing new\n                                            features or fixing bugs.<\/p>","page":"three-rules-for-readable-code","description":"How to make your code more readable? Follow the three simple rules","keywords":"code, readable, nested if, code duplication, extract checks","year":2024},"antitrust":{"url":"https:\/\/tkouleris.eu\/blog\/antitrust","category":"computer science movies","title":"Computer Science Movies #1: Antitrust","image":"https:\/\/tkouleris.eu\/img\/blog\/antitrust.jpg","date":"03 Nov. 2024","content":"<p style=\"text-align: justify;\">\n                                            The movie Antitrust (2001) is a tech thriller focusing on Milo Hoffman, a\n                                            young and talented computer programmer. Milo is recruited by NURV, one of\n                                            the world's largest software companies, led by the charismatic and powerful\n                                            Gary Winston. Initially impressed by the opportunity and the cutting-edge\n                                            work environment, Milo soon discovers that NURV is involved in illegal\n                                            activities, including intellectual property theft and the murder of those\n                                            who resist.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            As Milo digs deeper, he uncovers a sinister plan exploiting open-source\n                                            software\n                                            and developers to give Winston complete control over global software. Milo\n                                            must\n                                            decide whether to stay true to his ethics or submit to the company's\n                                            pressures,\n                                            putting his life and the lives of his loved ones at risk. The film explores\n                                            themes of ethics in technology, software freedom, and manipulation by large\n                                            multinational corporations.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            I watched this movie as a student, on a Friday afternoon when I wanted to\n                                            see\n                                            something tech-related. Since then, it has become my number one film related\n                                            to\n                                            computer science and programming. This is due to its many references to\n                                            open-source software, scenes showcasing real operating systems from various\n                                            Linux distributions, and the movie\u2019s motivational phrase: \"Human knowledge\n                                            belongs to the world.\" At the time, I was not only trying to figure out\n                                            which\n                                            area of technology and computer science I would pursue, but it also\n                                            coincided\n                                            with the period when I was shaping my political ideology, which was greatly\n                                            influenced by open and free software.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s certainly not an Oscar-worthy film with deep meanings, profound\n                                            philosophy,\n                                            or stellar performances, but if you\u2019ve gone through a phase of being into\n                                            free\n                                            software, it will definitely leave an impression.\n                                        <\/p><br\/>\n                                        <h3>Details:<\/h3>\n                                        <a href=\"https:\/\/www.imdb.com\/title\/tt0218817\/?ref_=fn_al_tt_1\" target=\"_blank\">Antitrust\n                                            (2001)<\/a>\n                                        <br\/>\n                                        <b>Director:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0398185\/?ref_=tt_ov_dr_1\"\n                                                            target=\"_blank\">Peter Howitt<\/a><br\/>\n                                        <b>Writer:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0291442\/?ref_=tt_ov_wr_1\"\n                                                          target=\"_blank\">Howard Franklin<\/a><br\/>\n                                        <b>Music:<\/b> <a\n                                        href=\"https:\/\/www.imdb.com\/name\/nm0204485\/?ref_=nv_sr_srsg_3_tt_0_nm_8_in_0_q_Don%2520Davis\"\n                                        target=\"_blank\">Don Davis<\/a><br\/>\n                                        <b>Starring:<\/b>\n                                        <p style=\"text-align: justify;\">\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0000202\/?ref_=tt_cl_t_1\"\n                                               target=\"_blank\">Ryan Phillippe<\/a> (Milo Hoffman), <a\n                                            href=\"https:\/\/www.imdb.com\/name\/nm0000209\/?ref_=tt_cl_t_2\" target=\"_blank\">Tim\n                                            Robbins<\/a> (Gary Winston),\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0000337\/?ref_=tt_cl_t_3\" target=\"_blank\">Rachael Leigh Cook<\/a> (Lisa Calighan),\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0001231\/?ref_=tt_cl_t_4\" target=\"_blank\">Claire Forlani<\/a> (Alice Poulson)\n                                        <\/p>","page":"antitrust","description":"A computer programmer's dream job at a hot Portland-based firm turns nightmarish when he discovers his boss has a secret and ruthless means of dispatching anti-trust problems.","keywords":"movie, antitrust, tech, open source, computer science movies","year":2024},"sql-indexes":{"url":"https:\/\/tkouleris.eu\/blog\/sql-indexes","category":"sql","title":"SQL Indexes","image":"https:\/\/tkouleris.eu\/img\/blog\/sql.png","date":"27 Oct. 2024","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>What is an SQL Index?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            Indexes in SQL are data structures that help us retrieve data from a\n                                            database\n                                            more quickly. They can be compared to the table of contents of a book. For\n                                            example, if you have a book about C programming and you want to learn about\n                                            pointers, you don\u2019t need to read the entire book to find the relevant\n                                            chapter. You look at the table of contents, see that the chapter on pointers\n                                            is on page 110, and go directly there. SQL indexes work in a similar\n                                            way.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            You create indexes on a column of a database table. When you run a query\n                                            based on that column, the SQL engine can return results faster using the\n                                            index.\n                                        <\/p><br\/>\n\n                                        <h3>How SQL Indexes Work<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The most common data structure for SQL indexes is the B-Tree, also known as\n                                            a Balanced Tree. In this data structure, each leaf of the tree can have more\n                                            than\n                                            one key. For instance, if each leaf has two keys, it will have three\n                                            branches:\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The left branch contains values smaller than the left key.\n                                            The middle branch contains values between the left and right keys.\n                                            The right branch contains values greater than the right key.\n                                            A more detailed analysis of balanced trees can be found here:\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/K1a2Bk8NrYQ?si=llNqG0apsqwVF7Hv\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/><br\/>\n\n                                        <h3>Types of SQL Indexes<\/h3>\n                                        <br\/>\n                                        <h4>Clustered Indexes:<\/h4>\n\n                                        <p style=\"text-align: justify;\">\n                                            A clustered index determines the physical order of data in a table. This\n                                            means that the rows are stored on the disk in the same order as the index. A\n                                            table can have only one clustered index, as rows can be sorted in only one\n                                            way. Clustered indexes are typically created based on the primary key of the\n                                            table.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE CLUSTERED INDEX idx_employee_id ON Employees(EmployeeID);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h4>Non-Clustered Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A non-clustered index is independent of the table's data. It contains a\n                                            sorted list of values from the indexed columns and pointers that reference\n                                            the actual rows in the table. Unlike clustered indexes, a table can have\n                                            multiple non-clustered indexes.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE NONCLUSTERED INDEX idx_employee_name ON Employees(LastName);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            A more detailed comparison between clustered and non-clustered indexes for\n                                            SQL Server can be found here:<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/ITcOiLSfVJQ?si=baPNh7XqOSh1DT0V\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/><br\/>\n                                        <h4>Unique Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A unique index ensures that the values in the column or columns that are\n                                            indexed are unique. This type of index is often used to enforce data\n                                            uniqueness, similar to a unique constraint.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE UNIQUE INDEX idx_unique_email ON Employees(Email);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h4>Full-Text Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A full-text index is used to perform full-text searches, which involve\n                                            searching for words or phrases within large text columns. This type of index\n                                            is ideal for applications such as search engines or document management\n                                            systems.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE FULLTEXT INDEX idx_fulltext_description ON Products(Description);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3 style=\"margin-bottom: 10px;\">When to Use Indexes<\/h3>\n                                        <ol >\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Right Column Rule:<\/b> Create an index on a column that is frequently used\n                                                in queries with WHERE, JOIN, or ORDER BY clauses.<br\/>\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Index Limitation Rule:<\/b> Excessive use of indexes can have the opposite\n                                                effect of what we expect. This is because more indexes increase the time\n                                                required for INSERT operations and also increase the database size.\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Type of Data:<\/b> The type of data being indexed is very important. For\n                                                example, integers perform better when indexed.\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>No Indexes on Small Tables:<\/b> If the table is small, a full scan might be\n                                                faster for finding a record than creating indexes.\n                                            <\/li>\n                                        <\/ol>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Using indexes in a database is a critical tool that can significantly enhance\n                                            data retrieval speed. However, it is essential to identify which data is\n                                            worth indexing, avoiding a situation where all columns in all tables are\n                                            indexed, which could lead to adverse results.<\/p>","page":"sql-indexes","description":"SQL (Structured Query Language) is a standardized programming language designed to manage and manipulate relational databases. It allows users to perform a wide range of operations on data, such as querying, updating, inserting, and deleting data stored in a database.","keywords":"sql, sql index, sql indexes, microsoft sql, mysql, mariadb","year":2024},"therac-25":{"url":"https:\/\/tkouleris.eu\/blog\/therac-25","category":"dangerous software","title":"Dangerous Software #1: Therac-25","image":"https:\/\/tkouleris.eu\/img\/blog\/therac-25.png","date":"20 Oct. 2024","content":"<p style=\"text-align: justify;\">\n                                            I remember many years ago, when I was a student, we had a discussion with\n                                            some computer science and electronics students. Most of them believed that\n                                            our professions weren\u2019t that important and that a mistake you might make\n                                            wouldn\u2019t cost someone their life. I disagreed back then and even brought up\n                                            the example of designing medical devices. I didn\u2019t have a specific example\n                                            in mind, but in the end, my theory turned out to be true\u2026 and in fact, 15\n                                            years before I had that discussion with my classmates<\/p><br\/>\n\n                                        <h3>The Therac-25<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 was developed in the 1980s by the company AECL (Atomic Energy\n                                            of Canada Limited). It was the third model in a series of medical\n                                            radiotherapy machines and provided treatment through two modes of radiation:\n                                            electrons and X-rays. The system differed from previous models as it was the\n                                            first to rely so heavily on its software for safety, whereas earlier models\n                                            also used mechanical safety interlocks<\/p><br\/>\n\n                                        <h3>How the software cost lives<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 had serious software bugs that allowed excessively high doses\n                                            of radiation to be administered to patients. This occurred mainly due to the\n                                            following issues:<\/p>\n                                        <ul>\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Software design failure:<\/b> The machine used a combination of software and\n                                                hardware to regulate radiation doses. However, the software contained\n                                                errors that could lead to overdoses without triggering the mechanical\n                                                safety systems.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Non-existent or insufficient safety checks:<\/b> The design of the Therac-25\n                                                included software that had not been adequately tested, and there were\n                                                not enough checks to ensure the machine was functioning properly. A\n                                                critical omission was the lack of compensating mechanical safety\n                                                mechanisms, as the system relied too heavily on the proper functioning\n                                                of the software.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Interaction with the operator:<\/b> The users of the Therac-25, typically\n                                                medical technicians, could unintentionally trigger the error by making\n                                                rapid changes to the machine's settings. Due to a bug in the keyboard\n                                                handling, the machine could start without the correct parameters for the\n                                                radiation.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Unclear and unhelpful error feedback:<\/b> When errors occurred, the machine\n                                                provided vague messages to the operators, which didn\u2019t explain the risk.\n                                                The technicians didn\u2019t understand the severity of the errors and often\n                                                ignored the messages.\n                                            <\/li>\n                                        <\/ul>\n\n                                        <p style=\"text-align: justify;\">\n                                            These problems had disastrous results. Between 1985 and 1987, at least six\n                                            incidents were recorded where patients received excessive radiation doses,\n                                            resulting in severe burns, permanent injuries, and in some cases, death. The\n                                            doses given to these patients were up to 100 times higher than the correct\n                                            therapeutic dose.<\/p><br\/>\n\n                                        <h3>How we improved software since then?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The failure of the Therac-25 forced manufacturers to tighten the software\n                                            testing process, especially for software related to human life.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Error codes now provide clear information to operators so they know exactly\n                                            what went wrong and why.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 remains a cautionary example of the dangerous consequences of\n                                            inadequate design and insufficient testing in critical applications, and it\n                                            is often studied in software engineering schools.<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/UXt5SG0qlR0?si=1ZXD5SeqjKhPO2Mv\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe><br\/><br\/>","page":"therac-25","description":"","keywords":"dangerous software, therac-25, x-rays","year":2024},"isa-slots":{"url":"https:\/\/tkouleris.eu\/blog\/isa-slots","category":"forgotten technology","title":"Forgotten Technology #4: ISA slots","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_4.jpg","date":"13 Oct. 2024","content":"<h3>ISA (Industry Standard Architecture) Slots: A Key Chapter in PC Evolution<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution,\n                                            serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer\n                                            technologies, such as PCI and PCIe.\n                                        <\/p><br\/>\n\n                                        <h3>What Are ISA Slots?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots are expansion slots found on motherboards that were primarily used during the 1980s and 1990s to connect external\n                                            cards and devices to computers. These cards included devices such as sound cards, graphics cards, network cards, and controllers\n                                            for external peripherals like printers and hard drives.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Introduced in 1981 by IBM with the debut of the IBM PC, ISA architecture aimed to standardize the connection of additional\n                                            components inside the computer. This standardized architecture enabled widespread adoption by hardware manufacturers, making\n                                            it the dominant solution of its time.\n                                        <\/p><br\/>\n\n                                        <h3>The Technology<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The first version of ISA slots was 8-bit, meaning they could transfer data over 8-bit-wide paths. While sufficient for early\n                                            personal computers, growing demands highlighted the need for faster and wider data pathways. In response, the 16-bit version\n                                            of ISA was introduced in 1984, allowing more efficient data transfers and support for more demanding expansion cards.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots had a relatively slow data transfer rate, ranging from 1 to 8 MB\/s depending on the version. This slow speed became\n                                            a significant drawback as modern devices began requiring higher performance and faster data rates.\n                                        <\/p><br\/>\n\n                                        <h3>The Use of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            At their peak, ISA slots were the standard medium for connecting various peripheral devices. Numerous expansion cards, such\n                                            as Sound Blaster audio cards, graphics cards, SCSI controllers, and network cards, were designed for ISA slots.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Their popularity stemmed from their broad compatibility and widespread support for many devices. However, as computers became\n                                            more powerful and device performance demands increased, the limitations of ISA technology became increasingly apparent.\n                                        <\/p><br\/>\n\n                                        <h3>The Decline of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            By the 1990s, ISA technology began to show its limitations as computers grew more powerful and user demands escalated.\n                                            Manufacturers started seeking alternatives offering better performance. This led to the introduction of PCI (Peripheral\n                                            Component Interconnect) in 1991, which provided significantly faster speeds and superior performance compared to ISA. PCI\n                                            slots allowed the connection of faster and more efficient devices, gradually rendering ISA obsolete.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            By the late 1990s, PCI slots had almost completely replaced ISA slots in most personal computers. Some motherboards continued\n                                            to include ISA slots into the early 2000s for compatibility with older devices, but their use eventually faded.\n                                        <\/p><br\/>\n\n                                        <h3>Legacy and Significance<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots played a pivotal role in the development of personal computers, enabling the expansion of their capabilities with\n                                            new devices and technologies. Although they have been replaced by more modern technologies such as PCI and PCIe, their historical\n                                            significance is undeniable. The development of ISA architecture laid a crucial foundation for subsequent advancements in computer\n                                            technology, contributing to the flexibility and functionality we enjoy today in modern PCs.\n                                        <\/p><br\/>","page":"isa-slots","description":"ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution, serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer technologies, such as PCI and PCIe.","keywords":"forgotten technology, isa slots, hardware","year":2024},"alan-turing":{"url":"https:\/\/tkouleris.eu\/blog\/alan-turing","category":"tech heroes","title":"Tech Heroes #7: Alan Turing","image":"https:\/\/tkouleris.eu\/img\/blog\/alan-turing.jpg","date":"06 Oct. 2024","content":"                                        <p style=\"text-align: justify;\">\n                                            Alan Turing is rightly regarded as the father of computer science. Born on\n                                            June 23, 1912, he demonstrated an early talent for mathematics and the\n                                            sciences. He began solving mathematical problems even before acquiring the\n                                            necessary knowledge of advanced mathematics. Despite his exceptional\n                                            intelligence, he failed to secure a scholarship to Trinity College, his\n                                            first choice, but ultimately attended King\u2019s College, Cambridge.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            As a student, Turing sought to solve David Hilbert's problem, which involved\n                                            investigating whether an algorithm could exist that, given a logical\n                                            expression as input, would always yield a correct YES or NO answer.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Turing's solution was a hypothetical computing machine, which became known\n                                            as the Turing Machine. The Turing Machine, with an appropriate set of rules,\n                                            can perform various computations. Turing\u2019s concept was that of a\n                                            general-purpose machine, limited only by computational resources such as\n                                            memory and processing power. All modern computers are fundamentally based on\n                                            the principles of the Turing Machine.\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/dNRDvLACg5Q?si=407O48JgzHQiYoF-\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            During World War II, Turing devised a machine capable of decrypting messages\n                                            encoded by the German Enigma machine. Many historians suggest that the\n                                            decryption of these messages brought the war to an end several years earlier\n                                            than it otherwise might have.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            In 1948, Turing began developing a chess program for a computer that had not\n                                            yet been built. By 1949, he tackled the challenge of artificial intelligence\n                                            and proposed the famous Turing Test, which posits that a machine achieves\n                                            intelligence when its responses to questions are indistinguishable from\n                                            those of a human.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Turing was openly homosexual at a time when homosexuality was a crime. He\n                                            was prosecuted and sentenced to hormonal treatments intended to suppress his\n                                            libido. Tragically, he died by suicide using cyanide in 1954.\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/nuPZUUED5uk?si=G62l-kWPwrxQr4E7\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>","page":"alan-turing","description":"Alan Turing is rightly regarded as the father of computer science. Born on June 23, 1912, he demonstrated an early talent for mathematics and the sciences. He began solving mathematical problems even before acquiring the necessary knowledge of advanced mathematics. Despite his exceptional intelligence, he failed to secure a scholarship to Trinity College, his first choice, but ultimately attended King\u2019s College, Cambridge.","keywords":"alan turing, tech heroes","year":2024},"cassete-tape":{"url":"https:\/\/tkouleris.eu\/blog\/cassete-tape","category":"forgotten technology","title":"Forgotten Technology #3: The cassete tape","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_3.jpg","date":"29 Sept. 2024","content":"<p style=\"text-align:justify\">Today, to listen to a song, all we need to do is\n                                            open YouTube, search for the title (or even lyrics if we don't remember the\n                                            title), and within seconds, we are listening to the tune that's been stuck\n                                            in our heads and we've been humming for the past 5 days. We can also, for\n                                            free or with a subscription, listen to almost any album or perhaps even the\n                                            entire discography of any band or artist. But 25 years ago, things were not\n                                            like this.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">The cassette was a technology simple in its\n                                            conception. It was a small plastic casing containing a magnetic tape, on\n                                            which sound could be recorded, such as music, speech, or other sounds. The\n                                            tape was wound around two spools, and by moving the tape through the\n                                            cassette, sound could be recorded or played back.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">There were many uses for it. From listening to\n                                            music recorded by a studio to capturing the inarticulate screams you made\n                                            with your friends to pass the time. However, the most common use was to make\n                                            a mixtape of different songs, which usually expressed feelings for someone\n                                            else and was intended as a gift for that person.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">I admit that I never bought an original cassette\n                                            with music, because another common practice was to copy entire albums for\n                                            our friends, and they would do the same for others. Obviously, this was\n                                            something the record companies didn't want, but there was no technology at\n                                            the time to stop it.<\/p><br\/>\n\n                                        <h3>The Use of Cassettes in Computers<\/h3>\n\n                                        <p style=\"text-align:justify\">Another use of cassettes was with computers. In\n                                            the 1980s, there was a significant rise in the home computer market. One of\n                                            the storage mediums... who am I kidding? The best way to play a game was to\n                                            find a pirated cassette with the game on it. There were external devices\n                                            that would read the magnetic tape of the cassette and transfer the data to\n                                            the computer's memory. Just like with floppy disks, except instead of\n                                            reading a magnetic disk, they read a magnetic tape.<\/p><br\/>\n\n                                        <h3>The Walkman<\/h3>\n\n                                        <p style=\"text-align:justify\">However, without the cassette, we would never have\n                                            been able to carry music with us everywhere. So, in the late 70s, Sony gave\n                                            us a groundbreaking invention\u2014the Walkman. I won't write much here since the\n                                            Walkman and its derivatives deserve an article of their own, but it's\n                                            important to note that the small size of the cassette helped in the\n                                            development of the Walkman. It certainly wouldn\u2019t have been as easy to carry\n                                            around a portable turntable to listen to \"Battery\" by Metallica.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">Although the audio cassette was hugely popular in\n                                            the 1980s and 1990s, with the rise of CDs and digital formats, its use\n                                            gradually declined. However, it remains a symbol of the analog era and music\n                                            culture.<\/p><br\/>","page":"cassete-tape","description":"Today, to listen to a song, all we need to do is open YouTube, search for the title (or even lyrics if we don't remember the title), and within seconds, we are listening to the tune that's been stuck in our heads and we've been humming for the past 5 days. We can also, for free or with a subscription, listen to almost any album or perhaps even the entire discography of any band or artist. But 25 years ago, things were not like this.","keywords":"forgotten technology, cassete, tape, cassete tape, hardware","year":2024},"three-things-for-programmers-to-avoid":{"url":"https:\/\/tkouleris.eu\/blog\/three-things-for-programmers-to-avoid","category":"misc","title":"Three (3) things for programmers to avoid","image":"https:\/\/tkouleris.eu\/img\/blog\/misc.png","date":"22 Sept. 2024","content":"<p style=\"text-align:justify\">In the years I\u2019ve worked as a programmer, I\u2019ve\n                                            noticed, mostly in myself but also in other developers, various behaviors\n                                            that make us unproductive. These are usually either low self-esteem, fear of\n                                            the unknown, or arrogance, which create the problems. Human characteristics\n                                            that, as human experience has shown, when we master them, we make the world\n                                            better.<\/p>\n\n                                        <br\/>\n                                        <h3>1. I need to learn everything to be a good programmer<\/h3>\n\n                                        <p style=\"text-align:justify\">This can happen when you start your journey as a\n                                            programmer. Slightly influenced by the countless movies showing programmers\n                                            as centers of knowledge and wisdom, and a bit by the huge amount of\n                                            technologies out there, you think you're too insignificant to become a\n                                            programmer or that you need to dedicate your life exclusively to it.<\/p>\n\n                                        <p style=\"text-align:justify\">When I finished school and was trying to find my\n                                            first job as a programmer, I read all the job listings and the skills\n                                            potential employers wanted me to have, and I broke into a cold sweat.\n                                            Technologies I had never heard of, terminology that was unknown and\n                                            incomprehensible. This was the reason I didn\u2019t continue as a professional\n                                            programmer at that time and chose something simpler, like network\n                                            technician.<\/p>\n\n                                        <p style=\"text-align:justify\">However, if I had overcome my fears back then and\n                                            managed to find a job as a programmer, I would have faced another problem\n                                            that many beginners face\u2014the imposter syndrome.<\/p>\n\n                                        <p style=\"text-align:justify\">And indeed, when I started working as a programmer\n                                            in 2016, for two years I thought I was just lucky and that soon they would\n                                            discover how incompetent I was and fire me. This anxiety made me try to\n                                            learn as much as possible. Learn WordPress, learn JavaScript, learn Laravel,\n                                            learn C and C++ (as if I needed them as a web developer), learn the\n                                            significance of every new buzzword I saw in the programming world.<\/p>\n\n                                        <p style=\"text-align:justify\">Fortunately, I soon realized that all I needed to\n                                            do was focus my attention on one language, one framework, and learn the\n                                            basic concepts and how I could apply them in my everyday work as a\n                                            programmer.<\/p>\n\n                                        <p style=\"text-align:justify\">As programmers, we need to understand that we\n                                            can't learn everything. Programming languages, frameworks, and technologies\n                                            are so numerous out there that even two lifetimes wouldn\u2019t be enough to\n                                            learn them all. We only need to understand that all we need to learn are the\n                                            basics, the fundamentals. The client-server model, recursion, SOLID, design\n                                            patterns. These concepts are tied to a single technology or language but can\n                                            be applied across most technologies and languages.<\/p>\n\n                                        <br\/>\n                                        <h3>2. I know everything, I am the best programmer<\/h3>\n\n                                        <p style=\"text-align:justify\">Fortunately, I have never met a programmer with\n                                            the arrogant behavior of the all-knowing who is always right. However, it is\n                                            another human behavior that we encounter in our daily lives, and sooner or\n                                            later, we will encounter it in our profession as well.<\/p>\n\n                                        <p style=\"text-align:justify\">At some point, we may acquire so much programming\n                                            knowledge that we begin to believe we are something special. This may even\n                                            be reinforced if, in the environment you work in, you always have the\n                                            answers and help others with their problems. However, it\u2019s good not to have\n                                            illusions.<\/p>\n\n                                        <p style=\"text-align:justify\">We must always have an open mind and listen to the\n                                            opinion of someone who may not have the experience or the same knowledge as\n                                            we do. A good idea can come even from our local newsagent, who might have\n                                            nothing to do with programming. Rejecting an idea to insist on our own\n                                            superiority helps no one.<\/p>\n\n                                        <p style=\"text-align:justify\">More important than being right is the ability to\n                                            collaborate with others, and this cannot be done if you believe you are\n                                            always right or that your opinion is better than others. Collaboration\n                                            solves problems, and that's the only thing we want to do as programmers\u2014to\n                                            solve problems.<\/p>\n\n                                        <br\/>\n                                        <h3>3. This problem is impossible to solve, no one has ever solved it<\/h3>\n\n                                        <p style=\"text-align:justify\">Let\u2019s say you\u2019ve been working as a programmer for\n                                            some years, you have self-confidence (but not arrogance), and you are\n                                            presented with a problem you\u2019ve never encountered before. It seems\n                                            impossible to implement, and you reject it. Congratulations, you just missed\n                                            an opportunity to become a better programmer.<\/p>\n\n                                        <p style=\"text-align:justify\">I understand the fear someone might have about the\n                                            unknown, but a programmer doesn\u2019t exist to create simple CRUD applications.\n                                            After all, even an AI could do that today. A programmer is for the tough\n                                            problems. And these are the ones that improve him and make him better.<\/p>\n\n                                        <p style=\"text-align:justify\">Certainly, not all problems can be solved, but we\n                                            shouldn\u2019t dismiss even the attempt to solve them. Before you say that you\n                                            cannot solve this problem, give it a try. See if others have solved it or\n                                            solved part of it. Ask another programmer if they have any ideas. Only when\n                                            you reach an absolute dead end should you admit defeat. It\u2019s not a bad\n                                            thing. Then say that at this moment, this problem cannot be solved by\n                                            me.<\/p>\n\n                                        <p style=\"text-align:justify\">The process of solving it, or even admitting\n                                            defeat, takes you a step forward. It\u2019s no small thing to break out of a\n                                            routine of creating simple CRUD applications and do what you were made\n                                            for\u2014to solve real problems.<\/p>","page":"three-things-for-programmers-to-avoid","description":"In the years I\u2019ve worked as a programmer, I\u2019ve noticed, mostly in myself but also in other developers, various behaviors that make us unproductive. These are usually either low self-esteem, fear of the unknown, or arrogance, which create the problems. Human characteristics that, as human experience has shown, when we master them, we make the world better.","keywords":"programming, skill","year":2024},"python-tutorial-4":{"url":"https:\/\/tkouleris.eu\/blog\/python-tutorial-4","category":"python tutorial","title":"Python Tutorial #4: Booleans","image":"https:\/\/tkouleris.eu\/img\/blog\/python.jpg","date":"15 Sept. 2024","content":"                                        <style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align:justify;\">\n                                            Boolean values in Python are a data type that can only take two values: <code>True<\/code> or <code>False<\/code>.\n                                            These values are often used to control conditions in logical expressions, loops, and control structures such as\n                                            <code>if<\/code>, <code>while<\/code>, and <code>for<\/code> statements.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"text-align:justify;\">Characteristics of Booleans in Python<\/h3>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">The type of Boolean values is <code>bool<\/code>.<\/li>\n                                            <li style=\"text-align:justify;\">In Python, comparisons, logical operations, and many other functions return Boolean values.<\/li>\n                                            <li style=\"text-align:justify;\">Everything can be evaluated as <code>True<\/code> or <code>False<\/code>:\n                                                Numbers: <code>0<\/code> is considered <code>False<\/code>, while any other number is <code>True<\/code>.\n                                                Lists, strings, and other containers: Empty ones are <code>False<\/code>, while non-empty ones are <code>True<\/code>.\n                                            <\/li>\n                                        <\/ul>\n                                        <pre><code>\n# boolean values\nx = True\ny = False\n\nprint( 5 > 3 ) # True\nprint(2 == 5 ) # False\n\nif x:\n    print(\"x value is True\")\nelse:\n    print(\"x value is False\")\n                                        <\/code><\/pre>\n                                        <p style=\"text-align:justify;\">\n                                            Boolean values are fundamental for controlling the flow of programs.\n                                        <\/p>","page":"python-tutorial-4","description":"Let's talk about booleans","keywords":"python tutorial, python, programming, skill, booleans","year":2024},"python-tutorial-3":{"url":"https:\/\/tkouleris.eu\/blog\/python-tutorial-3","category":"python tutorial","title":"Python Tutorial #3: Lists, Tuples and sets","image":"https:\/\/tkouleris.eu\/img\/blog\/python.jpg","date":"08 Sept. 2024","content":"<style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3 style=\"text-align:justify;\">Lists<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            A list in Python is a data structure used to store collections of elements in a specific order.\n                                            The elements in a list can be of any type, including numbers, strings, other lists, and other objects.\n                                            A list is mutable, which means its elements can be modified after creation.\n                                        <\/p>\n                                        <pre><code>\nmy_list = [1, 2, 3, 4, 5]\nanother_list = [\"apple\", \"banana\", \"cherry\"]\nmixed_list = [1, apple, True, 3.14]\n                                        <\/code><\/pre>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                You can access list elements using indexes, starting from <code>0<\/code> for the first element.\n                                                <pre><code>\nprint(my_list[0]) # prints: 1\nprint(another_list[2]) # prints: cherry\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can modify list elements by assigning a new value to a specific index.\n                                                <pre><code>\nmy_list[1] = 10\nprint(my_list) # prints [1, 10, 3, 4, 5]\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can add elements to a list using methods like <code>append()<\/code> to add an element at the end or <code>insert()<\/code> to add an element at a specific position.\n                                                <pre><code>\nmy_list.append(6)\nprint(my_list) # prints  [1, 10, 3, 4, 5, 6]\nmy_list.insert(2, \"new element\")\nprint(my_list) # prints [1, 10, 'new element', 3, 4, 5, 6 ]\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can remove elements from a list using the <code>remove()<\/code> method (to remove a specific element) or the <code>pop()<\/code> method (to remove an element by index or the last element).\n                                                <pre><code>\nmy_list.remove(10)\nprint(my_list) # prints [1, 'new element', 3, 4, 5, 6]\n\nmy_list.pop(2)\nprint(my_list) # prints [1, 'new element', 4, 5, 6]\n\n                                                <\/code><\/pre>\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">Tuples<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            A tuple in Python is a data structure similar to a list but with one key difference: tuple elements are immutable.\n                                            This means that once a tuple is created, you cannot change, add, or remove elements from it.\n                                            Tuples are used when you want to group data and ensure that it cannot be modified.\n                                        <\/p>\n                                        <pre><code>\nmy_tuple = (1, 2, 3)\nanother_tuple = (\"apple\", \"banana\", \"cherry\")\nmixed_tuple = (1, \"apple\", True, 3.14)\n                                        <\/code><\/pre>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                Like lists, you can access tuple elements using indexes.\n                                                <pre><code>\nprint(my_tuple[0]) # prints 1\nprint(another_tuple[2]) # prints cherry\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                Tuple elements cannot be modified after creation. Any attempt to do so will result in an error.\n                                                <pre><code>\nmy_tuple[1] = 10 # it will cause a TypeError\n                                                <\/code><\/pre>\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">Sets<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            A set in Python is a collection of unique elements without a specific order.\n                                            Unlike lists and tuples, sets do not allow duplicate elements, and their elements have no defined order.\n                                            These characteristics make sets ideal for situations where you need to store unique values and perform fast operations like unions, intersections, and differences.\n                                        <\/p>\n                                        <pre><code>\nmy_set = {1, 2, 3, 4}\nanother_set = {\"apple\", \"banana\", cherry\"}\nempty_set = set()\n                                        <\/code><\/pre>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                You can add elements to a set using the <code>add()<\/code> method.\n                                                <pre><code>\nmy_set.add(5)\nprint(my_set) # prints {1, 2, 3, 4, 5}\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can remove elements using the <code>remove()<\/code> or <code>discard()<\/code> methods. The <code>remove()<\/code> method will raise an error if the element does not exist, while <code>discard()<\/code> will not.\n                                                <pre><code>\nmy_set.remove(3)\nprint(my_set) # prints {1, 2, 4, 5}\n                                                <\/code><\/pre>\n                                            <\/li>\n                                        <\/ul>","page":"python-tutorial-3","description":"Let's talk about lists, tuples and sets","keywords":"python tutorial, python, programming, skill, lists, tuples, sets","year":2024},"greek-programmers-on-youtube":{"url":"https:\/\/tkouleris.eu\/blog\/greek-programmers-on-youtube","category":"misc","title":"Greek programmers on YouTube","image":"https:\/\/tkouleris.eu\/img\/blog\/greek-youtube-programmers.jpg","date":"01 Sept. 2024","content":"<p style=\"text-align:justify;\">\n                                            It\u2019s true that Greek-speaking YouTube channels related to programming or developer topics are few compared to\n                                            English-speaking ones. However, this doesn\u2019t mean there aren\u2019t noteworthy efforts from Greece. Over the years,\n                                            I\u2019ve found quite a few of them, and I\u2019d like to share them in this post:\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@SocialNerdsGR\" target=\"_blank\"> <h3 style=\"text-align:justify;\">Social Nerds<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            One of the first channels I discovered when I started programming professionally. Initially, their content included\n                                            several tutorials and videos about developer culture, primarily from a professional perspective. Recently, the content\n                                            has shifted towards discussion-type videos on topics relevant to developers in the workplace.\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@CodeGRrow\" target=\"_blank\"> <h3 style=\"text-align:justify;\">CodeGRow<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            A relatively new channel that I stumbled upon during a TikTok infinite scroll session, and I\u2019ve been following it ever since.\n                                            The content is primarily practical, focusing on tutorials. The videos are well-produced, with high-quality audio and visuals\n                                            that avoid the sense of amateurism often encountered. The creator puts effort into publishing these videos, and it shows.\n                                            Currently, CodeGRow is serving in the military but has promised to keep releasing content even during his service.\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@IoannisLilimpakis\/videos\" target=\"_blank\"> <h3 style=\"text-align:justify;\">Ioannis Lilimpakis<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            Ioannis shares his experiences through his videos on interviews, certificates, events, and tools related to programming\n                                            and developers. He always provides his own perspective, grounding viewers in the Greek reality. While his videos are sporadic,\n                                            they\u2019re worth watching for their raw and realistic content, which, in my opinion, resonates more authentically with everyday life.\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@mikrikouventa\" target=\"_blank\"> <h3 style=\"text-align:justify;\">\u039c\u03b9\u03ba\u03c1\u03ae \u039a\u03bf\u03c5\u03b2\u03ad\u03bd\u03c4\u03b1 (Small Talk)<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            Antonis and Paris, almost every week, host engaging discussions on topics related to IT and programming. The content becomes\n                                            even more exciting when they invite guests. Their videos are more in the form of podcasts, but for those who prefer visuals,\n                                            subscribing to their channel is a great option.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"text-align:justify;\">BONUS<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            The following two channels may not be in Greek, but they are run by Greeks and are worth mentioning for the quality of their content.\n                                        <\/p>\n\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                <a href=\"https:\/\/www.youtube.com\/@EleftheriaBatsou\/featured\" target=\"_blank\"> <strong>Eleftheria Batsou:<\/strong><\/a> Recently, Eleftheria has been focusing on interviews with professionals in the field.\n                                                However, her channel also features various courses, talks, and rich content on other topics for developers, in addition to the interviews.\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                <a href=\"https:\/\/www.youtube.com\/@nickchapsas\" target=\"_blank\"> <strong>Nick Chapsas:<\/strong><\/a> Although his channel is primarily about C# and .NET, it\u2019s worth following him for the insights\n                                                and advice he offers, which can help you understand various programming concepts better.\n                                            <\/li>\n                                        <\/ul>\n","page":"greek-programmers-on-youtube","description":"Greek programmers invade YouTube","keywords":"programmers, youtube, greeks, greek, greece, programming","year":2024},"are-video-games-waste-of-time":{"url":"https:\/\/tkouleris.eu\/blog\/are-video-games-waste-of-time","category":"misc","title":"Are video games a waste of time?","image":"https:\/\/tkouleris.eu\/img\/blog\/pac-man.jpg","date":"25 Aug. 2024","content":"<p style=\"text-align:justify;\">\n                                            In the minds of many, video games are still seen as something that only kids have the \"right\" to enjoy. For adults, they are often considered a waste of time. But is that really true?\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            Video games have evolved from two white pixels on a screen in the 1980s to today\u2019s complex graphics with storylines that even Hollywood\u2019s best screenwriters would envy. The depth and narrative quality of many modern games make it hard to dismiss them as mere children\u2019s toys. In fact, there are several games based on real events that provide players with an opportunity to learn about human history while having fun.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            If I had to answer the question of whether games are a waste of time with a single word, my answer would be <strong>no<\/strong>. But what exactly constitutes a waste of time? For example, someone might argue that reading books isn\u2019t a waste of time, and society generally accepts that view. But the real question is: what books are being read? If someone reads books like <i>Little Red Riding Hood<\/i>, one could objectively say it\u2019s a waste of time since it neither produces anything nor teaches anything new.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            However, for every individual, even a seemingly trivial book, movie, or game can have meaning in their life. These are forms of entertainment, and depending on their content, they can either be truly enriching or remain at the level of simple amusement. Even lighthearted entertainment, though, is essential for some people to move forward in life with a little more ease.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            There are times when we simply want to rest\u2014to escape a bit without thinking, learning, or creating something. We just want to \"kill\" some time to relax. I believe this need is so essential that the so-called \"wasted\" time actually becomes an important tool for boosting productivity and creativity later on. From this perspective, it\u2019s not wasted or lost time but rather a method to recharge and improve oneself.\n                                        <\/p>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">When Can Something Be Considered a Waste of Time?<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            For me, wasted time is when you start something beneficial to you, do it once, twice, or three times, and then quit. For instance, say you decide to join a gym. You go three times, spending six hours of your life, but your body doesn\u2019t show any change. Even then, it\u2019s not necessarily wasted time if you do it consciously, recognizing that you\u2019re simply taking some time to relax without fooling yourself into thinking you\u2019re improving your fitness.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            Wasted time, in my view, is when someone takes actions toward achieving a goal but gives up after a few attempts.\n                                        <\/p>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">The Role of Addiction in Wasting Time<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Another case where something can be considered a waste of time is addiction. Modern technology demands our attention. Our attention is the currency for apps like TikTok, YouTube Shorts, and similar platforms. These apps are designed to be addictive, making it easy to lose three hours without achieving anything, without even having fun, or recharging your mind. You\u2019re simply inactive. Knowing when to stop scrolling is crucial.\n                                        <\/p>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">Subjectivity and Personal Perspective<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Ultimately, all of this is subjective. No one can define with precision what constitutes a waste of time for someone else. It all depends on the timing, the motivations, and the goals of the individual. Video games are not inherently a waste of time because they mean something different to everyone.\n                                        <\/p>","page":"are-video-games-waste-of-time","description":"Are video games a waste of time? Lets find out.","keywords":"video games, waste of time","year":2024},"zacharias-den-to-ftiaxno":{"url":"https:\/\/tkouleris.eu\/blog\/zacharias-den-to-ftiaxno","category":"tech heroes","title":"Tech Heroes #6: Zacharias DenToFtiaxno","image":"https:\/\/tkouleris.eu\/img\/blog\/code-monkey.jpg","date":"11 Aug. 2024","content":"<p style=\"text-align:justify;\">\n                                            Zacharias \"Den to Ftiaxno\" may not be globally renowned, but within the\n                                            programming circles of our small country, he is quite well-known. Zacharias\n                                            is the creation of a programmer, Sotiris Filippidis, who humorously captures\n                                            the everyday adventures of his character.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            If you haven\u2019t read the stories of Zacharias yet, you can visit the website\n                                            <i>Tria Kila Kodika<\/i> (<i>Three Kilos of Code<\/i>) to get to know both\n                                            Zacharias himself and the \"supporting cast\" of his tales. If you work in the\n                                            tech industry, you're almost guaranteed to find at least one story that\n                                            resonates with your own experiences.\n                                        <\/p><br\/>\n                                        <h3 style=\"text-align:justify;\">The Social Nerds Interview<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Sotiris Filippidis, aka Zacharias, recently gave an engaging interview on\n                                            the <b>Social Nerds<\/b> channel. To fully enjoy it, make sure you:\n                                        <\/p>\n                                        <ul style=\"text-align:justify;\">\n                                            <li>Have nothing important planned for the next two hours.<\/li>\n                                            <li>Grab some popcorn.<\/li>\n                                            <li>Relax and tune in.<\/li>\n                                        <\/ul>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/mv7C5uXBepk?si=EWdEo2nM0FWefF8P\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>","page":"zacharias-den-to-ftiaxno","description":"","keywords":"tech heroes, zacharias, sotiris filippidis","year":2024},"modem":{"url":"https:\/\/tkouleris.eu\/blog\/modem","category":"forgotten technology","title":"Forgotten Technology #2: Modem","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_2_modem.png","date":"28 July 2024","content":"<p style=\"text-align:justify\">\n                                            Those who were lucky enough to grow up with internet at home, just like\n                                            having running water, often have no idea what a modem was. They haven\u2019t\n                                            heard its sound, which we had associated with the very essence of the\n                                            internet, nor do they know the frustration of someone in the house wanting\n                                            to use the phone while the modem occupied the line to bring a picture of\n                                            Pamela from the latest Playboy to our computer (the motto being: the\n                                            internet is for porn).\n                                        <\/p><br\/>\n\n                                        <h3>What Was a Modem?<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            The modem (short for \"modulator-demodulator\") is a device used to transmit\n                                            data over telephone lines or other forms of telecommunication lines. The\n                                            modem converts digital signals from a computer into analog signals that can\n                                            be transmitted over telecommunication networks (a process known as\n                                            modulation) and, conversely, converts received analog signals back into\n                                            digital (a process known as demodulation).\n                                        <\/p><br\/>\n\n                                        <h3>PSTN Modem<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            If you had a landline, it was relatively easy to get internet access. Up\n                                            until about 2002, having internet required not only a landline but also an\n                                            internet subscription, which provided you with a combination of username,\n                                            password, a phone number, and of course, a modem to connect. From 2002\n                                            onwards (at least that\u2019s when I noticed it), prepaid internet time cards\n                                            became available. These cards provided a phone number and a code, which,\n                                            with your modem, allowed you to connect to the internet.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            For those unfamiliar with how modems worked, it might sound strange that you\n                                            needed a phone number. The modem had to dial the phone number provided by\n                                            the internet service provider (ISP), which routed your connection to another\n                                            modem\/server. Your modem and the ISP\u2019s modem\/server negotiated how the\n                                            signal would be transmitted via the phone line (the piercing sound you may\n                                            have heard was actually this negotiation), and then your computer became\n                                            part of the ISP\u2019s network.\n                                        <\/p><br\/>\n\n                                        <h3>ADSL Modem: Between Two Worlds<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            In the summer of 2005, I got ADSL at home for the first time. It came as\n                                            part of an \"ADSL in a Box\" kit that included everything needed for the\n                                            setup, such as documents to send to the provider (in this case, Forthnet)\n                                            and an ADSL modem. This was a transitional period where even ISPs were\n                                            unsure how users would handle ADSL. This was because the ADSL modem was a\n                                            device that you connected to your computer via USB, plugged the phone line\n                                            into the modem, and used a Windows application to connect to the internet.\n                                            Naturally, only one person could use the internet at a time\u2014unless you took\n                                            the time to figure out how to share the connection with other devices.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            Soon after, ADSL modem-routers emerged, offering both options: you could\n                                            connect the router as you would today or use the modem via USB with a\n                                            specific application. Personally, I never used the modem functionality of a\n                                            modem-router. Three months after my first ADSL connection, I bought a US\n                                            Robotics router so I could connect to the internet easily with Linux.\n                                        <\/p><br\/>\n\n                                        <h3>Speed of Light<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            The first time I used the internet from home was around 2001. At that time,\n                                            ADSL in Greece was still nonexistent, and the connection speed I could\n                                            achieve with a PSTN modem was 33.6Kbps\u2014since I had an old modem gifted by a\n                                            friend. He had given it to me because he had upgraded to the peak modem of\n                                            the era: 56Kbps.\n                                        <\/p>\n                                        <p style=\"text-align:justify\">\n                                            While these speeds seem laughable today, back then, the internet's demands\n                                            weren\u2019t exceedingly high. To give some perspective, the lowest ADSL speed at\n                                            the time was 384Kbps\u2014nearly seven times faster than a 56Kbps modem but still\n                                            62 times slower than the maximum ADSL speed today, which now seems sluggish.\n                                        <\/p><br\/>\n\n                                        <h3>Epilogue<\/h3>\n                                        <p style=\"text-align:justify\">\n                                            Many years have passed, and we\u2019ve grown accustomed to uninterrupted internet\n                                            access. However, those of us who experienced it will never forget the sound\n                                            of the modem or the anticipation of waiting for late at night (when phone\n                                            rates were lower) to connect with our slow little modem. We\u2019d eagerly browse\n                                            topics we were interested in, communicate, or play games. The modem is a\n                                            part of internet culture, as evidenced by the memes that occasionally\n                                            circulate, making us laugh and reminisce.\n                                        <\/p>","page":"modem","description":"Those who were lucky enough to grow up with internet at home, just like having running water, often have no idea what a modem was. They haven\u2019t heard its sound, which we had associated with the very essence of the internet, nor do they know the frustration of someone in the house wanting to use the phone while the modem occupied the line to bring a picture of Pamela from the latest Playboy to our computer (the motto being: the internet is for porn).","keywords":"forgotten technology, modem","year":2024},"floppy-disk":{"url":"https:\/\/tkouleris.eu\/blog\/floppy-disk","category":"forgotten technology","title":"Forgotten Technology #1: Floppy disk","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_1_floppy_disk.png","date":"21 July 2024","content":"<p style=\"text-align:justify\">\n                                            Before the Internet, DVD-ROMs, and CD-ROMs, the easiest and fastest way to\n                                            transfer data between computers was the floppy disk.\n                                            The floppy disk was a thin, flexible plastic object, either 3.5 inches or\n                                            5.25 inches in size, containing a magnetic disk inside its casing. Its\n                                            maximum storage capacity was 1.44 MB\u2014barely enough to hold even one MP3\n                                            song. Back then, however, storage needs were much less demanding than they\n                                            are today.\n                                        <\/p><br\/>\n\n                                        <h3>The Beginnings of the Floppy Disk<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            The story of the floppy disk began in the 1960s. IBM was the first company\n                                            to develop and introduce the floppy disk in 1967, although its official\n                                            release occurred in 1971. The first floppy disk was 8 inches in diameter and\n                                            had a capacity of just 80 KB. Its major innovation was the ability to\n                                            rewrite data, a significant leap forward compared to the magnetic tapes used\n                                            at the time.\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">\n                                            The floppy disk evolved rapidly. In 1976, the 5.25-inch floppy disk was\n                                            introduced, quickly becoming the dominant storage medium for personal\n                                            computers. This smaller, more practical format offered capacities ranging\n                                            from 110 KB to 1.2 MB. These disks were widely successful throughout the\n                                            1980s and 1990s, serving as the primary medium for software installation and\n                                            data transfer.\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">\n                                            A major upgrade came in 1984 with Sony\u2019s 3.5-inch floppy disk. With a hard\n                                            plastic casing for increased durability and initial storage capacities of\n                                            720 KB (later increasing to 1.44 MB), this version became the new standard,\n                                            remaining dominant for over a decade.\n                                        <\/p><br\/>\n\n                                        <h3>Alternative Uses of Floppy Disks<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            A unique innovation from Nintendo in the 1980s was the Famicom Disk System\n                                            in Japan, which exclusively used Nintendo-branded floppy disks. Gamers could\n                                            visit special kiosks to copy their desired games onto a disk, which could\n                                            then be played on their Nintendo systems.\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">\n                                            Nintendo\u2019s floppy disks followed a similar design philosophy to computer\n                                            disks, featuring a plastic casing and a magnetic disk that could be\n                                            rewritten multiple times.\n                                        <\/p><br\/>\n\n                                        <h3>Uses of the Floppy Disk<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            Floppy disks were used for storing games, operating systems, and personal\n                                            files. In the early 1990s, many games required multiple disks\u2014often four or\n                                            more. Users frequently needed to install games or software onto their large\n                                            1.2 GB hard drives (considered enormous at the time) using floppy disks.\n                                            Boot disks were another common use case, enabling a computer to start up\n                                            when needed.\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">\n                                            Even as late as the early 2000s, floppy disks were essential for students to\n                                            submit assignments to professors. Their affordability and small file sizes\n                                            made them convenient for such tasks.\n                                        <\/p><br\/>\n\n                                        <h3>The Decline and End of the Floppy Disk<\/h3>\n\n                                        <p style=\"text-align:justify\">\n                                            Despite its popularity, the floppy disk began to lose ground in the late\n                                            1990s with the advent of CD-ROMs, which offered much larger storage\n                                            capacities (up to 700 MB) and faster data access. The introduction of USB\n                                            flash drives in the early 2000s dealt the final blow, providing even greater\n                                            capacities and transfer speeds.\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">\n                                            Computer manufacturers started phasing out floppy drives from new models,\n                                            and in 2011, Sony announced it would cease production of 3.5-inch floppy\n                                            disks. This marked the official end of the floppy disk era.\n                                        <\/p>\n\n                                        <p style=\"text-align:justify\">\n                                            <strong>Fun Fact:<\/strong> Younger generations might not realize it, but the\n                                            icon used for the \"Save\" button in many software programs is an image of a\n                                            floppy disk!\n                                        <\/p>","page":"floppy-disk","description":"Before the Internet, DVD-ROMs, and CD-ROMs, the easiest and fastest way to transfer data between computers was the floppy disk. The floppy disk was a thin, flexible plastic object, either 3.5 inches or 5.25 inches in size, containing a magnetic disk inside its casing. Its maximum storage capacity was 1.44 MB\u2014barely enough to hold even one MP3 song. Back then, however, storage needs were much less demanding than they are today.","keywords":"forgotten technology, floppy disk","year":2024},"bram-cohen":{"url":"https:\/\/tkouleris.eu\/blog\/bram-cohen","category":"tech heroes","title":"Tech Heroes #5: Bram Cohen","image":"https:\/\/tkouleris.eu\/img\/blog\/bram-cohen.jpg","date":"03 May 2024","content":"<p style=\"text-align:justify\">One of the most important figures in computer\n                                            science, who fundamentally changed the way files are shared, is Bram Cohen,\n                                            the creator of the immensely popular BitTorrent.<\/p>\n\n                                        <p style=\"text-align:justify\">Cohen began his journey in computer science at a\n                                            young age, as his father was a computer science teacher. Thus, programming\n                                            entered Bram's life early on through the then-famous programming language\n                                            BASIC, which was widely used for coding at the time.<\/p>\n\n                                        <p style=\"text-align:justify\">However, his greatest contribution to computer\n                                            science came much later. It was a time when the internet was gradually\n                                            becoming a part of everyone\u2019s life. Back then, internet speeds were slow,\n                                            file sizes were large, and the demand for downloads was even greater. While\n                                            there were platforms like KaZaA for file transfers (both legal and illegal),\n                                            and FTP for mainly legal downloads, a significant problem persisted. If the\n                                            files were large and the demand for downloads high, as mentioned earlier,\n                                            download speeds would drop dramatically.<\/p>\n\n                                        <p style=\"text-align:justify\">To solve this problem, Cohen came up with an idea\n                                            that could be described as \"communistic.\" Anyone who wanted a file could\n                                            obtain it from multiple sources simultaneously. For example, if Byron and\n                                            Alice had the file and Kostas wanted to download it, he could download parts\n                                            of the file from both Byron and Alice at the same time. Once Kostas\n                                            completed his download and had the file on his disk, he would then become a\n                                            third node from which others could download the file.<\/p>\n\n                                        <p style=\"text-align:justify\">This approach distributed the load among all those\n                                            who had the file, improving download speeds. To achieve this, Cohen invented\n                                            BitTorrent. Essentially, BitTorrent is a small file that contains\n                                            information about where someone can find the file they want to download.\n                                            Using the earlier example, Kostas would first download this small file,\n                                            which would contain details about Byron and Alice. Once Kostas completed the\n                                            download, his information would also be added to the file for the next\n                                            person seeking the same download.<\/p>\n\n                                        <p style=\"text-align:justify\">The decentralized technology Cohen created is\n                                            still widely used today. It made transferring movies and music easier and\n                                            led to the rise of websites like The Pirate Bay.<\/p>","page":"bram-cohen","description":"One of the most important figures in computer science, who fundamentally changed the way files are shared, is Bram Cohen, the creator of the immensely popular BitTorrent.","keywords":"tech heroes, bram cohen, bittorent, kazaa, file sharing","year":2024},"anonymous":{"url":"https:\/\/tkouleris.eu\/blog\/anonymous","category":"tech heroes","title":"Tech Heroes #4: Anonymous","image":"https:\/\/tkouleris.eu\/img\/blog\/anonymous.jpg","date":"23 Feb. 2024","content":"                                        <p style=\"text-align:justify\">Around 2008, the world was introduced to the\n                                            Anonymous for the first time. Initially, they were thought to be a group of\n                                            hackers aiming to attack the Church of Scientology, which was attempting to\n                                            intimidate people into removing videos that exposed the church's true\n                                            nature.<\/p>\n\n                                        <p style=\"text-align:justify\">But where did the Anonymous originate? Those less\n                                            familiar with internet culture might point to the obvious explanation widely\n                                            circulated by the media\u2014that they emerged from the site 4chan. While this is\n                                            not incorrect, the true roots of the Anonymous go much further back, tied to\n                                            the culture and ideology of hackers.<\/p>\n\n                                        <p style=\"text-align:justify\">This ideology had existed almost from the\n                                            beginning. It traces back to the 1970s and 1980s, when hackers conducted\n                                            their early experiments in garages and freely shared information with the\n                                            world. The methods for creating new projects were openly available\u2014either by\n                                            asking the creator directly or, later on, by reading Bulletin Board Systems\n                                            (BBS), which preserved such knowledge.<\/p>\n\n                                        <p style=\"text-align:justify\">This approach shaped the entire field of computer\n                                            science. Steve Wozniak showcased the first personal computer and met Steve\n                                            Jobs, with whom he would later found Apple. Other hackers, like Captain\n                                            Crunch, demonstrated techniques such as making free calls through the\n                                            American telephone system, uncovering and sharing the methods with\n                                            others.<\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/n6TjjE8NHV0?si=0IPWfgZtyWEX8kZ7\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">It made no sense to those hackers to create\n                                            something they couldn\u2019t share with others. They believed that information\n                                            should be free. This belief motivated them to develop new technologies.\n                                            Later, as networks began to emerge\u2014not yet for the masses but for the few\n                                            passionate about technology\u2014many found ways to access restricted information\n                                            and share it widely.<\/p>\n\n                                        <p style=\"text-align:justify\">These were the first hackers who became known to\n                                            the public, often seen as thieves. However, in 1986, Mentor, one of the most\n                                            renowned hackers today, wrote the <em>Hacker Manifesto<\/em>. In it, he made\n                                            it clear that hackers were not rebellious teenagers aiming to destroy the\n                                            world. They were ordinary people exploring new technologies and advocating\n                                            for free access to information. They didn\u2019t care about religion, gender, or\n                                            race. Remaining anonymous behind their keyboards, they exchanged ideas and\n                                            knowledge.<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/YvK7V7U5Mck?si=cegC5Xba35weIjcO\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">This core idea of freedom of speech, the\n                                            dissemination of information, and human knowledge is the driving force for\n                                            all hackers around the world. This freedom gave rise to free software,\n                                            Linux, and much of the technology we use today.<\/p>\n\n                                        <p style=\"text-align:justify\">All this freedom of speech finds fertile ground on\n                                            the internet. Anyone can express their opinion, conceal their identity, or\n                                            joke around. What surfaces on the internet\u2014whether an idea, a technology, or\n                                            a meme\u2014emerges from the democratic process that is inherent in the nature of\n                                            the internet.<\/p>\n\n                                        <p style=\"text-align:justify\">With this in mind, the Anonymous originated from\n                                            4chan, a controversial site, when someone in power tried to silence the\n                                            voices of the internet. Someone decided to impose silence on a medium that\n                                            cannot be silenced. Thus, the Anonymous began there, motivated by the\n                                            principle of freedom of speech. Are all Anonymous members technically\n                                            skilled hackers?<\/p>\n\n                                        <p style=\"text-align:justify\">To answer that, we need to examine the type of\n                                            hacking the Anonymous mainly engage in. Their primary method of protest\n                                            involves DDoS attacks\u2014attacks where the goal is to overwhelm a server with\n                                            numerous requests, causing it to crash. In the real world, this is\n                                            comparable to gathering in Syntagma Square one afternoon with like-minded\n                                            individuals to protest pension reforms.<\/p>\n\n                                        <p style=\"text-align:justify\">It becomes clear that their basic methodology does\n                                            not require technical expertise but rather numbers. Therefore, anyone can be\n                                            part of the Anonymous. Of course, not all members are without the necessary\n                                            technical skills. Some, particularly those who bring hidden information\n                                            about governments and corporations to light via WikiLeaks, possess the\n                                            requisite expertise. However, the essence remains that anyone can protest\n                                            against injustice on the internet.<\/p>\n\n                                        <p style=\"text-align:justify\">The future of the Anonymous is unknown because\n                                            they have no leadership. They operate anarchically, without leaders, which\n                                            aligns perfectly with hacking culture. No one knows what lies ahead or how\n                                            long they will continue to exist. Nevertheless, they remain a distinctive\n                                            part of computer science. Their most recent intervention was a letter to\n                                            Benjamin Netanyahu regarding the war in Palestine.<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/JCbKv9yiLiQ?si=ONWl5O64PpAaPhMp\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>","page":"anonymous","description":"Around 2008, the world was introduced to the Anonymous for the first time. Initially, they were thought to be a group of hackers aiming to attack the Church of Scientology, which was attempting to intimidate people into removing videos that exposed the church's true nature.","keywords":"tech heroes, anonymous, hackers","year":2024},"alan-cox":{"url":"https:\/\/tkouleris.eu\/blog\/alan-cox","category":"tech heroes","title":"Tech Heroes #3: Alan Cox","image":"https:\/\/tkouleris.eu\/img\/blog\/alan-cox.jpg","date":"26 Aug. 2023","content":"<p style=\"text-align:justify\">Alan Cox is a British programmer who became\n                                            well-known among Linux enthusiasts for his contributions to the Linux kernel\n                                            and for embodying the stereotype of the long-haired, bearded hacker-wizard\n                                            often associated with programmer culture.<\/p>\n\n                                        <p style=\"text-align:justify\">Cox first encountered Linux while working at\n                                            Swansea University, where he installed an early version of the operating\n                                            system. In a real-world environment with multiple networked computers and\n                                            significant data traffic, Cox noticed numerous bugs. He fixed these by\n                                            rewriting much of the networking code. From that point onward, he dedicated\n                                            himself to the development of the Linux kernel.<\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/J6r1qFNeDmQ?si=VadQxgyKuH6VzO5V\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n\n                                        <p style=\"text-align:justify\">For a significant period, Cox was considered the\n                                            \"second-in-command\" of the Linux project, naturally behind Linus Torvalds.\n                                            Despite his prominent status, in 2009, he had a disagreement with Torvalds\n                                            and stepped down from his responsibilities within the project.<\/p>\n\n                                        <p style=\"text-align:justify\">Cox worked at Red Hat for a decade and later at\n                                            Intel until 2013, when he left everything to care for his ill wife, Telsa\n                                            Gwynne, who passed away in 2015.<\/p>","page":"alan-cox","description":"Alan Cox is a British programmer who became well-known among Linux enthusiasts for his contributions to the Linux kernel and for embodying the stereotype of the long-haired, bearded hacker-wizard often associated with programmer culture.","keywords":"tech heroes, alan cox, hackers, open source","year":2023},"linus-torvalds":{"url":"https:\/\/tkouleris.eu\/blog\/linus-torvalds","category":"tech heroes","title":"Tech Heroes #2: Linus Torvalds","image":"https:\/\/tkouleris.eu\/img\/blog\/linus-torvalds.jpg","date":"16 July 2023","content":"<blockquote>\n                                            Hello everybody out there using minix -\n\n                                            I\u2019m doing a (free) operating system (just a hobby, won\u2019t be big and\n                                            professional like gnu) for 386(486) AT clones.\n                                        <\/blockquote>\n                                        <p style=\"text-align:justify\">These were the words written by Linus Torvalds on\n                                            August 25, 1991, which changed the history of computing. At the time, he was\n                                            still a student, with no idea that he would change the world with this small\n                                            personal project, which he began as an effort to learn assembly language for\n                                            the 8086.<\/p>\n\n                                        <p style=\"text-align:justify\">Born in Finland, his first encounter with\n                                            computers came at the age of 11, using a Commodore VIC 20. He started coding\n                                            in BASIC. During his university studies, he was taught by Andrew Tanenbaum,\n                                            a name familiar to anyone who has studied computer science due to his hefty\n                                            books on networks and operating systems. Without him, Torvalds would never\n                                            have been inspired to start Linux, as his initial work was based on Minix,\n                                            an operating system developed by Tanenbaum in 1987.<\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/SOXeXauRAm0?si=N0zTioBCxZMobPP9\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">The original name he wanted to give his operating\n                                            system was Freax, but thankfully, the FTP administrator who hosted the first\n                                            kernel of the system changed it to the now well-known Linux.<\/p>\n                                        <p style=\"text-align:justify\">Linux has since changed the course of computing,\n                                            as most servers and mobile phones run some version of its kernel. However,\n                                            it didn\u2019t stop there. The need to manage the changes made by kernel\n                                            developers led Torvalds to another major achievement: the creation of the\n                                            widely used Git. Despite his immense success, Torvalds is well-known to\n                                            technology enthusiasts but not universally loved.<\/p>\n                                        <br\/>\n\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/bw58LZTuZjA?si=eBBo9kv2EMXQMNeW\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">Despite his significant accomplishments, he is\n                                            infamous for clashes with other computing icons, such as Richard Stallman\n                                            (regarding the naming of Linux), and with major tech companies like NVIDIA.\n                                            Torvalds is not one to hold back, and like many brilliant minds in\n                                            computing, he has a tendency to be blunt, often coming across as rude to\n                                            people he considers foolish.<\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/Efi9wa4Fwds?si=AaEnqAdqt71PUJdA\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">He is married to Tove Torvalds, a karate champion,\n                                            and they have three children. In 2010, he became a U.S. citizen and\n                                            identifies as an atheist and non-religious.<\/p>","page":"linus-torvalds","description":"Born in Finland, his first encounter with computers came at the age of 11, using a Commodore VIC 20. He started coding in BASIC. During his university studies, he was taught by Andrew Tanenbaum, a name familiar to anyone who has studied computer science due to his hefty books on networks and operating systems. Without him, Torvalds would never have been inspired to start Linux, as his initial work was based on Minix, an operating system developed by Tanenbaum in 1987.","keywords":"tech heroes, linus torvalds, hackers, open source, linux, os, git","year":2023},"john-carmack":{"url":"https:\/\/tkouleris.eu\/blog\/john-carmack","category":"tech heroes","title":"Tech Heroes #1: John Carmack","image":"https:\/\/tkouleris.eu\/img\/blog\/john-carmack.jpg","date":"16 July 2023","content":"<p style=\"text-align:justify\">The science of computing isn\u2019t solely made up of\n                                            hackers writing code for \"serious\" applications and technologies\u2014it also\n                                            includes those who brought computers into our everyday lives. One of these\n                                            individuals, known primarily in the gaming community, is John Carmack.<\/p>\n\n                                        <p style=\"text-align:justify\">You may not recognize his name, but you\u2019ve likely\n                                            used one of his creations\u2014his games. <i>Commander Keen<\/i>, <i>Wolfenstein\n                                                3D<\/i>, <i>Doom<\/i>, and <i>Quake<\/i> are just a few of his works. But\n                                            you might wonder, what does gaming have to do with computer science? The\n                                            answer is simple: games brought computers into most households.<\/p>\n\n                                        <p style=\"text-align:justify\">Until the mid-'90s, PCs were an expensive and\n                                            time-consuming hobby. In most parts of the world, people were reluctant to\n                                            spend so much money on gaming when consoles were far better suited to the\n                                            task. However, when <i>DOOM<\/i> debuted on PCs, it was revolutionary.\n                                            Consoles couldn\u2019t match its capabilities, and the only way to experience its\n                                            full potential was on a PC. This increased demand, which in turn drove\n                                            prices down.<\/p>\n\n                                        <p style=\"text-align:justify\">Before Carmack reached the greatness of\n                                            <i>DOOM<\/i>, he wrote countless lines of code. He began developing his first\n                                            games for a magazine, where he met John Romero. At that time, smooth\n                                            scrolling on PCs was something no one had achieved, and NES games were\n                                            envied for their fluid scrolling. Unlike PCs, which were primarily designed\n                                            for tasks like Excel, NES consoles had the hardware to accomplish this.<\/p>\n\n                                        <p style=\"text-align:justify\">Carmack struggled but ultimately succeeded in\n                                            achieving smooth scrolling even on a PC. He was so excited about this\n                                            breakthrough that his first demo was the initial level from <i>Super Mario\n                                                Bros. 3<\/i>. He thought Nintendo would be interested, so he showed them\n                                            the demo, hoping to secure permission to create <i>Super Mario Bros. 3<\/i>\n                                            for PCs. However, Nintendo declined, wanting Mario to appear only on their\n                                            hardware for obvious reasons.<\/p>\n\n                                        <p style=\"text-align:justify\">Carmack\u2019s achievement, smooth scrolling, led to\n                                            the creation of a new PC hero: <i>Commander Keen<\/i>. In this game, Carmack\n                                            utilized the technology he had developed, forever changing the landscape of\n                                            gaming on PCs.<\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/mMbFExwqMYc?si=g8y5uUuTcs_P50Jm\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">However, this first achievement did not satisfy\n                                            his hunger, and soon gamers were enjoying a new game titled <i>Wolfenstein\n                                                3D<\/i>. In it, Carmack gave players the illusion of three-dimensional\n                                            space by using raycasting technology. This technique relies on a 2D map of\n                                            the area the player is navigating, and based on the player\u2019s position and\n                                            viewing direction, it calculates distances and renders walls in the correct\n                                            proportions to appear 3D.<\/p>\n\n                                        <p style=\"text-align:justify\">His next project would leave the entire world in\n                                            awe and forever change gaming and computers. The phenomenon of <i>DOOM<\/i>\n                                            in 1992 was the result of implementing in real code a method that had\n                                            existed since the 1960s, known as Binary Space Partitioning (BSP). Using\n                                            this technology, he created yet another 3D game\u2014though not truly 3D\u2014that\n                                            left everyone speechless.<\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/yTRzfKh4Tg0?si=F-rtbQ31BfSSe9BD\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">However, such a persistent programmer would\n                                            certainly not want to settle for something that was 3D but not truly 3D. So,\n                                            for the first time in 1996, with Carmack's blessing and his equally blessed\n                                            code, we all saw what true 3D on a PC really meant.<\/p>\n\n                                        <p style=\"text-align:justify\">With the money he earned from his discoveries, he\n                                            founded an aerospace company and collaborated with NASA. Recently, he has\n                                            been focused on virtual reality and the potential of Oculus Rift.<\/p>\n\n                                        <p style=\"text-align:justify\">John Carmack writes code non-stop. In fact, legend\n                                            has it that his ideal vacation is when he can isolate himself in a room with\n                                            his computer, so he can write code undisturbed.<\/p>\n\n                                        <p style=\"text-align:justify\">He is a strong advocate for open-source software,\n                                            and many of his creations have become open-source, allowing them to live on\n                                            for 20+ years after their creation. To understand what I mean, one can\n                                            simply play <i>Brutal Doom<\/i>.<\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/IinYnj5CsPE?si=NW7JZa1CYC1Y2giL\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align:justify\">At 47, he still has plenty of time to provide us\n                                            with more of his algorithmic achievements, especially in the field of\n                                            virtual reality, which he has been exploring in recent years.<\/p>","page":"john-carmack","description":"Carmack\u2019s achievement, smooth scrolling, led to the creation of a new PC hero: Commander Keen. In this game, Carmack utilized the technology he had developed, forever changing the landscape of gaming on PCs.","keywords":"tech heroes, john carmack, hackers, open source, doom","year":2023}}