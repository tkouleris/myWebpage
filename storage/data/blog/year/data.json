{"2024":[{"url":"https:\/\/tkouleris.eu\/blog\/immutable-databases","category":"sql","title":"Immutable Databases: A Paradigm for Trust and Data Integrity","image":"https:\/\/tkouleris.eu\/img\/blog\/immutable-databases.jpg","date":"15 Dec. 2024","content":"<p style=\"text-align: justify;\">In the ever-evolving landscape of data\n                                            management, one concept is gaining traction for its potential to redefine\n                                            how we think about data security, integrity, and trust: immutable databases.\n                                            These databases, by design, ensure that once data is written, it cannot be\n                                            altered or deleted. Instead of the traditional approach to data management\n                                            where records can be updated or overwritten, immutable databases append\n                                            changes, maintaining a verifiable and permanent record of all transactions\n                                            or updates.<\/p>\n                                        <br\/>\n                                        <h3>The Core Concept of Immutability<\/h3>\n\n                                        <p style=\"text-align: justify;\">Immutability in databases originates from the\n                                            principle of \"write-once-read-many\" (WORM). Unlike traditional relational or\n                                            non-relational databases, immutable databases use data structures that\n                                            maintain the history of data. This means that every state of the database is\n                                            preserved, and the system creates a new version of the data for every\n                                            modification.<\/p>\n\n                                        <p style=\"text-align: justify;\">The immutable model offers several key\n                                            advantages:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Auditability<\/strong>: Since data cannot be overwritten or\n                                                deleted, immutable databases create a complete, verifiable history of\n                                                changes. This feature is particularly beneficial for industries like\n                                                finance, healthcare, and legal systems, where transparency and\n                                                accountability are paramount.\n                                            <\/li>\n                                            <li><strong>Enhanced Security<\/strong>: Immutable databases significantly\n                                                reduce the risk of malicious data tampering. Cyberattacks aimed at\n                                                altering data post-entry, such as ransomware or insider threats, are\n                                                rendered ineffective.\n                                            <\/li>\n                                            <li><strong>Data Integrity<\/strong>: The inability to alter or delete data\n                                                ensures the consistency and reliability of stored information, making it\n                                                ideal for mission-critical applications.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Technologies Behind Immutable Databases<\/h3>\n\n                                        <p style=\"text-align: justify;\">The rise of immutable databases is closely\n                                            linked to advancements in blockchain and distributed ledger technologies\n                                            (DLTs). Blockchain systems, such as Bitcoin or Ethereum, are prime examples\n                                            of immutable databases. These systems append data to a chain of blocks\n                                            secured by cryptographic hashes, making it virtually impossible to alter\n                                            past entries without invalidating the entire chain.<\/p>\n\n                                        <p style=\"text-align: justify;\">However, immutable databases are not limited to\n                                            blockchain. Several database systems have implemented immutability\n                                            principles in more traditional database contexts:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Event Sourcing<\/strong>: In event-sourced systems, every state\n                                                change is recorded as an event. These events are immutable and are\n                                                stored sequentially, allowing the system to reconstruct any previous\n                                                state.\n                                            <\/li>\n                                            <li><strong>Immutable Log-Based Storage<\/strong>: Systems like Apache Kafka\n                                                store data as immutable logs, which provide a reliable record of events\n                                                over time.\n                                            <\/li>\n                                            <li><strong>Versioned Databases<\/strong>: Tools like Datomic and\n                                                FoundationDB provide versioning capabilities, preserving historical\n                                                states alongside current ones.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Use Cases of Immutable Databases<\/h3>\n\n                                        <p style=\"text-align: justify;\">Immutable databases have diverse applications,\n                                            including:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Compliance and Regulatory Requirements<\/strong>: Immutable\n                                                databases are invaluable in sectors with strict regulatory requirements,\n                                                such as finance and healthcare. They provide the transparency and\n                                                traceability needed for compliance with standards like GDPR, HIPAA, or\n                                                SOX.\n                                            <\/li>\n                                            <li><strong>Fraud Detection and Prevention<\/strong>: By maintaining an\n                                                unalterable history of transactions, immutable databases can help detect\n                                                and prevent fraud. Any attempt to manipulate data can be immediately\n                                                identified.\n                                            <\/li>\n                                            <li><strong>Scientific Research<\/strong>: In fields like genomics or climate\n                                                modeling, maintaining the integrity of research data is crucial.\n                                                Immutable databases ensure that raw data and analyses remain unchanged\n                                                over time, fostering reproducibility and trust.\n                                            <\/li>\n                                            <li><strong>Supply Chain Management<\/strong>: Immutable databases enable\n                                                enhanced tracking and verification of goods across complex supply\n                                                chains. Blockchain-based solutions, for example, can confirm the\n                                                authenticity of products and trace their journey from origin to\n                                                consumer.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>Challenges and Considerations<\/h3>\n\n                                        <p style=\"text-align: justify;\">Despite their advantages, immutable databases\n                                            are not without challenges:<\/p>\n\n                                        <ul style=\"text-align: justify;\">\n                                            <li><strong>Storage Overhead<\/strong>: Since data is never deleted or\n                                                overwritten, the storage requirements of immutable databases can grow\n                                                significantly over time. Efficient compression and archival strategies\n                                                are essential.\n                                            <\/li>\n                                            <li><strong>Complexity<\/strong>: Implementing and maintaining an immutable\n                                                database requires careful planning, especially when integrating with\n                                                existing systems.\n                                            <\/li>\n                                            <li><strong>Performance<\/strong>: Writing data in an immutable fashion can\n                                                introduce latency, especially in high-throughput environments.\n                                                Optimizations like batching and asynchronous writes can help mitigate\n                                                this.\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3>The Future of Immutable Databases<\/h3>\n\n                                        <p style=\"text-align: justify;\">As organizations continue to prioritize data\n                                            security and integrity, immutable databases are likely to play an\n                                            increasingly prominent role. Innovations in storage efficiency,\n                                            cryptographic techniques, and distributed systems are expected to address\n                                            many of the current limitations, making these databases more accessible and\n                                            performant.<\/p>\n\n                                        <p style=\"text-align: justify;\">Moreover, the rise of data-centric regulations\n                                            and the growing importance of digital trust signal a broader shift towards\n                                            systems that emphasize transparency and immutability. For businesses looking\n                                            to stay ahead in this era of accountability, adopting immutable database\n                                            technologies may no longer be an option but a necessity.<\/p>\n\n                                        <p style=\"text-align: justify;\">In conclusion, immutable databases represent a\n                                            powerful tool for organizations aiming to build robust, secure, and\n                                            transparent data systems. While challenges remain, their benefits in terms\n                                            of trust, compliance, and data integrity are undeniable, making them a\n                                            cornerstone of the future of data management.<\/p>","page":"immutable-databases","description":"An immutable database ensures data cannot be altered or deleted, preserving append-only records for transparency, integrity, and auditability.","keywords":"immutable database, blockchain database, append-only database, write-once-read-many (worm) database, event-sourced database, immutable data storage, data immutability, tamper-proof database, versioned database systems, cryptographic data integrity, audit trail database, immutable logs, secure data storage, what is an immutable database?, benefits of immutable databases, immutable database for compliance and audit, how immutable databases work, blockchain vs traditional databases, event sourcing with immutable databases, best immutable database solutions, financial transaction immutability, immutable healthcare records, supply chain immutable ledger, tamper-proof data for legal compliance","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/composite-pattern","category":"Design Patterns","title":"Composite Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"08 Dec. 2024","content":"<p>The <b>Composite Design Pattern<\/b> is a structural pattern used to represent part-whole hierarchies. It allows you to treat individual objects and compositions of objects uniformly, enabling a tree structure to represent complex object hierarchies.<\/p>\n                          <p>\n                            The Composite Design Pattern consists of three pillars:\n                            <ul>\n                              <li>When your application requires a tree structure to represent hierarchies of objects.<\/li>\n                              <li>When you want to treat individual objects and composite objects uniformly.<\/li>\n                              <li>When operations on nodes in a hierarchy should work in the same way for leaves and composites.<\/li>\n                            <\/ul>                            \n                          <\/p>\n                          <p>\n                            You can use the Composite Design Pattern when your application requires a tree structure to represent hierarchies of objects, when you want to treat individual objects and composite objects uniformly, or when operations on nodes in a hierarchy should work in the same way for leaves and composites.\n                          <\/p>\n                          <h4>UML<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-1.png\" \/>\n                          <h4>Example In Java<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-java.png\" \/>\n                          <h4>Example In Python<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-python.png\" \/>\n                          <h4>Advantages and Disadvantages of the Pattern<\/h4>\n                          <p>The Composite Design Pattern provides an elegant way to represent and work with tree structures. It simplifies client code by allowing uniform treatment of both individual (leaf) and composite objects. This uniformity makes it easier to perform operations on entire hierarchies without needing to distinguish between leaf and composite objects explicitly. Furthermore, the pattern promotes flexibility by enabling new types of components to be introduced with minimal changes to existing code, making the design more extensible and easier to maintain.<\/p>\n                          <p>However, the pattern is not without its downsides. Managing complex component hierarchies can add overhead, especially if the tree structure is large or frequently modified. Additionally, the uniform treatment of objects might lead to overly generic interfaces that don\u2019t adequately represent specific behaviors of individual components. If the application does not naturally require a hierarchical structure, implementing the Composite Pattern can result in unnecessary complexity.<\/p>\n                          <h4>Final<\/h4>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/EWDmWbJ4wRA?si=XDQ_Bx1uOmv6rVbo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                        ","page":"composite-pattern","description":"The Composite Design Pattern is a structural pattern used to represent part-whole hierarchies","keywords":"design pattern, composite design pattern, code, clean code, algorithms","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/open-source-conspiracy","category":"misc","title":"The Open Source conspiracy","image":"https:\/\/tkouleris.eu\/img\/blog\/open-source-conspiracy.png","date":"01 Dec. 2024","content":"<p>A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.<\/p><p>The truth is that software companies like Microsoft have often fought against open-source and free software. But is that enough to claim that the philosophy of free code (from now on, by \"free code,\" I mean both free software and open-source software) doesn't \"suit\" them? Certainly, it doesn't benefit a company directly if a new competitor emerges for its office suite, such as OpenOffice or LibreOffice, especially if the company sells its own suite. However, this isn't the software we\u2019re talking about here.<\/p><p>Let\u2019s consider software like Linux. For a company like Microsoft to develop such software would require significant time and money. Of course, they could invest some funds to make it \"compatible\" with other software they sell, but even then, the cost wouldn't be the same. Especially if they use Linux on some of their cloud platforms, the cost for the company is almost zero, and they would keep most of the revenue from the service, perhaps only deducting maintenance costs.<\/p><p>Another example is the Edge browser. Microsoft cleverly used the open-source Chromium code to release its own browser, leaving behind the outdated Internet Explorer. Creating a new browser from scratch with the security and features Google had developed would have been difficult and costly.<\/p><p>Perhaps this is why, in recent years, companies have stopped fighting against free code and joined the game instead. It has become evident that free code benefits companies\u2014especially large corporations. How else could Microsoft have developed Copilot without access to a vast pool of code to train its new tool?<\/p><p>Thus, it seems that free code might be a grand \"conspiracy\" to allow large companies access to cheaper software\u2014or even code\u2014so they can generate greater profits at the lowest possible cost. Of course, this is just a conspiracy theory, one of those fleeting thoughts that come to you just before drifting off to sleep, and its value is about as significant as that of Internet Explorer.<\/p>","page":"open-source-conspiracy","description":"A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.","keywords":"open source, conspiracy, office, microsoft, libre office, open office","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/donkey-kong-country-behind-the-scenes","category":"video games","title":"When Rare was eating bananas","image":"https:\/\/tkouleris.eu\/img\/blog\/donkey-kong-country-behind-the-scenes.jpg","date":"24 Nov. 2024","content":"                                        <p style=\"text-align: justify;\">\n                                            Several years ago, back when I was still uploading videos to YouTube, I did\n                                            a review of <b>Donkey Kong Country<\/b>, one of the best games for the SNES. Of\n                                            course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s\n                                            development but rather at presenting my subjective opinion of the game.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Naturally, when someone has more resources and, most importantly, the game\u2019s\n                                            actual creators talking about it, the quality of the final product is much\n                                            better. That\u2019s exactly the case with DF Retro\u2019s video about the game. The\n                                            video is a documentary on the creation of Donkey Kong Country and runs just\n                                            under 50 minutes. Enjoy!\n                                        <\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/GQ7qtqqgTlo?si=hoqI_o283XolJenn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Of course, for historical reasons, I\u2019m also including my own video (what a show-off):\n                                        <\/p>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/OHlACXYiaE4?si=4nSgwVbME7ILhOr3\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>","page":"donkey-kong-country-behind-the-scenes","description":"Several years ago, back when I was still uploading videos to YouTube, I did a review of Donkey Kong Country, one of the best games for the SNES. Of course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s development but rather at presenting my subjective opinion of the game.","keywords":"donkey kong, rare, donkey kong country, snes, super nintendo, 16 bit","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/bubble-sort","category":"sorting algorithms","title":"Sorting Algorithms #1: Bubble Sort","image":"https:\/\/tkouleris.eu\/img\/blog\/code.jpg","date":"17 Nov. 2024","content":"<style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <!-- Start -->\n                                        <h3>What are Sorting Algorithms?<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            Sorting algorithms are a set of algorithms that help us arrange data in\n                                            ascending or descending order. They are fundamental to computer science, and\n                                            the differences between them mainly lie in their time complexity and space\n                                            complexity, which determine their suitability for handling larger\n                                            datasets.<\/p><br\/>\n                                        <h3>Bubble Sort<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            The simplest and, at the same time, the worst sorting algorithm is Bubble\n                                            Sort. In Bubble Sort, we start from the beginning of the dataset and compare\n                                            the first two elements. The smaller one is placed first, and the larger one\n                                            second. Then, we compare the next two elements and repeat the process. This\n                                            continues until all elements are compared. Once a full pass is complete, the\n                                            process is repeated from the start until the dataset is fully sorted.<\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            For example, consider the array [10, 4, 5, 8, 0]. To execute the algorithm:\n\n                                            Compare 10 with 4. Since 4 is smaller, the array becomes [4, 10, 5, 8, 0].\n                                            Compare 10 with 5. Since 5 is smaller, the array becomes [4, 5, 10, 8, 0].\n                                            Compare 10 with 8. Since 8 is smaller, the array becomes [4, 5, 8, 10, 0].\n                                            Compare 10 with 0. Since 0 is smaller, the array becomes [4, 5, 8, 0, 10].\n                                            This completes the first pass. The process is repeated until the array is\n                                            fully sorted.<\/p><br\/>\n                                        <h3>Code<\/h3>\n                                        <pre><code>\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already sorted, no need to check them\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Example usage\ndata = [10, 4, 5, 8, 0]\nsorted_data = bubble_sort(data)\nprint(\"Sorted array:\", sorted_data)\n    <\/code><\/pre><br\/>\n\n                                        <h3>Algorithm Complexity<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The time complexity of Bubble Sort is <span\n                                            style=\"font-family: 'Times New Roman', serif;\">O(n<sup>2<\/sup>)<\/span> in\n                                            the worst case, where <i>n<\/i> is the number of elements. This makes the\n                                            algorithm unsuitable for large datasets.<\/p>","page":"bubble-sort","description":"","keywords":"bubble sort, algorithm, sorting algorithms, python","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/three-rules-for-readable-code","category":"code","title":"Three (3) rules for readable code","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"10 Nov. 2024","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>1. Avoid Deeply Nested Code<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s common, especially among newer developers, to try to handle one case\n                                            inside another and then handle yet another case within that, and so on.<\/p>\n\n                                        <b>Example:<\/b>\n                                        <pre><code>\nif condition1:\n    if condition2:\n        if condition3:\n            # Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            In this scenario, anyone trying to read the code will struggle\n                                            significantly.\n                                            Every time they encounter an if, they need to remember where they are and\n                                            why. This makes the code harder to read and more difficult to\n                                            understand.<\/p>\n                                        <b>A Better Approach:<\/b>\n                                        <pre><code>\nif not condition1:\n    return\n\nif not condition2:\n    return\n\nif not condition3:\n    return\n\n# Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            To make the above code more readable, we created a helper function and\n                                            utilized the early return technique. If data is missing, we return. If the\n                                            user is inactive, we return. If the user\u2019s profile doesn\u2019t exist, we return.\n                                            This way, the code becomes more readable and easier for the reader to follow\n                                            without overloading their memory.\n                                        <\/p><br\/>\n                                        <h3>2. Extract Variable Checks into Functions<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            In many cases, variable checks can make code harder to read, requiring you\n                                            to keep track of what each variable does. A simple way to make your code\n                                            read like plain text is to extract variable checks into functions. For\n                                            example:\n                                        <\/p>\n\n                                        <b>Before:<\/b>\n                                        <pre><code>\nif data.users.length > 0:\n    # Do something\n\n                                        <\/code><\/pre>\n                                        <b>After:<\/b>\n                                        <pre><code>\ndef has_users(data):\n    return len(data.users) > 0\n\nif has_users(data):\n    # Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            In the above block, we created the has_users function. This allows the\n                                            reader to interpret the code as \u201cif the data has users\u201d rather than\n                                            deciphering what data.users.length means.\n                                        <\/p><br\/>\n                                        <h3>3. Avoid Code Duplication<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            In programming, it\u2019s important not to write the same code repeatedly. This\n                                            can simplify future changes to the code. For example, what if you needed to\n                                            change the text from \"User is active and\" to \"Client is available and\"?\n                                            While this might only appear in two lines in a small example, in a\n                                            real-world application, such a string might be duplicated across 10 or 20\n                                            places. You\u2019d need to find and modify the string in all of those instances.\n                                            Instead, you can use a function to handle this centrally.\n                                        <\/p>\n\n                                        Example:\n                                        <pre><code>\ndef log_user_status(user):\n    print(f\"{user.name} is active and {user.status}\")\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            By using this function, you only need to update the logic in one place if\n                                            changes are required.<\/p><br\/>\n                                        <h3>Final Code with All Three Improvements:<\/h3>\n                                        <pre><code>\ndef has_users(data):\n    return len(data.users) > 0\n\ndef log_user_status(user):\n    print(f\"{user.name} is active and {user.status}\")\n\ndef process_data(data):\n    if not data:\n        return\n\n    if not data.is_active:\n        return\n\n    if not has_users(data):\n        return\n\n    for user in data.users:\n        log_user_status(user)\n\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3>Why These Rules Are Important<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            These three rules are crucial for writing readable code and making future\n                                            changes easier. Even code we wrote today might be hard to remember after\n                                            three years when modifications are required. If we don\u2019t structure the code\n                                            to be navigable and readable, we will spend more time developing new\n                                            features or fixing bugs.<\/p>","page":"three-rules-for-readable-code","description":"How to make your code more readable? Follow the three simple rules","keywords":"code, readable, nested if, code duplication, extract checks","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/antitrust","category":"computer science movies","title":"Computer Science Movies #1: Antitrust","image":"https:\/\/tkouleris.eu\/img\/blog\/antitrust.jpg","date":"03 Nov. 2024","content":"<p style=\"text-align: justify;\">\n                                            The movie Antitrust (2001) is a tech thriller focusing on Milo Hoffman, a\n                                            young and talented computer programmer. Milo is recruited by NURV, one of\n                                            the world's largest software companies, led by the charismatic and powerful\n                                            Gary Winston. Initially impressed by the opportunity and the cutting-edge\n                                            work environment, Milo soon discovers that NURV is involved in illegal\n                                            activities, including intellectual property theft and the murder of those\n                                            who resist.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            As Milo digs deeper, he uncovers a sinister plan exploiting open-source\n                                            software\n                                            and developers to give Winston complete control over global software. Milo\n                                            must\n                                            decide whether to stay true to his ethics or submit to the company's\n                                            pressures,\n                                            putting his life and the lives of his loved ones at risk. The film explores\n                                            themes of ethics in technology, software freedom, and manipulation by large\n                                            multinational corporations.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            I watched this movie as a student, on a Friday afternoon when I wanted to\n                                            see\n                                            something tech-related. Since then, it has become my number one film related\n                                            to\n                                            computer science and programming. This is due to its many references to\n                                            open-source software, scenes showcasing real operating systems from various\n                                            Linux distributions, and the movie\u2019s motivational phrase: \"Human knowledge\n                                            belongs to the world.\" At the time, I was not only trying to figure out\n                                            which\n                                            area of technology and computer science I would pursue, but it also\n                                            coincided\n                                            with the period when I was shaping my political ideology, which was greatly\n                                            influenced by open and free software.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s certainly not an Oscar-worthy film with deep meanings, profound\n                                            philosophy,\n                                            or stellar performances, but if you\u2019ve gone through a phase of being into\n                                            free\n                                            software, it will definitely leave an impression.\n                                        <\/p><br\/>\n                                        <h3>Details:<\/h3>\n                                        <a href=\"https:\/\/www.imdb.com\/title\/tt0218817\/?ref_=fn_al_tt_1\" target=\"_blank\">Antitrust\n                                            (2001)<\/a>\n                                        <br\/>\n                                        <b>Director:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0398185\/?ref_=tt_ov_dr_1\"\n                                                            target=\"_blank\">Peter Howitt<\/a><br\/>\n                                        <b>Writer:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0291442\/?ref_=tt_ov_wr_1\"\n                                                          target=\"_blank\">Howard Franklin<\/a><br\/>\n                                        <b>Music:<\/b> <a\n                                        href=\"https:\/\/www.imdb.com\/name\/nm0204485\/?ref_=nv_sr_srsg_3_tt_0_nm_8_in_0_q_Don%2520Davis\"\n                                        target=\"_blank\">Don Davis<\/a><br\/>\n                                        <b>Starring:<\/b>\n                                        <p style=\"text-align: justify;\">\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0000202\/?ref_=tt_cl_t_1\"\n                                               target=\"_blank\">Ryan Phillippe<\/a> (Milo Hoffman), <a\n                                            href=\"https:\/\/www.imdb.com\/name\/nm0000209\/?ref_=tt_cl_t_2\" target=\"_blank\">Tim\n                                            Robbins<\/a> (Gary Winston),\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0000337\/?ref_=tt_cl_t_3\" target=\"_blank\">Rachael Leigh Cook<\/a> (Lisa Calighan),\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0001231\/?ref_=tt_cl_t_4\" target=\"_blank\">Claire Forlani<\/a> (Alice Poulson)\n                                        <\/p>","page":"antitrust","description":"A computer programmer's dream job at a hot Portland-based firm turns nightmarish when he discovers his boss has a secret and ruthless means of dispatching anti-trust problems.","keywords":"movie, antitrust, tech, open source, computer science movies","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/sql-indexes","category":"sql","title":"SQL Indexes","image":"https:\/\/tkouleris.eu\/img\/blog\/sql.png","date":"27 Oct. 2024","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>What is an SQL Index?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            Indexes in SQL are data structures that help us retrieve data from a\n                                            database\n                                            more quickly. They can be compared to the table of contents of a book. For\n                                            example, if you have a book about C programming and you want to learn about\n                                            pointers, you don\u2019t need to read the entire book to find the relevant\n                                            chapter. You look at the table of contents, see that the chapter on pointers\n                                            is on page 110, and go directly there. SQL indexes work in a similar\n                                            way.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            You create indexes on a column of a database table. When you run a query\n                                            based on that column, the SQL engine can return results faster using the\n                                            index.\n                                        <\/p><br\/>\n\n                                        <h3>How SQL Indexes Work<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The most common data structure for SQL indexes is the B-Tree, also known as\n                                            a Balanced Tree. In this data structure, each leaf of the tree can have more\n                                            than\n                                            one key. For instance, if each leaf has two keys, it will have three\n                                            branches:\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The left branch contains values smaller than the left key.\n                                            The middle branch contains values between the left and right keys.\n                                            The right branch contains values greater than the right key.\n                                            A more detailed analysis of balanced trees can be found here:\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/K1a2Bk8NrYQ?si=llNqG0apsqwVF7Hv\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/><br\/>\n\n                                        <h3>Types of SQL Indexes<\/h3>\n                                        <br\/>\n                                        <h4>Clustered Indexes:<\/h4>\n\n                                        <p style=\"text-align: justify;\">\n                                            A clustered index determines the physical order of data in a table. This\n                                            means that the rows are stored on the disk in the same order as the index. A\n                                            table can have only one clustered index, as rows can be sorted in only one\n                                            way. Clustered indexes are typically created based on the primary key of the\n                                            table.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE CLUSTERED INDEX idx_employee_id ON Employees(EmployeeID);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h4>Non-Clustered Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A non-clustered index is independent of the table's data. It contains a\n                                            sorted list of values from the indexed columns and pointers that reference\n                                            the actual rows in the table. Unlike clustered indexes, a table can have\n                                            multiple non-clustered indexes.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE NONCLUSTERED INDEX idx_employee_name ON Employees(LastName);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            A more detailed comparison between clustered and non-clustered indexes for\n                                            SQL Server can be found here:<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/ITcOiLSfVJQ?si=baPNh7XqOSh1DT0V\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/><br\/>\n                                        <h4>Unique Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A unique index ensures that the values in the column or columns that are\n                                            indexed are unique. This type of index is often used to enforce data\n                                            uniqueness, similar to a unique constraint.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE UNIQUE INDEX idx_unique_email ON Employees(Email);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h4>Full-Text Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A full-text index is used to perform full-text searches, which involve\n                                            searching for words or phrases within large text columns. This type of index\n                                            is ideal for applications such as search engines or document management\n                                            systems.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE FULLTEXT INDEX idx_fulltext_description ON Products(Description);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3 style=\"margin-bottom: 10px;\">When to Use Indexes<\/h3>\n                                        <ol >\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Right Column Rule:<\/b> Create an index on a column that is frequently used\n                                                in queries with WHERE, JOIN, or ORDER BY clauses.<br\/>\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Index Limitation Rule:<\/b> Excessive use of indexes can have the opposite\n                                                effect of what we expect. This is because more indexes increase the time\n                                                required for INSERT operations and also increase the database size.\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Type of Data:<\/b> The type of data being indexed is very important. For\n                                                example, integers perform better when indexed.\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>No Indexes on Small Tables:<\/b> If the table is small, a full scan might be\n                                                faster for finding a record than creating indexes.\n                                            <\/li>\n                                        <\/ol>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Using indexes in a database is a critical tool that can significantly enhance\n                                            data retrieval speed. However, it is essential to identify which data is\n                                            worth indexing, avoiding a situation where all columns in all tables are\n                                            indexed, which could lead to adverse results.<\/p>","page":"sql-indexes","description":"SQL (Structured Query Language) is a standardized programming language designed to manage and manipulate relational databases. It allows users to perform a wide range of operations on data, such as querying, updating, inserting, and deleting data stored in a database.","keywords":"sql, sql index, sql indexes, microsoft sql, mysql, mariadb","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/therac-25","category":"dangerous software","title":"Dangerous Software #1: Therac-25","image":"https:\/\/tkouleris.eu\/img\/blog\/therac-25.png","date":"20 Oct. 2024","content":"<p style=\"text-align: justify;\">\n                                            I remember many years ago, when I was a student, we had a discussion with\n                                            some computer science and electronics students. Most of them believed that\n                                            our professions weren\u2019t that important and that a mistake you might make\n                                            wouldn\u2019t cost someone their life. I disagreed back then and even brought up\n                                            the example of designing medical devices. I didn\u2019t have a specific example\n                                            in mind, but in the end, my theory turned out to be true\u2026 and in fact, 15\n                                            years before I had that discussion with my classmates<\/p><br\/>\n\n                                        <h3>The Therac-25<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 was developed in the 1980s by the company AECL (Atomic Energy\n                                            of Canada Limited). It was the third model in a series of medical\n                                            radiotherapy machines and provided treatment through two modes of radiation:\n                                            electrons and X-rays. The system differed from previous models as it was the\n                                            first to rely so heavily on its software for safety, whereas earlier models\n                                            also used mechanical safety interlocks<\/p><br\/>\n\n                                        <h3>How the software cost lives<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 had serious software bugs that allowed excessively high doses\n                                            of radiation to be administered to patients. This occurred mainly due to the\n                                            following issues:<\/p>\n                                        <ul>\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Software design failure:<\/b> The machine used a combination of software and\n                                                hardware to regulate radiation doses. However, the software contained\n                                                errors that could lead to overdoses without triggering the mechanical\n                                                safety systems.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Non-existent or insufficient safety checks:<\/b> The design of the Therac-25\n                                                included software that had not been adequately tested, and there were\n                                                not enough checks to ensure the machine was functioning properly. A\n                                                critical omission was the lack of compensating mechanical safety\n                                                mechanisms, as the system relied too heavily on the proper functioning\n                                                of the software.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Interaction with the operator:<\/b> The users of the Therac-25, typically\n                                                medical technicians, could unintentionally trigger the error by making\n                                                rapid changes to the machine's settings. Due to a bug in the keyboard\n                                                handling, the machine could start without the correct parameters for the\n                                                radiation.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Unclear and unhelpful error feedback:<\/b> When errors occurred, the machine\n                                                provided vague messages to the operators, which didn\u2019t explain the risk.\n                                                The technicians didn\u2019t understand the severity of the errors and often\n                                                ignored the messages.\n                                            <\/li>\n                                        <\/ul>\n\n                                        <p style=\"text-align: justify;\">\n                                            These problems had disastrous results. Between 1985 and 1987, at least six\n                                            incidents were recorded where patients received excessive radiation doses,\n                                            resulting in severe burns, permanent injuries, and in some cases, death. The\n                                            doses given to these patients were up to 100 times higher than the correct\n                                            therapeutic dose.<\/p><br\/>\n\n                                        <h3>How we improved software since then?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The failure of the Therac-25 forced manufacturers to tighten the software\n                                            testing process, especially for software related to human life.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Error codes now provide clear information to operators so they know exactly\n                                            what went wrong and why.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 remains a cautionary example of the dangerous consequences of\n                                            inadequate design and insufficient testing in critical applications, and it\n                                            is often studied in software engineering schools.<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/UXt5SG0qlR0?si=1ZXD5SeqjKhPO2Mv\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe><br\/><br\/>","page":"therac-25","description":"","keywords":"dangerous software, therac-25, x-rays","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/isa-slots","category":"forgotten technology","title":"Forgotten Technology #4: ISA slots","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_4.jpg","date":"13 Oct. 2024","content":"<h3>ISA (Industry Standard Architecture) Slots: A Key Chapter in PC Evolution<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution,\n                                            serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer\n                                            technologies, such as PCI and PCIe.\n                                        <\/p><br\/>\n\n                                        <h3>What Are ISA Slots?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots are expansion slots found on motherboards that were primarily used during the 1980s and 1990s to connect external\n                                            cards and devices to computers. These cards included devices such as sound cards, graphics cards, network cards, and controllers\n                                            for external peripherals like printers and hard drives.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Introduced in 1981 by IBM with the debut of the IBM PC, ISA architecture aimed to standardize the connection of additional\n                                            components inside the computer. This standardized architecture enabled widespread adoption by hardware manufacturers, making\n                                            it the dominant solution of its time.\n                                        <\/p><br\/>\n\n                                        <h3>The Technology<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The first version of ISA slots was 8-bit, meaning they could transfer data over 8-bit-wide paths. While sufficient for early\n                                            personal computers, growing demands highlighted the need for faster and wider data pathways. In response, the 16-bit version\n                                            of ISA was introduced in 1984, allowing more efficient data transfers and support for more demanding expansion cards.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots had a relatively slow data transfer rate, ranging from 1 to 8 MB\/s depending on the version. This slow speed became\n                                            a significant drawback as modern devices began requiring higher performance and faster data rates.\n                                        <\/p><br\/>\n\n                                        <h3>The Use of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            At their peak, ISA slots were the standard medium for connecting various peripheral devices. Numerous expansion cards, such\n                                            as Sound Blaster audio cards, graphics cards, SCSI controllers, and network cards, were designed for ISA slots.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Their popularity stemmed from their broad compatibility and widespread support for many devices. However, as computers became\n                                            more powerful and device performance demands increased, the limitations of ISA technology became increasingly apparent.\n                                        <\/p><br\/>\n\n                                        <h3>The Decline of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            By the 1990s, ISA technology began to show its limitations as computers grew more powerful and user demands escalated.\n                                            Manufacturers started seeking alternatives offering better performance. This led to the introduction of PCI (Peripheral\n                                            Component Interconnect) in 1991, which provided significantly faster speeds and superior performance compared to ISA. PCI\n                                            slots allowed the connection of faster and more efficient devices, gradually rendering ISA obsolete.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            By the late 1990s, PCI slots had almost completely replaced ISA slots in most personal computers. Some motherboards continued\n                                            to include ISA slots into the early 2000s for compatibility with older devices, but their use eventually faded.\n                                        <\/p><br\/>\n\n                                        <h3>Legacy and Significance<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots played a pivotal role in the development of personal computers, enabling the expansion of their capabilities with\n                                            new devices and technologies. Although they have been replaced by more modern technologies such as PCI and PCIe, their historical\n                                            significance is undeniable. The development of ISA architecture laid a crucial foundation for subsequent advancements in computer\n                                            technology, contributing to the flexibility and functionality we enjoy today in modern PCs.\n                                        <\/p><br\/>","page":"isa-slots","description":"ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution, serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer technologies, such as PCI and PCIe.","keywords":"forgotten technology, isa slots, hardware","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/isa-slots","category":"forgotten technology","title":"Forgotten Technology #4: ISA slots","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_4.jpg","date":"13 Oct. 2024","content":"<h3>ISA (Industry Standard Architecture) Slots: A Key Chapter in PC Evolution<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution,\n                                            serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer\n                                            technologies, such as PCI and PCIe.\n                                        <\/p><br\/>\n\n                                        <h3>What Are ISA Slots?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots are expansion slots found on motherboards that were primarily used during the 1980s and 1990s to connect external\n                                            cards and devices to computers. These cards included devices such as sound cards, graphics cards, network cards, and controllers\n                                            for external peripherals like printers and hard drives.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Introduced in 1981 by IBM with the debut of the IBM PC, ISA architecture aimed to standardize the connection of additional\n                                            components inside the computer. This standardized architecture enabled widespread adoption by hardware manufacturers, making\n                                            it the dominant solution of its time.\n                                        <\/p><br\/>\n\n                                        <h3>The Technology<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The first version of ISA slots was 8-bit, meaning they could transfer data over 8-bit-wide paths. While sufficient for early\n                                            personal computers, growing demands highlighted the need for faster and wider data pathways. In response, the 16-bit version\n                                            of ISA was introduced in 1984, allowing more efficient data transfers and support for more demanding expansion cards.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots had a relatively slow data transfer rate, ranging from 1 to 8 MB\/s depending on the version. This slow speed became\n                                            a significant drawback as modern devices began requiring higher performance and faster data rates.\n                                        <\/p><br\/>\n\n                                        <h3>The Use of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            At their peak, ISA slots were the standard medium for connecting various peripheral devices. Numerous expansion cards, such\n                                            as Sound Blaster audio cards, graphics cards, SCSI controllers, and network cards, were designed for ISA slots.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Their popularity stemmed from their broad compatibility and widespread support for many devices. However, as computers became\n                                            more powerful and device performance demands increased, the limitations of ISA technology became increasingly apparent.\n                                        <\/p><br\/>\n\n                                        <h3>The Decline of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            By the 1990s, ISA technology began to show its limitations as computers grew more powerful and user demands escalated.\n                                            Manufacturers started seeking alternatives offering better performance. This led to the introduction of PCI (Peripheral\n                                            Component Interconnect) in 1991, which provided significantly faster speeds and superior performance compared to ISA. PCI\n                                            slots allowed the connection of faster and more efficient devices, gradually rendering ISA obsolete.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            By the late 1990s, PCI slots had almost completely replaced ISA slots in most personal computers. Some motherboards continued\n                                            to include ISA slots into the early 2000s for compatibility with older devices, but their use eventually faded.\n                                        <\/p><br\/>\n\n                                        <h3>Legacy and Significance<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots played a pivotal role in the development of personal computers, enabling the expansion of their capabilities with\n                                            new devices and technologies. Although they have been replaced by more modern technologies such as PCI and PCIe, their historical\n                                            significance is undeniable. The development of ISA architecture laid a crucial foundation for subsequent advancements in computer\n                                            technology, contributing to the flexibility and functionality we enjoy today in modern PCs.\n                                        <\/p><br\/>","page":"isa-slots","description":"ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution, serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer technologies, such as PCI and PCIe.","keywords":"forgotten technology, isa slots, hardware","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/alan-turing","category":"tech heroes","title":"Tech Heroes #7: Alan Turing","image":"https:\/\/tkouleris.eu\/img\/blog\/alan-turing.jpg","date":"06 Oct. 2024","content":"                                        <p style=\"text-align: justify;\">\n                                            Alan Turing is rightly regarded as the father of computer science. Born on\n                                            June 23, 1912, he demonstrated an early talent for mathematics and the\n                                            sciences. He began solving mathematical problems even before acquiring the\n                                            necessary knowledge of advanced mathematics. Despite his exceptional\n                                            intelligence, he failed to secure a scholarship to Trinity College, his\n                                            first choice, but ultimately attended King\u2019s College, Cambridge.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            As a student, Turing sought to solve David Hilbert's problem, which involved\n                                            investigating whether an algorithm could exist that, given a logical\n                                            expression as input, would always yield a correct YES or NO answer.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Turing's solution was a hypothetical computing machine, which became known\n                                            as the Turing Machine. The Turing Machine, with an appropriate set of rules,\n                                            can perform various computations. Turing\u2019s concept was that of a\n                                            general-purpose machine, limited only by computational resources such as\n                                            memory and processing power. All modern computers are fundamentally based on\n                                            the principles of the Turing Machine.\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/dNRDvLACg5Q?si=407O48JgzHQiYoF-\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            During World War II, Turing devised a machine capable of decrypting messages\n                                            encoded by the German Enigma machine. Many historians suggest that the\n                                            decryption of these messages brought the war to an end several years earlier\n                                            than it otherwise might have.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            In 1948, Turing began developing a chess program for a computer that had not\n                                            yet been built. By 1949, he tackled the challenge of artificial intelligence\n                                            and proposed the famous Turing Test, which posits that a machine achieves\n                                            intelligence when its responses to questions are indistinguishable from\n                                            those of a human.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Turing was openly homosexual at a time when homosexuality was a crime. He\n                                            was prosecuted and sentenced to hormonal treatments intended to suppress his\n                                            libido. Tragically, he died by suicide using cyanide in 1954.\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/nuPZUUED5uk?si=G62l-kWPwrxQr4E7\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>","page":"alan-turing","description":"Alan Turing is rightly regarded as the father of computer science. Born on June 23, 1912, he demonstrated an early talent for mathematics and the sciences. He began solving mathematical problems even before acquiring the necessary knowledge of advanced mathematics. Despite his exceptional intelligence, he failed to secure a scholarship to Trinity College, his first choice, but ultimately attended King\u2019s College, Cambridge.","keywords":"alan turing, tech heroes","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/cassete-tape","category":"forgotten technology","title":"Forgotten Technology #3: The cassete tape","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_3.jpg","date":"29 Sept. 2024","content":"<p style=\"text-align:justify\">Today, to listen to a song, all we need to do is\n                                            open YouTube, search for the title (or even lyrics if we don't remember the\n                                            title), and within seconds, we are listening to the tune that's been stuck\n                                            in our heads and we've been humming for the past 5 days. We can also, for\n                                            free or with a subscription, listen to almost any album or perhaps even the\n                                            entire discography of any band or artist. But 25 years ago, things were not\n                                            like this.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">The cassette was a technology simple in its\n                                            conception. It was a small plastic casing containing a magnetic tape, on\n                                            which sound could be recorded, such as music, speech, or other sounds. The\n                                            tape was wound around two spools, and by moving the tape through the\n                                            cassette, sound could be recorded or played back.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">There were many uses for it. From listening to\n                                            music recorded by a studio to capturing the inarticulate screams you made\n                                            with your friends to pass the time. However, the most common use was to make\n                                            a mixtape of different songs, which usually expressed feelings for someone\n                                            else and was intended as a gift for that person.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">I admit that I never bought an original cassette\n                                            with music, because another common practice was to copy entire albums for\n                                            our friends, and they would do the same for others. Obviously, this was\n                                            something the record companies didn't want, but there was no technology at\n                                            the time to stop it.<\/p><br\/>\n\n                                        <h3>The Use of Cassettes in Computers<\/h3>\n\n                                        <p style=\"text-align:justify\">Another use of cassettes was with computers. In\n                                            the 1980s, there was a significant rise in the home computer market. One of\n                                            the storage mediums... who am I kidding? The best way to play a game was to\n                                            find a pirated cassette with the game on it. There were external devices\n                                            that would read the magnetic tape of the cassette and transfer the data to\n                                            the computer's memory. Just like with floppy disks, except instead of\n                                            reading a magnetic disk, they read a magnetic tape.<\/p><br\/>\n\n                                        <h3>The Walkman<\/h3>\n\n                                        <p style=\"text-align:justify\">However, without the cassette, we would never have\n                                            been able to carry music with us everywhere. So, in the late 70s, Sony gave\n                                            us a groundbreaking invention\u2014the Walkman. I won't write much here since the\n                                            Walkman and its derivatives deserve an article of their own, but it's\n                                            important to note that the small size of the cassette helped in the\n                                            development of the Walkman. It certainly wouldn\u2019t have been as easy to carry\n                                            around a portable turntable to listen to \"Battery\" by Metallica.<\/p><br\/>\n\n                                        <p style=\"text-align:justify\">Although the audio cassette was hugely popular in\n                                            the 1980s and 1990s, with the rise of CDs and digital formats, its use\n                                            gradually declined. However, it remains a symbol of the analog era and music\n                                            culture.<\/p><br\/>","page":"cassete-tape","description":"Today, to listen to a song, all we need to do is open YouTube, search for the title (or even lyrics if we don't remember the title), and within seconds, we are listening to the tune that's been stuck in our heads and we've been humming for the past 5 days. We can also, for free or with a subscription, listen to almost any album or perhaps even the entire discography of any band or artist. But 25 years ago, things were not like this.","keywords":"forgotten technology, cassete, tape, cassete tape, hardware","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/three-things-for-programmers-to-avoid","category":"misc","title":"Three (3) things for programmers to avoid","image":"https:\/\/tkouleris.eu\/img\/blog\/misc.png","date":"22 Sept. 2024","content":"<p style=\"text-align:justify\">In the years I\u2019ve worked as a programmer, I\u2019ve\n                                            noticed, mostly in myself but also in other developers, various behaviors\n                                            that make us unproductive. These are usually either low self-esteem, fear of\n                                            the unknown, or arrogance, which create the problems. Human characteristics\n                                            that, as human experience has shown, when we master them, we make the world\n                                            better.<\/p>\n\n                                        <br\/>\n                                        <h3>1. I need to learn everything to be a good programmer<\/h3>\n\n                                        <p style=\"text-align:justify\">This can happen when you start your journey as a\n                                            programmer. Slightly influenced by the countless movies showing programmers\n                                            as centers of knowledge and wisdom, and a bit by the huge amount of\n                                            technologies out there, you think you're too insignificant to become a\n                                            programmer or that you need to dedicate your life exclusively to it.<\/p>\n\n                                        <p style=\"text-align:justify\">When I finished school and was trying to find my\n                                            first job as a programmer, I read all the job listings and the skills\n                                            potential employers wanted me to have, and I broke into a cold sweat.\n                                            Technologies I had never heard of, terminology that was unknown and\n                                            incomprehensible. This was the reason I didn\u2019t continue as a professional\n                                            programmer at that time and chose something simpler, like network\n                                            technician.<\/p>\n\n                                        <p style=\"text-align:justify\">However, if I had overcome my fears back then and\n                                            managed to find a job as a programmer, I would have faced another problem\n                                            that many beginners face\u2014the imposter syndrome.<\/p>\n\n                                        <p style=\"text-align:justify\">And indeed, when I started working as a programmer\n                                            in 2016, for two years I thought I was just lucky and that soon they would\n                                            discover how incompetent I was and fire me. This anxiety made me try to\n                                            learn as much as possible. Learn WordPress, learn JavaScript, learn Laravel,\n                                            learn C and C++ (as if I needed them as a web developer), learn the\n                                            significance of every new buzzword I saw in the programming world.<\/p>\n\n                                        <p style=\"text-align:justify\">Fortunately, I soon realized that all I needed to\n                                            do was focus my attention on one language, one framework, and learn the\n                                            basic concepts and how I could apply them in my everyday work as a\n                                            programmer.<\/p>\n\n                                        <p style=\"text-align:justify\">As programmers, we need to understand that we\n                                            can't learn everything. Programming languages, frameworks, and technologies\n                                            are so numerous out there that even two lifetimes wouldn\u2019t be enough to\n                                            learn them all. We only need to understand that all we need to learn are the\n                                            basics, the fundamentals. The client-server model, recursion, SOLID, design\n                                            patterns. These concepts are tied to a single technology or language but can\n                                            be applied across most technologies and languages.<\/p>\n\n                                        <br\/>\n                                        <h3>2. I know everything, I am the best programmer<\/h3>\n\n                                        <p style=\"text-align:justify\">Fortunately, I have never met a programmer with\n                                            the arrogant behavior of the all-knowing who is always right. However, it is\n                                            another human behavior that we encounter in our daily lives, and sooner or\n                                            later, we will encounter it in our profession as well.<\/p>\n\n                                        <p style=\"text-align:justify\">At some point, we may acquire so much programming\n                                            knowledge that we begin to believe we are something special. This may even\n                                            be reinforced if, in the environment you work in, you always have the\n                                            answers and help others with their problems. However, it\u2019s good not to have\n                                            illusions.<\/p>\n\n                                        <p style=\"text-align:justify\">We must always have an open mind and listen to the\n                                            opinion of someone who may not have the experience or the same knowledge as\n                                            we do. A good idea can come even from our local newsagent, who might have\n                                            nothing to do with programming. Rejecting an idea to insist on our own\n                                            superiority helps no one.<\/p>\n\n                                        <p style=\"text-align:justify\">More important than being right is the ability to\n                                            collaborate with others, and this cannot be done if you believe you are\n                                            always right or that your opinion is better than others. Collaboration\n                                            solves problems, and that's the only thing we want to do as programmers\u2014to\n                                            solve problems.<\/p>\n\n                                        <br\/>\n                                        <h3>3. This problem is impossible to solve, no one has ever solved it<\/h3>\n\n                                        <p style=\"text-align:justify\">Let\u2019s say you\u2019ve been working as a programmer for\n                                            some years, you have self-confidence (but not arrogance), and you are\n                                            presented with a problem you\u2019ve never encountered before. It seems\n                                            impossible to implement, and you reject it. Congratulations, you just missed\n                                            an opportunity to become a better programmer.<\/p>\n\n                                        <p style=\"text-align:justify\">I understand the fear someone might have about the\n                                            unknown, but a programmer doesn\u2019t exist to create simple CRUD applications.\n                                            After all, even an AI could do that today. A programmer is for the tough\n                                            problems. And these are the ones that improve him and make him better.<\/p>\n\n                                        <p style=\"text-align:justify\">Certainly, not all problems can be solved, but we\n                                            shouldn\u2019t dismiss even the attempt to solve them. Before you say that you\n                                            cannot solve this problem, give it a try. See if others have solved it or\n                                            solved part of it. Ask another programmer if they have any ideas. Only when\n                                            you reach an absolute dead end should you admit defeat. It\u2019s not a bad\n                                            thing. Then say that at this moment, this problem cannot be solved by\n                                            me.<\/p>\n\n                                        <p style=\"text-align:justify\">The process of solving it, or even admitting\n                                            defeat, takes you a step forward. It\u2019s no small thing to break out of a\n                                            routine of creating simple CRUD applications and do what you were made\n                                            for\u2014to solve real problems.<\/p>","page":"three-things-for-programmers-to-avoid","description":"In the years I\u2019ve worked as a programmer, I\u2019ve noticed, mostly in myself but also in other developers, various behaviors that make us unproductive. These are usually either low self-esteem, fear of the unknown, or arrogance, which create the problems. Human characteristics that, as human experience has shown, when we master them, we make the world better.","keywords":"programming, skill","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/python-tutorial-4","category":"python tutorial","title":"Python Tutorial #4: Booleans","image":"https:\/\/tkouleris.eu\/img\/blog\/python.jpg","date":"15 Sept. 2024","content":"                                        <style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <p style=\"text-align:justify;\">\n                                            Boolean values in Python are a data type that can only take two values: <code>True<\/code> or <code>False<\/code>.\n                                            These values are often used to control conditions in logical expressions, loops, and control structures such as\n                                            <code>if<\/code>, <code>while<\/code>, and <code>for<\/code> statements.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"text-align:justify;\">Characteristics of Booleans in Python<\/h3>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">The type of Boolean values is <code>bool<\/code>.<\/li>\n                                            <li style=\"text-align:justify;\">In Python, comparisons, logical operations, and many other functions return Boolean values.<\/li>\n                                            <li style=\"text-align:justify;\">Everything can be evaluated as <code>True<\/code> or <code>False<\/code>:\n                                                Numbers: <code>0<\/code> is considered <code>False<\/code>, while any other number is <code>True<\/code>.\n                                                Lists, strings, and other containers: Empty ones are <code>False<\/code>, while non-empty ones are <code>True<\/code>.\n                                            <\/li>\n                                        <\/ul>\n                                        <pre><code>\n# boolean values\nx = True\ny = False\n\nprint( 5 > 3 ) # True\nprint(2 == 5 ) # False\n\nif x:\n    print(\"x value is True\")\nelse:\n    print(\"x value is False\")\n                                        <\/code><\/pre>\n                                        <p style=\"text-align:justify;\">\n                                            Boolean values are fundamental for controlling the flow of programs.\n                                        <\/p>","page":"python-tutorial-4","description":"Let's talk about booleans","keywords":"python tutorial, python, programming, skill, booleans","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/python-tutorial-3","category":"python tutorial","title":"Python Tutorial #3: Lists, Tuples and sets","image":"https:\/\/tkouleris.eu\/img\/blog\/python.jpg","date":"08 Sept. 2024","content":"<style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3 style=\"text-align:justify;\">Lists<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            A list in Python is a data structure used to store collections of elements in a specific order.\n                                            The elements in a list can be of any type, including numbers, strings, other lists, and other objects.\n                                            A list is mutable, which means its elements can be modified after creation.\n                                        <\/p>\n                                        <pre><code>\nmy_list = [1, 2, 3, 4, 5]\nanother_list = [\"apple\", \"banana\", \"cherry\"]\nmixed_list = [1, apple, True, 3.14]\n                                        <\/code><\/pre>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                You can access list elements using indexes, starting from <code>0<\/code> for the first element.\n                                                <pre><code>\nprint(my_list[0]) # prints: 1\nprint(another_list[2]) # prints: cherry\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can modify list elements by assigning a new value to a specific index.\n                                                <pre><code>\nmy_list[1] = 10\nprint(my_list) # prints [1, 10, 3, 4, 5]\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can add elements to a list using methods like <code>append()<\/code> to add an element at the end or <code>insert()<\/code> to add an element at a specific position.\n                                                <pre><code>\nmy_list.append(6)\nprint(my_list) # prints  [1, 10, 3, 4, 5, 6]\nmy_list.insert(2, \"new element\")\nprint(my_list) # prints [1, 10, 'new element', 3, 4, 5, 6 ]\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can remove elements from a list using the <code>remove()<\/code> method (to remove a specific element) or the <code>pop()<\/code> method (to remove an element by index or the last element).\n                                                <pre><code>\nmy_list.remove(10)\nprint(my_list) # prints [1, 'new element', 3, 4, 5, 6]\n\nmy_list.pop(2)\nprint(my_list) # prints [1, 'new element', 4, 5, 6]\n\n                                                <\/code><\/pre>\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">Tuples<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            A tuple in Python is a data structure similar to a list but with one key difference: tuple elements are immutable.\n                                            This means that once a tuple is created, you cannot change, add, or remove elements from it.\n                                            Tuples are used when you want to group data and ensure that it cannot be modified.\n                                        <\/p>\n                                        <pre><code>\nmy_tuple = (1, 2, 3)\nanother_tuple = (\"apple\", \"banana\", \"cherry\")\nmixed_tuple = (1, \"apple\", True, 3.14)\n                                        <\/code><\/pre>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                Like lists, you can access tuple elements using indexes.\n                                                <pre><code>\nprint(my_tuple[0]) # prints 1\nprint(another_tuple[2]) # prints cherry\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                Tuple elements cannot be modified after creation. Any attempt to do so will result in an error.\n                                                <pre><code>\nmy_tuple[1] = 10 # it will cause a TypeError\n                                                <\/code><\/pre>\n                                            <\/li>\n                                        <\/ul>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">Sets<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            A set in Python is a collection of unique elements without a specific order.\n                                            Unlike lists and tuples, sets do not allow duplicate elements, and their elements have no defined order.\n                                            These characteristics make sets ideal for situations where you need to store unique values and perform fast operations like unions, intersections, and differences.\n                                        <\/p>\n                                        <pre><code>\nmy_set = {1, 2, 3, 4}\nanother_set = {\"apple\", \"banana\", cherry\"}\nempty_set = set()\n                                        <\/code><\/pre>\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                You can add elements to a set using the <code>add()<\/code> method.\n                                                <pre><code>\nmy_set.add(5)\nprint(my_set) # prints {1, 2, 3, 4, 5}\n                                                <\/code><\/pre>\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                You can remove elements using the <code>remove()<\/code> or <code>discard()<\/code> methods. The <code>remove()<\/code> method will raise an error if the element does not exist, while <code>discard()<\/code> will not.\n                                                <pre><code>\nmy_set.remove(3)\nprint(my_set) # prints {1, 2, 4, 5}\n                                                <\/code><\/pre>\n                                            <\/li>\n                                        <\/ul>","page":"python-tutorial-3","description":"Let's talk about lists, tuples and sets","keywords":"python tutorial, python, programming, skill, lists, tuples, sets","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/greek-programmers-on-youtube","category":"misc","title":"Greek programmers on YouTube","image":"https:\/\/tkouleris.eu\/img\/blog\/greek-youtube-programmers.jpg","date":"01 Sept. 2024","content":"<p style=\"text-align:justify;\">\n                                            It\u2019s true that Greek-speaking YouTube channels related to programming or developer topics are few compared to\n                                            English-speaking ones. However, this doesn\u2019t mean there aren\u2019t noteworthy efforts from Greece. Over the years,\n                                            I\u2019ve found quite a few of them, and I\u2019d like to share them in this post:\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@SocialNerdsGR\" target=\"_blank\"> <h3 style=\"text-align:justify;\">Social Nerds<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            One of the first channels I discovered when I started programming professionally. Initially, their content included\n                                            several tutorials and videos about developer culture, primarily from a professional perspective. Recently, the content\n                                            has shifted towards discussion-type videos on topics relevant to developers in the workplace.\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@CodeGRrow\" target=\"_blank\"> <h3 style=\"text-align:justify;\">CodeGRow<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            A relatively new channel that I stumbled upon during a TikTok infinite scroll session, and I\u2019ve been following it ever since.\n                                            The content is primarily practical, focusing on tutorials. The videos are well-produced, with high-quality audio and visuals\n                                            that avoid the sense of amateurism often encountered. The creator puts effort into publishing these videos, and it shows.\n                                            Currently, CodeGRow is serving in the military but has promised to keep releasing content even during his service.\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@IoannisLilimpakis\/videos\" target=\"_blank\"> <h3 style=\"text-align:justify;\">Ioannis Lilimpakis<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            Ioannis shares his experiences through his videos on interviews, certificates, events, and tools related to programming\n                                            and developers. He always provides his own perspective, grounding viewers in the Greek reality. While his videos are sporadic,\n                                            they\u2019re worth watching for their raw and realistic content, which, in my opinion, resonates more authentically with everyday life.\n                                        <\/p><br\/>\n\n                                        <a href=\"https:\/\/www.youtube.com\/@mikrikouventa\" target=\"_blank\"> <h3 style=\"text-align:justify;\">\u039c\u03b9\u03ba\u03c1\u03ae \u039a\u03bf\u03c5\u03b2\u03ad\u03bd\u03c4\u03b1 (Small Talk)<\/h3><\/a>\n                                        <p style=\"text-align:justify;\">\n                                            Antonis and Paris, almost every week, host engaging discussions on topics related to IT and programming. The content becomes\n                                            even more exciting when they invite guests. Their videos are more in the form of podcasts, but for those who prefer visuals,\n                                            subscribing to their channel is a great option.\n                                        <\/p><br\/>\n\n                                        <h3 style=\"text-align:justify;\">BONUS<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            The following two channels may not be in Greek, but they are run by Greeks and are worth mentioning for the quality of their content.\n                                        <\/p>\n\n                                        <ul>\n                                            <li style=\"text-align:justify;\">\n                                                <a href=\"https:\/\/www.youtube.com\/@EleftheriaBatsou\/featured\" target=\"_blank\"> <strong>Eleftheria Batsou:<\/strong><\/a> Recently, Eleftheria has been focusing on interviews with professionals in the field.\n                                                However, her channel also features various courses, talks, and rich content on other topics for developers, in addition to the interviews.\n                                            <\/li>\n                                            <li style=\"text-align:justify;\">\n                                                <a href=\"https:\/\/www.youtube.com\/@nickchapsas\" target=\"_blank\"> <strong>Nick Chapsas:<\/strong><\/a> Although his channel is primarily about C# and .NET, it\u2019s worth following him for the insights\n                                                and advice he offers, which can help you understand various programming concepts better.\n                                            <\/li>\n                                        <\/ul>\n","page":"greek-programmers-on-youtube","description":"Greek programmers invade YouTube","keywords":"programmers, youtube, greeks, greek, greece, programming","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/are-video-games-waste-of-time","category":"misc","title":"Are video games a waste of time?","image":"https:\/\/tkouleris.eu\/img\/blog\/pac-man.jpg","date":"25 Aug. 2024","content":"<p style=\"text-align:justify;\">\n                                            In the minds of many, video games are still seen as something that only kids have the \"right\" to enjoy. For adults, they are often considered a waste of time. But is that really true?\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            Video games have evolved from two white pixels on a screen in the 1980s to today\u2019s complex graphics with storylines that even Hollywood\u2019s best screenwriters would envy. The depth and narrative quality of many modern games make it hard to dismiss them as mere children\u2019s toys. In fact, there are several games based on real events that provide players with an opportunity to learn about human history while having fun.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            If I had to answer the question of whether games are a waste of time with a single word, my answer would be <strong>no<\/strong>. But what exactly constitutes a waste of time? For example, someone might argue that reading books isn\u2019t a waste of time, and society generally accepts that view. But the real question is: what books are being read? If someone reads books like <i>Little Red Riding Hood<\/i>, one could objectively say it\u2019s a waste of time since it neither produces anything nor teaches anything new.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            However, for every individual, even a seemingly trivial book, movie, or game can have meaning in their life. These are forms of entertainment, and depending on their content, they can either be truly enriching or remain at the level of simple amusement. Even lighthearted entertainment, though, is essential for some people to move forward in life with a little more ease.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            There are times when we simply want to rest\u2014to escape a bit without thinking, learning, or creating something. We just want to \"kill\" some time to relax. I believe this need is so essential that the so-called \"wasted\" time actually becomes an important tool for boosting productivity and creativity later on. From this perspective, it\u2019s not wasted or lost time but rather a method to recharge and improve oneself.\n                                        <\/p>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">When Can Something Be Considered a Waste of Time?<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            For me, wasted time is when you start something beneficial to you, do it once, twice, or three times, and then quit. For instance, say you decide to join a gym. You go three times, spending six hours of your life, but your body doesn\u2019t show any change. Even then, it\u2019s not necessarily wasted time if you do it consciously, recognizing that you\u2019re simply taking some time to relax without fooling yourself into thinking you\u2019re improving your fitness.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            Wasted time, in my view, is when someone takes actions toward achieving a goal but gives up after a few attempts.\n                                        <\/p>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">The Role of Addiction in Wasting Time<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Another case where something can be considered a waste of time is addiction. Modern technology demands our attention. Our attention is the currency for apps like TikTok, YouTube Shorts, and similar platforms. These apps are designed to be addictive, making it easy to lose three hours without achieving anything, without even having fun, or recharging your mind. You\u2019re simply inactive. Knowing when to stop scrolling is crucial.\n                                        <\/p>\n                                        <br\/>\n                                        <h3 style=\"text-align:justify;\">Subjectivity and Personal Perspective<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Ultimately, all of this is subjective. No one can define with precision what constitutes a waste of time for someone else. It all depends on the timing, the motivations, and the goals of the individual. Video games are not inherently a waste of time because they mean something different to everyone.\n                                        <\/p>","page":"are-video-games-waste-of-time","description":"Are video games a waste of time? Lets find out.","keywords":"video games, waste of time","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/zacharias-den-to-ftiaxno","category":"tech heroes","title":"Tech Heroes #6: Zacharias DenToFtiaxno","image":"https:\/\/tkouleris.eu\/img\/blog\/code-monkey.jpg","date":"11 Aug. 2024","content":"<p style=\"text-align:justify;\">\n                                            Zacharias \"Den to Ftiaxno\" may not be globally renowned, but within the\n                                            programming circles of our small country, he is quite well-known. Zacharias\n                                            is the creation of a programmer, Sotiris Filippidis, who humorously captures\n                                            the everyday adventures of his character.\n                                        <\/p>\n                                        <p style=\"text-align:justify;\">\n                                            If you haven\u2019t read the stories of Zacharias yet, you can visit the website\n                                            <i>Tria Kila Kodika<\/i> (<i>Three Kilos of Code<\/i>) to get to know both\n                                            Zacharias himself and the \"supporting cast\" of his tales. If you work in the\n                                            tech industry, you're almost guaranteed to find at least one story that\n                                            resonates with your own experiences.\n                                        <\/p><br\/>\n                                        <h3 style=\"text-align:justify;\">The Social Nerds Interview<\/h3>\n                                        <p style=\"text-align:justify;\">\n                                            Sotiris Filippidis, aka Zacharias, recently gave an engaging interview on\n                                            the <b>Social Nerds<\/b> channel. To fully enjoy it, make sure you:\n                                        <\/p>\n                                        <ul style=\"text-align:justify;\">\n                                            <li>Have nothing important planned for the next two hours.<\/li>\n                                            <li>Grab some popcorn.<\/li>\n                                            <li>Relax and tune in.<\/li>\n                                        <\/ul>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/mv7C5uXBepk?si=EWdEo2nM0FWefF8P\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>","page":"zacharias-den-to-ftiaxno","description":"","keywords":"tech heroes, zacharias, sotiris filippidis","year":2024}],"2023":[{"url":"https:\/\/tkouleris.eu\/blog\/four-projects-for-beginners","category":"misc","title":"Four simple projects for beginner programmers","image":"https:\/\/tkouleris.eu\/img\/blog\/four-projects-for-beginners.png","date":"03 Nov. 2023","content":"<p>If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them:<\/p><h3>Shopping List Application<\/h3><p>You can create a shopping list application using programming languages like Python, JavaScript, or PHP. To develop the application, you can use technologies such as HTML, CSS, and JavaScript, along with a simple back-end framework like Flask, Express, or Laravel. For the implementation, you will also need a database such as MariaDB, MySQL, or even SQLite.<\/p><h3>Image Collection<\/h3><p>Develop an application that allows users to upload images and organize them into albums. You can enable features such as viewing, editing, and deleting images, as well as creating albums to organize photos. The back-end implementation can again be done using Python, JavaScript, or PHP, along with a database like MariaDB, MySQL, or SQLite.<\/p><h3>Task Calendar<\/h3><p>Create a simple calendar application that allows users to schedule and manage their daily tasks. You can use programming languages like Python, Java, or JavaScript for building the application, and libraries like Flask or Spring Boot for the back-end. For the front-end, the FullCalendar library can be used.<\/p><h3>Currency Converter<\/h3><p>Develop a simple application that converts currency values from one unit to another. You can use free APIs to fetch current exchange rates and implement the functionality using languages like Python or JavaScript.<\/p><p>These project ideas can help beginner programmers develop their skills and understand fundamental programming concepts. Happy Coding!<\/p>","page":"four-projects-for-beginners","description":"If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them","keywords":"junior programmer, beginner, simple projects","year":2023}]}