{"2024":[{"url":"https:\/\/tkouleris.eu\/blog\/composite-pattern","category":"Design Patterns","title":"Composite Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"08 Dec. 2024","content":"<p>The <b>Composite Design Pattern<\/b> is a structural pattern used to represent part-whole hierarchies. It allows you to treat individual objects and compositions of objects uniformly, enabling a tree structure to represent complex object hierarchies.<\/p>\n                          <p>\n                            The Composite Design Pattern consists of three pillars:\n                            <ul>\n                              <li>When your application requires a tree structure to represent hierarchies of objects.<\/li>\n                              <li>When you want to treat individual objects and composite objects uniformly.<\/li>\n                              <li>When operations on nodes in a hierarchy should work in the same way for leaves and composites.<\/li>\n                            <\/ul>                            \n                          <\/p>\n                          <p>\n                            You can use the Composite Design Pattern when your application requires a tree structure to represent hierarchies of objects, when you want to treat individual objects and composite objects uniformly, or when operations on nodes in a hierarchy should work in the same way for leaves and composites.\n                          <\/p>\n                          <h4>UML<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-1.png\" \/>\n                          <h4>Example In Java<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-java.png\" \/>\n                          <h4>Example In Python<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-python.png\" \/>\n                          <h4>Advantages and Disadvantages of the Pattern<\/h4>\n                          <p>The Composite Design Pattern provides an elegant way to represent and work with tree structures. It simplifies client code by allowing uniform treatment of both individual (leaf) and composite objects. This uniformity makes it easier to perform operations on entire hierarchies without needing to distinguish between leaf and composite objects explicitly. Furthermore, the pattern promotes flexibility by enabling new types of components to be introduced with minimal changes to existing code, making the design more extensible and easier to maintain.<\/p>\n                          <p>However, the pattern is not without its downsides. Managing complex component hierarchies can add overhead, especially if the tree structure is large or frequently modified. Additionally, the uniform treatment of objects might lead to overly generic interfaces that don\u2019t adequately represent specific behaviors of individual components. If the application does not naturally require a hierarchical structure, implementing the Composite Pattern can result in unnecessary complexity.<\/p>\n                          <h4>Final<\/h4>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/EWDmWbJ4wRA?si=XDQ_Bx1uOmv6rVbo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                        ","page":"composite-pattern","description":"The Composite Design Pattern is a structural pattern used to represent part-whole hierarchies","keywords":"design pattern, composite design pattern, code, clean code, algorithms","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/open-source-conspiracy","category":"misc","title":"The Open Source conspiracy","image":"https:\/\/tkouleris.eu\/img\/blog\/open-source-conspiracy.png","date":"01 Dec. 2024","content":"<p>A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.<\/p><p>The truth is that software companies like Microsoft have often fought against open-source and free software. But is that enough to claim that the philosophy of free code (from now on, by \"free code,\" I mean both free software and open-source software) doesn't \"suit\" them? Certainly, it doesn't benefit a company directly if a new competitor emerges for its office suite, such as OpenOffice or LibreOffice, especially if the company sells its own suite. However, this isn't the software we\u2019re talking about here.<\/p><p>Let\u2019s consider software like Linux. For a company like Microsoft to develop such software would require significant time and money. Of course, they could invest some funds to make it \"compatible\" with other software they sell, but even then, the cost wouldn't be the same. Especially if they use Linux on some of their cloud platforms, the cost for the company is almost zero, and they would keep most of the revenue from the service, perhaps only deducting maintenance costs.<\/p><p>Another example is the Edge browser. Microsoft cleverly used the open-source Chromium code to release its own browser, leaving behind the outdated Internet Explorer. Creating a new browser from scratch with the security and features Google had developed would have been difficult and costly.<\/p><p>Perhaps this is why, in recent years, companies have stopped fighting against free code and joined the game instead. It has become evident that free code benefits companies\u2014especially large corporations. How else could Microsoft have developed Copilot without access to a vast pool of code to train its new tool?<\/p><p>Thus, it seems that free code might be a grand \"conspiracy\" to allow large companies access to cheaper software\u2014or even code\u2014so they can generate greater profits at the lowest possible cost. Of course, this is just a conspiracy theory, one of those fleeting thoughts that come to you just before drifting off to sleep, and its value is about as significant as that of Internet Explorer.<\/p>","page":"open-source-conspiracy","description":"A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.","keywords":"open source, conspiracy, office, microsoft, libre office, open office","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/donkey-kong-country-behind-the-scenes","category":"video games","title":"When Rare was eating bananas","image":"https:\/\/tkouleris.eu\/img\/blog\/donkey-kong-country-behind-the-scenes.jpg","date":"24 Nov. 2024","content":"                                        <p style=\"text-align: justify;\">\n                                            Several years ago, back when I was still uploading videos to YouTube, I did\n                                            a review of <b>Donkey Kong Country<\/b>, one of the best games for the SNES. Of\n                                            course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s\n                                            development but rather at presenting my subjective opinion of the game.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Naturally, when someone has more resources and, most importantly, the game\u2019s\n                                            actual creators talking about it, the quality of the final product is much\n                                            better. That\u2019s exactly the case with DF Retro\u2019s video about the game. The\n                                            video is a documentary on the creation of Donkey Kong Country and runs just\n                                            under 50 minutes. Enjoy!\n                                        <\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/GQ7qtqqgTlo?si=hoqI_o283XolJenn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Of course, for historical reasons, I\u2019m also including my own video (what a show-off):\n                                        <\/p>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/OHlACXYiaE4?si=4nSgwVbME7ILhOr3\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>","page":"donkey-kong-country-behind-the-scenes","description":"Several years ago, back when I was still uploading videos to YouTube, I did a review of Donkey Kong Country, one of the best games for the SNES. Of course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s development but rather at presenting my subjective opinion of the game.","keywords":"donkey kong, rare, donkey kong country, snes, super nintendo, 16 bit","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/bubble-sort","category":"sorting algorithms","title":"Sorting Algorithms #1: Bubble Sort","image":"https:\/\/tkouleris.eu\/img\/blog\/code.jpg","date":"17 Nov. 2024","content":"<style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <!-- Start -->\n                                        <h3>What are Sorting Algorithms?<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            Sorting algorithms are a set of algorithms that help us arrange data in\n                                            ascending or descending order. They are fundamental to computer science, and\n                                            the differences between them mainly lie in their time complexity and space\n                                            complexity, which determine their suitability for handling larger\n                                            datasets.<\/p><br\/>\n                                        <h3>Bubble Sort<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            The simplest and, at the same time, the worst sorting algorithm is Bubble\n                                            Sort. In Bubble Sort, we start from the beginning of the dataset and compare\n                                            the first two elements. The smaller one is placed first, and the larger one\n                                            second. Then, we compare the next two elements and repeat the process. This\n                                            continues until all elements are compared. Once a full pass is complete, the\n                                            process is repeated from the start until the dataset is fully sorted.<\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            For example, consider the array [10, 4, 5, 8, 0]. To execute the algorithm:\n\n                                            Compare 10 with 4. Since 4 is smaller, the array becomes [4, 10, 5, 8, 0].\n                                            Compare 10 with 5. Since 5 is smaller, the array becomes [4, 5, 10, 8, 0].\n                                            Compare 10 with 8. Since 8 is smaller, the array becomes [4, 5, 8, 10, 0].\n                                            Compare 10 with 0. Since 0 is smaller, the array becomes [4, 5, 8, 0, 10].\n                                            This completes the first pass. The process is repeated until the array is\n                                            fully sorted.<\/p><br\/>\n                                        <h3>Code<\/h3>\n                                        <pre><code>\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already sorted, no need to check them\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Example usage\ndata = [10, 4, 5, 8, 0]\nsorted_data = bubble_sort(data)\nprint(\"Sorted array:\", sorted_data)\n    <\/code><\/pre><br\/>\n\n                                        <h3>Algorithm Complexity<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The time complexity of Bubble Sort is <span\n                                            style=\"font-family: 'Times New Roman', serif;\">O(n<sup>2<\/sup>)<\/span> in\n                                            the worst case, where <i>n<\/i> is the number of elements. This makes the\n                                            algorithm unsuitable for large datasets.<\/p>","page":"bubble-sort","description":"","keywords":"bubble sort, algorithm, sorting algorithms, python","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/three-rules-for-readable-code","category":"code","title":"Three (3) rules for readable code","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"10 Nov. 2024","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>1. Avoid Deeply Nested Code<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s common, especially among newer developers, to try to handle one case\n                                            inside another and then handle yet another case within that, and so on.<\/p>\n\n                                        <b>Example:<\/b>\n                                        <pre><code>\nif condition1:\n    if condition2:\n        if condition3:\n            # Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            In this scenario, anyone trying to read the code will struggle\n                                            significantly.\n                                            Every time they encounter an if, they need to remember where they are and\n                                            why. This makes the code harder to read and more difficult to\n                                            understand.<\/p>\n                                        <b>A Better Approach:<\/b>\n                                        <pre><code>\nif not condition1:\n    return\n\nif not condition2:\n    return\n\nif not condition3:\n    return\n\n# Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            To make the above code more readable, we created a helper function and\n                                            utilized the early return technique. If data is missing, we return. If the\n                                            user is inactive, we return. If the user\u2019s profile doesn\u2019t exist, we return.\n                                            This way, the code becomes more readable and easier for the reader to follow\n                                            without overloading their memory.\n                                        <\/p><br\/>\n                                        <h3>2. Extract Variable Checks into Functions<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            In many cases, variable checks can make code harder to read, requiring you\n                                            to keep track of what each variable does. A simple way to make your code\n                                            read like plain text is to extract variable checks into functions. For\n                                            example:\n                                        <\/p>\n\n                                        <b>Before:<\/b>\n                                        <pre><code>\nif data.users.length > 0:\n    # Do something\n\n                                        <\/code><\/pre>\n                                        <b>After:<\/b>\n                                        <pre><code>\ndef has_users(data):\n    return len(data.users) > 0\n\nif has_users(data):\n    # Do something\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            In the above block, we created the has_users function. This allows the\n                                            reader to interpret the code as \u201cif the data has users\u201d rather than\n                                            deciphering what data.users.length means.\n                                        <\/p><br\/>\n                                        <h3>3. Avoid Code Duplication<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            In programming, it\u2019s important not to write the same code repeatedly. This\n                                            can simplify future changes to the code. For example, what if you needed to\n                                            change the text from \"User is active and\" to \"Client is available and\"?\n                                            While this might only appear in two lines in a small example, in a\n                                            real-world application, such a string might be duplicated across 10 or 20\n                                            places. You\u2019d need to find and modify the string in all of those instances.\n                                            Instead, you can use a function to handle this centrally.\n                                        <\/p>\n\n                                        Example:\n                                        <pre><code>\ndef log_user_status(user):\n    print(f\"{user.name} is active and {user.status}\")\n\n                                        <\/code><\/pre>\n                                        <p style=\"text-align: justify;\">\n                                            By using this function, you only need to update the logic in one place if\n                                            changes are required.<\/p><br\/>\n                                        <h3>Final Code with All Three Improvements:<\/h3>\n                                        <pre><code>\ndef has_users(data):\n    return len(data.users) > 0\n\ndef log_user_status(user):\n    print(f\"{user.name} is active and {user.status}\")\n\ndef process_data(data):\n    if not data:\n        return\n\n    if not data.is_active:\n        return\n\n    if not has_users(data):\n        return\n\n    for user in data.users:\n        log_user_status(user)\n\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3>Why These Rules Are Important<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            These three rules are crucial for writing readable code and making future\n                                            changes easier. Even code we wrote today might be hard to remember after\n                                            three years when modifications are required. If we don\u2019t structure the code\n                                            to be navigable and readable, we will spend more time developing new\n                                            features or fixing bugs.<\/p>","page":"three-rules-for-readable-code","description":"How to make your code more readable? Follow the three simple rules","keywords":"code, readable, nested if, code duplication, extract checks","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/antitrust","category":"computer science movies","title":"Computer Science Movies #1: Antitrust","image":"https:\/\/tkouleris.eu\/img\/blog\/antitrust.jpg","date":"03 Nov. 2024","content":"<p style=\"text-align: justify;\">\n                                            The movie Antitrust (2001) is a tech thriller focusing on Milo Hoffman, a\n                                            young and talented computer programmer. Milo is recruited by NURV, one of\n                                            the world's largest software companies, led by the charismatic and powerful\n                                            Gary Winston. Initially impressed by the opportunity and the cutting-edge\n                                            work environment, Milo soon discovers that NURV is involved in illegal\n                                            activities, including intellectual property theft and the murder of those\n                                            who resist.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            As Milo digs deeper, he uncovers a sinister plan exploiting open-source\n                                            software\n                                            and developers to give Winston complete control over global software. Milo\n                                            must\n                                            decide whether to stay true to his ethics or submit to the company's\n                                            pressures,\n                                            putting his life and the lives of his loved ones at risk. The film explores\n                                            themes of ethics in technology, software freedom, and manipulation by large\n                                            multinational corporations.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            I watched this movie as a student, on a Friday afternoon when I wanted to\n                                            see\n                                            something tech-related. Since then, it has become my number one film related\n                                            to\n                                            computer science and programming. This is due to its many references to\n                                            open-source software, scenes showcasing real operating systems from various\n                                            Linux distributions, and the movie\u2019s motivational phrase: \"Human knowledge\n                                            belongs to the world.\" At the time, I was not only trying to figure out\n                                            which\n                                            area of technology and computer science I would pursue, but it also\n                                            coincided\n                                            with the period when I was shaping my political ideology, which was greatly\n                                            influenced by open and free software.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            It\u2019s certainly not an Oscar-worthy film with deep meanings, profound\n                                            philosophy,\n                                            or stellar performances, but if you\u2019ve gone through a phase of being into\n                                            free\n                                            software, it will definitely leave an impression.\n                                        <\/p><br\/>\n                                        <h3>Details:<\/h3>\n                                        <a href=\"https:\/\/www.imdb.com\/title\/tt0218817\/?ref_=fn_al_tt_1\" target=\"_blank\">Antitrust\n                                            (2001)<\/a>\n                                        <br\/>\n                                        <b>Director:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0398185\/?ref_=tt_ov_dr_1\"\n                                                            target=\"_blank\">Peter Howitt<\/a><br\/>\n                                        <b>Writer:<\/b> <a href=\"https:\/\/www.imdb.com\/name\/nm0291442\/?ref_=tt_ov_wr_1\"\n                                                          target=\"_blank\">Howard Franklin<\/a><br\/>\n                                        <b>Music:<\/b> <a\n                                        href=\"https:\/\/www.imdb.com\/name\/nm0204485\/?ref_=nv_sr_srsg_3_tt_0_nm_8_in_0_q_Don%2520Davis\"\n                                        target=\"_blank\">Don Davis<\/a><br\/>\n                                        <b>Starring:<\/b>\n                                        <p style=\"text-align: justify;\">\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0000202\/?ref_=tt_cl_t_1\"\n                                               target=\"_blank\">Ryan Phillippe<\/a> (Milo Hoffman), <a\n                                            href=\"https:\/\/www.imdb.com\/name\/nm0000209\/?ref_=tt_cl_t_2\" target=\"_blank\">Tim\n                                            Robbins<\/a> (Gary Winston),\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0000337\/?ref_=tt_cl_t_3\" target=\"_blank\">Rachael Leigh Cook<\/a> (Lisa Calighan),\n                                            <a href=\"https:\/\/www.imdb.com\/name\/nm0001231\/?ref_=tt_cl_t_4\" target=\"_blank\">Claire Forlani<\/a> (Alice Poulson)\n                                        <\/p>","page":"antitrust","description":"A computer programmer's dream job at a hot Portland-based firm turns nightmarish when he discovers his boss has a secret and ruthless means of dispatching anti-trust problems.","keywords":"movie, antitrust, tech, open source, computer science movies","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/sql-indexes","category":"sql","title":"SQL Indexes","image":"https:\/\/tkouleris.eu\/img\/blog\/sql.png","date":"27 Oct. 2024","content":"<style>\n\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <h3>What is an SQL Index?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            Indexes in SQL are data structures that help us retrieve data from a\n                                            database\n                                            more quickly. They can be compared to the table of contents of a book. For\n                                            example, if you have a book about C programming and you want to learn about\n                                            pointers, you don\u2019t need to read the entire book to find the relevant\n                                            chapter. You look at the table of contents, see that the chapter on pointers\n                                            is on page 110, and go directly there. SQL indexes work in a similar\n                                            way.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            You create indexes on a column of a database table. When you run a query\n                                            based on that column, the SQL engine can return results faster using the\n                                            index.\n                                        <\/p><br\/>\n\n                                        <h3>How SQL Indexes Work<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The most common data structure for SQL indexes is the B-Tree, also known as\n                                            a Balanced Tree. In this data structure, each leaf of the tree can have more\n                                            than\n                                            one key. For instance, if each leaf has two keys, it will have three\n                                            branches:\n                                        <\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The left branch contains values smaller than the left key.\n                                            The middle branch contains values between the left and right keys.\n                                            The right branch contains values greater than the right key.\n                                            A more detailed analysis of balanced trees can be found here:\n                                        <\/p><br\/>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/K1a2Bk8NrYQ?si=llNqG0apsqwVF7Hv\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/><br\/>\n\n                                        <h3>Types of SQL Indexes<\/h3>\n                                        <br\/>\n                                        <h4>Clustered Indexes:<\/h4>\n\n                                        <p style=\"text-align: justify;\">\n                                            A clustered index determines the physical order of data in a table. This\n                                            means that the rows are stored on the disk in the same order as the index. A\n                                            table can have only one clustered index, as rows can be sorted in only one\n                                            way. Clustered indexes are typically created based on the primary key of the\n                                            table.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE CLUSTERED INDEX idx_employee_id ON Employees(EmployeeID);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h4>Non-Clustered Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A non-clustered index is independent of the table's data. It contains a\n                                            sorted list of values from the indexed columns and pointers that reference\n                                            the actual rows in the table. Unlike clustered indexes, a table can have\n                                            multiple non-clustered indexes.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE NONCLUSTERED INDEX idx_employee_name ON Employees(LastName);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            A more detailed comparison between clustered and non-clustered indexes for\n                                            SQL Server can be found here:<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/ITcOiLSfVJQ?si=baPNh7XqOSh1DT0V\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe>\n                                        <br\/><br\/><br\/>\n                                        <h4>Unique Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A unique index ensures that the values in the column or columns that are\n                                            indexed are unique. This type of index is often used to enforce data\n                                            uniqueness, similar to a unique constraint.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE UNIQUE INDEX idx_unique_email ON Employees(Email);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h4>Full-Text Indexes:<\/h4>\n                                        <p style=\"text-align: justify;\">\n                                            A full-text index is used to perform full-text searches, which involve\n                                            searching for words or phrases within large text columns. This type of index\n                                            is ideal for applications such as search engines or document management\n                                            systems.<\/p>\n                                        <p>Example:<\/p>\n                                        <pre><code>\nCREATE FULLTEXT INDEX idx_fulltext_description ON Products(Description);\n                                        <\/code><\/pre>\n                                        <br\/>\n                                        <h3 style=\"margin-bottom: 10px;\">When to Use Indexes<\/h3>\n                                        <ol >\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Right Column Rule:<\/b> Create an index on a column that is frequently used\n                                                in queries with WHERE, JOIN, or ORDER BY clauses.<br\/>\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Index Limitation Rule:<\/b> Excessive use of indexes can have the opposite\n                                                effect of what we expect. This is because more indexes increase the time\n                                                required for INSERT operations and also increase the database size.\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>Type of Data:<\/b> The type of data being indexed is very important. For\n                                                example, integers perform better when indexed.\n                                            <\/li>\n\n                                            <li style=\"margin-bottom: 10px;\">\n                                                <b>No Indexes on Small Tables:<\/b> If the table is small, a full scan might be\n                                                faster for finding a record than creating indexes.\n                                            <\/li>\n                                        <\/ol>\n                                        <br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Using indexes in a database is a critical tool that can significantly enhance\n                                            data retrieval speed. However, it is essential to identify which data is\n                                            worth indexing, avoiding a situation where all columns in all tables are\n                                            indexed, which could lead to adverse results.<\/p>","page":"sql-indexes","description":"SQL (Structured Query Language) is a standardized programming language designed to manage and manipulate relational databases. It allows users to perform a wide range of operations on data, such as querying, updating, inserting, and deleting data stored in a database.","keywords":"sql, sql index, sql indexes, microsoft sql, mysql, mariadb","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/therac-25","category":"dangerous software","title":"Dangerous Software #1: Therac-25","image":"https:\/\/tkouleris.eu\/img\/blog\/therac-25.png","date":"20 Oct. 2024","content":"<p style=\"text-align: justify;\">\n                                            I remember many years ago, when I was a student, we had a discussion with\n                                            some computer science and electronics students. Most of them believed that\n                                            our professions weren\u2019t that important and that a mistake you might make\n                                            wouldn\u2019t cost someone their life. I disagreed back then and even brought up\n                                            the example of designing medical devices. I didn\u2019t have a specific example\n                                            in mind, but in the end, my theory turned out to be true\u2026 and in fact, 15\n                                            years before I had that discussion with my classmates<\/p><br\/>\n\n                                        <h3>The Therac-25<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 was developed in the 1980s by the company AECL (Atomic Energy\n                                            of Canada Limited). It was the third model in a series of medical\n                                            radiotherapy machines and provided treatment through two modes of radiation:\n                                            electrons and X-rays. The system differed from previous models as it was the\n                                            first to rely so heavily on its software for safety, whereas earlier models\n                                            also used mechanical safety interlocks<\/p><br\/>\n\n                                        <h3>How the software cost lives<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 had serious software bugs that allowed excessively high doses\n                                            of radiation to be administered to patients. This occurred mainly due to the\n                                            following issues:<\/p>\n                                        <ul>\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Software design failure:<\/b> The machine used a combination of software and\n                                                hardware to regulate radiation doses. However, the software contained\n                                                errors that could lead to overdoses without triggering the mechanical\n                                                safety systems.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Non-existent or insufficient safety checks:<\/b> The design of the Therac-25\n                                                included software that had not been adequately tested, and there were\n                                                not enough checks to ensure the machine was functioning properly. A\n                                                critical omission was the lack of compensating mechanical safety\n                                                mechanisms, as the system relied too heavily on the proper functioning\n                                                of the software.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Interaction with the operator:<\/b> The users of the Therac-25, typically\n                                                medical technicians, could unintentionally trigger the error by making\n                                                rapid changes to the machine's settings. Due to a bug in the keyboard\n                                                handling, the machine could start without the correct parameters for the\n                                                radiation.\n                                            <\/li>\n\n                                            <li style=\"text-align: justify;margin-bottom: 10px;\">\n                                                <b>Unclear and unhelpful error feedback:<\/b> When errors occurred, the machine\n                                                provided vague messages to the operators, which didn\u2019t explain the risk.\n                                                The technicians didn\u2019t understand the severity of the errors and often\n                                                ignored the messages.\n                                            <\/li>\n                                        <\/ul>\n\n                                        <p style=\"text-align: justify;\">\n                                            These problems had disastrous results. Between 1985 and 1987, at least six\n                                            incidents were recorded where patients received excessive radiation doses,\n                                            resulting in severe burns, permanent injuries, and in some cases, death. The\n                                            doses given to these patients were up to 100 times higher than the correct\n                                            therapeutic dose.<\/p><br\/>\n\n                                        <h3>How we improved software since then?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The failure of the Therac-25 forced manufacturers to tighten the software\n                                            testing process, especially for software related to human life.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            Error codes now provide clear information to operators so they know exactly\n                                            what went wrong and why.<\/p>\n\n                                        <p style=\"text-align: justify;\">\n                                            The Therac-25 remains a cautionary example of the dangerous consequences of\n                                            inadequate design and insufficient testing in critical applications, and it\n                                            is often studied in software engineering schools.<\/p>\n                                        <iframe width=\"560\" height=\"315\"\n                                                src=\"https:\/\/www.youtube.com\/embed\/UXt5SG0qlR0?si=1ZXD5SeqjKhPO2Mv\"\n                                                title=\"YouTube video player\" frameborder=\"0\"\n                                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                                                referrerpolicy=\"strict-origin-when-cross-origin\"\n                                                allowfullscreen><\/iframe><br\/><br\/>","page":"therac-25","description":"","keywords":"dangerous software, therac-25, x-rays","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/isa-slots","category":"forgotten technology","title":"Forgotten Technology #4: ISA slots","image":"https:\/\/tkouleris.eu\/img\/blog\/forgotten_tech_4.jpg","date":"13 Oct. 2024","content":"<h3>ISA (Industry Standard Architecture) Slots: A Key Chapter in PC Evolution<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution,\n                                            serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer\n                                            technologies, such as PCI and PCIe.\n                                        <\/p><br\/>\n\n                                        <h3>What Are ISA Slots?<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots are expansion slots found on motherboards that were primarily used during the 1980s and 1990s to connect external\n                                            cards and devices to computers. These cards included devices such as sound cards, graphics cards, network cards, and controllers\n                                            for external peripherals like printers and hard drives.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Introduced in 1981 by IBM with the debut of the IBM PC, ISA architecture aimed to standardize the connection of additional\n                                            components inside the computer. This standardized architecture enabled widespread adoption by hardware manufacturers, making\n                                            it the dominant solution of its time.\n                                        <\/p><br\/>\n\n                                        <h3>The Technology<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The first version of ISA slots was 8-bit, meaning they could transfer data over 8-bit-wide paths. While sufficient for early\n                                            personal computers, growing demands highlighted the need for faster and wider data pathways. In response, the 16-bit version\n                                            of ISA was introduced in 1984, allowing more efficient data transfers and support for more demanding expansion cards.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots had a relatively slow data transfer rate, ranging from 1 to 8 MB\/s depending on the version. This slow speed became\n                                            a significant drawback as modern devices began requiring higher performance and faster data rates.\n                                        <\/p><br\/>\n\n                                        <h3>The Use of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            At their peak, ISA slots were the standard medium for connecting various peripheral devices. Numerous expansion cards, such\n                                            as Sound Blaster audio cards, graphics cards, SCSI controllers, and network cards, were designed for ISA slots.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Their popularity stemmed from their broad compatibility and widespread support for many devices. However, as computers became\n                                            more powerful and device performance demands increased, the limitations of ISA technology became increasingly apparent.\n                                        <\/p><br\/>\n\n                                        <h3>The Decline of ISA Slots<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            By the 1990s, ISA technology began to show its limitations as computers grew more powerful and user demands escalated.\n                                            Manufacturers started seeking alternatives offering better performance. This led to the introduction of PCI (Peripheral\n                                            Component Interconnect) in 1991, which provided significantly faster speeds and superior performance compared to ISA. PCI\n                                            slots allowed the connection of faster and more efficient devices, gradually rendering ISA obsolete.\n                                        <\/p><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            By the late 1990s, PCI slots had almost completely replaced ISA slots in most personal computers. Some motherboards continued\n                                            to include ISA slots into the early 2000s for compatibility with older devices, but their use eventually faded.\n                                        <\/p><br\/>\n\n                                        <h3>Legacy and Significance<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            ISA slots played a pivotal role in the development of personal computers, enabling the expansion of their capabilities with\n                                            new devices and technologies. Although they have been replaced by more modern technologies such as PCI and PCIe, their historical\n                                            significance is undeniable. The development of ISA architecture laid a crucial foundation for subsequent advancements in computer\n                                            technology, contributing to the flexibility and functionality we enjoy today in modern PCs.\n                                        <\/p><br\/>","page":"isa-slots","description":"ISA (Industry Standard Architecture) slots were a significant part of the history of personal computer (PC) evolution, serving as a primary means for connecting various devices and expansion cards. Today, they have been replaced by newer technologies, such as PCI and PCIe.","keywords":"forgotten technology, isa slots, hardware","year":2024}],"2023":[{"url":"https:\/\/tkouleris.eu\/blog\/four-projects-for-beginners","category":"misc","title":"Four simple projects for beginner programmers","image":"https:\/\/tkouleris.eu\/img\/blog\/four-projects-for-beginners.png","date":"03 Nov. 2023","content":"<p>If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them:<\/p><h3>Shopping List Application<\/h3><p>You can create a shopping list application using programming languages like Python, JavaScript, or PHP. To develop the application, you can use technologies such as HTML, CSS, and JavaScript, along with a simple back-end framework like Flask, Express, or Laravel. For the implementation, you will also need a database such as MariaDB, MySQL, or even SQLite.<\/p><h3>Image Collection<\/h3><p>Develop an application that allows users to upload images and organize them into albums. You can enable features such as viewing, editing, and deleting images, as well as creating albums to organize photos. The back-end implementation can again be done using Python, JavaScript, or PHP, along with a database like MariaDB, MySQL, or SQLite.<\/p><h3>Task Calendar<\/h3><p>Create a simple calendar application that allows users to schedule and manage their daily tasks. You can use programming languages like Python, Java, or JavaScript for building the application, and libraries like Flask or Spring Boot for the back-end. For the front-end, the FullCalendar library can be used.<\/p><h3>Currency Converter<\/h3><p>Develop a simple application that converts currency values from one unit to another. You can use free APIs to fetch current exchange rates and implement the functionality using languages like Python or JavaScript.<\/p><p>These project ideas can help beginner programmers develop their skills and understand fundamental programming concepts. Happy Coding!<\/p>","page":"four-projects-for-beginners","description":"If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them","keywords":"junior programmer, beginner, simple projects","year":2023}]}