{"2024":[{"url":"https:\/\/tkouleris.eu\/blog\/composite-pattern","category":"Design Patterns","title":"Composite Pattern","image":"https:\/\/tkouleris.eu\/img\/blog\/blue_matrix.jpg","date":"08 Dec. 2024","content":"<p>The <b>Composite Design Pattern<\/b> is a structural pattern used to represent part-whole hierarchies. It allows you to treat individual objects and compositions of objects uniformly, enabling a tree structure to represent complex object hierarchies.<\/p>\n                          <p>\n                            The Composite Design Pattern consists of three pillars:\n                            <ul>\n                              <li>When your application requires a tree structure to represent hierarchies of objects.<\/li>\n                              <li>When you want to treat individual objects and composite objects uniformly.<\/li>\n                              <li>When operations on nodes in a hierarchy should work in the same way for leaves and composites.<\/li>\n                            <\/ul>                            \n                          <\/p>\n                          <p>\n                            You can use the Composite Design Pattern when your application requires a tree structure to represent hierarchies of objects, when you want to treat individual objects and composite objects uniformly, or when operations on nodes in a hierarchy should work in the same way for leaves and composites.\n                          <\/p>\n                          <h4>UML<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-1.png\" \/>\n                          <h4>Example In Java<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-java.png\" \/>\n                          <h4>Example In Python<\/h4>\n                          <img src=\"https:\/\/tkouleris.eu\/img\/blog\/composite-pattern-python.png\" \/>\n                          <h4>Advantages and Disadvantages of the Pattern<\/h4>\n                          <p>The Composite Design Pattern provides an elegant way to represent and work with tree structures. It simplifies client code by allowing uniform treatment of both individual (leaf) and composite objects. This uniformity makes it easier to perform operations on entire hierarchies without needing to distinguish between leaf and composite objects explicitly. Furthermore, the pattern promotes flexibility by enabling new types of components to be introduced with minimal changes to existing code, making the design more extensible and easier to maintain.<\/p>\n                          <p>However, the pattern is not without its downsides. Managing complex component hierarchies can add overhead, especially if the tree structure is large or frequently modified. Additionally, the uniform treatment of objects might lead to overly generic interfaces that don\u2019t adequately represent specific behaviors of individual components. If the application does not naturally require a hierarchical structure, implementing the Composite Pattern can result in unnecessary complexity.<\/p>\n                          <h4>Final<\/h4>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <p>The Composite Design Pattern simplifies the management of complex hierarchical object structures. Whether working in Java or Python, implementing this pattern can significantly enhance code reusability and maintainability. By abstracting operations and managing components uniformly, you can handle intricate part-whole relationships effectively.<\/p>\n                          <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/EWDmWbJ4wRA?si=XDQ_Bx1uOmv6rVbo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                        ","page":"composite-pattern","description":"The Composite Design Pattern is a structural pattern used to represent part-whole hierarchies","keywords":"design pattern, composite design pattern, code, clean code, algorithms","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/open-source-conspiracy","category":"misc","title":"The Open Source conspiracy","image":"https:\/\/tkouleris.eu\/img\/blog\/open-source-conspiracy.png","date":"01 Dec. 2024","content":"<p>A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.<\/p><p>The truth is that software companies like Microsoft have often fought against open-source and free software. But is that enough to claim that the philosophy of free code (from now on, by \"free code,\" I mean both free software and open-source software) doesn't \"suit\" them? Certainly, it doesn't benefit a company directly if a new competitor emerges for its office suite, such as OpenOffice or LibreOffice, especially if the company sells its own suite. However, this isn't the software we\u2019re talking about here.<\/p><p>Let\u2019s consider software like Linux. For a company like Microsoft to develop such software would require significant time and money. Of course, they could invest some funds to make it \"compatible\" with other software they sell, but even then, the cost wouldn't be the same. Especially if they use Linux on some of their cloud platforms, the cost for the company is almost zero, and they would keep most of the revenue from the service, perhaps only deducting maintenance costs.<\/p><p>Another example is the Edge browser. Microsoft cleverly used the open-source Chromium code to release its own browser, leaving behind the outdated Internet Explorer. Creating a new browser from scratch with the security and features Google had developed would have been difficult and costly.<\/p><p>Perhaps this is why, in recent years, companies have stopped fighting against free code and joined the game instead. It has become evident that free code benefits companies\u2014especially large corporations. How else could Microsoft have developed Copilot without access to a vast pool of code to train its new tool?<\/p><p>Thus, it seems that free code might be a grand \"conspiracy\" to allow large companies access to cheaper software\u2014or even code\u2014so they can generate greater profits at the lowest possible cost. Of course, this is just a conspiracy theory, one of those fleeting thoughts that come to you just before drifting off to sleep, and its value is about as significant as that of Internet Explorer.<\/p>","page":"open-source-conspiracy","description":"A conspiracy theory I came up with last night goes as follows: free software and open-source software exist so that large corporations can use software they would otherwise have to spend significant amounts of money to purchase or develop.","keywords":"open source, conspiracy, office, microsoft, libre office, open office","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/donkey-kong-country-behind-the-scenes","category":"video games","title":"When Rare was eating bananas","image":"https:\/\/tkouleris.eu\/img\/blog\/donkey-kong-country-behind-the-scenes.jpg","date":"24 Nov. 2024","content":"                                        <p style=\"text-align: justify;\">\n                                            Several years ago, back when I was still uploading videos to YouTube, I did\n                                            a review of <b>Donkey Kong Country<\/b>, one of the best games for the SNES. Of\n                                            course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s\n                                            development but rather at presenting my subjective opinion of the game.\n                                        <\/p>\n                                        <p style=\"text-align: justify;\">\n                                            Naturally, when someone has more resources and, most importantly, the game\u2019s\n                                            actual creators talking about it, the quality of the final product is much\n                                            better. That\u2019s exactly the case with DF Retro\u2019s video about the game. The\n                                            video is a documentary on the creation of Donkey Kong Country and runs just\n                                            under 50 minutes. Enjoy!\n                                        <\/p>\n                                        <br\/>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/GQ7qtqqgTlo?si=hoqI_o283XolJenn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n                                        <br\/><br\/>\n                                        <p style=\"text-align: justify;\">\n                                            Of course, for historical reasons, I\u2019m also including my own video (what a show-off):\n                                        <\/p>\n                                        <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/OHlACXYiaE4?si=4nSgwVbME7ILhOr3\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>","page":"donkey-kong-country-behind-the-scenes","description":"Several years ago, back when I was still uploading videos to YouTube, I did a review of Donkey Kong Country, one of the best games for the SNES. Of course, my effort wasn\u2019t aimed at recording the historical details of DKC\u2019s development but rather at presenting my subjective opinion of the game.","keywords":"donkey kong, rare, donkey kong country, snes, super nintendo, 16 bit","year":2024},{"url":"https:\/\/tkouleris.eu\/blog\/bubble-sort","category":"sorting algorithms","title":"Sorting Algorithms #1: Bubble Sort","image":"https:\/\/tkouleris.eu\/img\/blog\/code.jpg","date":"17 Nov. 2024","content":"<style>\n                                            body {\n                                                font-family: Arial, sans-serif;\n                                                line-height: 1.6;\n                                            }\n                                            pre {\n                                                background-color: #f4f4f4;\n                                                padding: 10px;\n                                                border-radius: 5px;\n                                                border: 1px solid #ddd;\n                                                overflow-x: auto;\n                                                color: #0b0b0b;\n                                            }\n                                            code {\n                                                font-family: Consolas, \"Courier New\", monospace;\n                                            }\n                                        <\/style>\n                                        <!-- Start -->\n                                        <h3>What are Sorting Algorithms?<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            Sorting algorithms are a set of algorithms that help us arrange data in\n                                            ascending or descending order. They are fundamental to computer science, and\n                                            the differences between them mainly lie in their time complexity and space\n                                            complexity, which determine their suitability for handling larger\n                                            datasets.<\/p><br\/>\n                                        <h3>Bubble Sort<\/h3>\n                                        <p style=\"text-align: justify\">\n                                            The simplest and, at the same time, the worst sorting algorithm is Bubble\n                                            Sort. In Bubble Sort, we start from the beginning of the dataset and compare\n                                            the first two elements. The smaller one is placed first, and the larger one\n                                            second. Then, we compare the next two elements and repeat the process. This\n                                            continues until all elements are compared. Once a full pass is complete, the\n                                            process is repeated from the start until the dataset is fully sorted.<\/p>\n\n                                        <p style=\"text-align: justify\">\n                                            For example, consider the array [10, 4, 5, 8, 0]. To execute the algorithm:\n\n                                            Compare 10 with 4. Since 4 is smaller, the array becomes [4, 10, 5, 8, 0].\n                                            Compare 10 with 5. Since 5 is smaller, the array becomes [4, 5, 10, 8, 0].\n                                            Compare 10 with 8. Since 8 is smaller, the array becomes [4, 5, 8, 10, 0].\n                                            Compare 10 with 0. Since 0 is smaller, the array becomes [4, 5, 8, 0, 10].\n                                            This completes the first pass. The process is repeated until the array is\n                                            fully sorted.<\/p><br\/>\n                                        <h3>Code<\/h3>\n                                        <pre><code>\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already sorted, no need to check them\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Example usage\ndata = [10, 4, 5, 8, 0]\nsorted_data = bubble_sort(data)\nprint(\"Sorted array:\", sorted_data)\n    <\/code><\/pre><br\/>\n\n                                        <h3>Algorithm Complexity<\/h3>\n                                        <p style=\"text-align: justify;\">\n                                            The time complexity of Bubble Sort is <span\n                                            style=\"font-family: 'Times New Roman', serif;\">O(n<sup>2<\/sup>)<\/span> in\n                                            the worst case, where <i>n<\/i> is the number of elements. This makes the\n                                            algorithm unsuitable for large datasets.<\/p>","page":"bubble-sort","description":"","keywords":"bubble sort, algorithm, sorting algorithms, python","year":2024}],"2023":[{"url":"https:\/\/tkouleris.eu\/blog\/four-projects-for-beginners","category":"misc","title":"Four simple projects for beginner programmers","image":"https:\/\/tkouleris.eu\/img\/blog\/four-projects-for-beginners.png","date":"03 Nov. 2023","content":"<p>If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them:<\/p><h3>Shopping List Application<\/h3><p>You can create a shopping list application using programming languages like Python, JavaScript, or PHP. To develop the application, you can use technologies such as HTML, CSS, and JavaScript, along with a simple back-end framework like Flask, Express, or Laravel. For the implementation, you will also need a database such as MariaDB, MySQL, or even SQLite.<\/p><h3>Image Collection<\/h3><p>Develop an application that allows users to upload images and organize them into albums. You can enable features such as viewing, editing, and deleting images, as well as creating albums to organize photos. The back-end implementation can again be done using Python, JavaScript, or PHP, along with a database like MariaDB, MySQL, or SQLite.<\/p><h3>Task Calendar<\/h3><p>Create a simple calendar application that allows users to schedule and manage their daily tasks. You can use programming languages like Python, Java, or JavaScript for building the application, and libraries like Flask or Spring Boot for the back-end. For the front-end, the FullCalendar library can be used.<\/p><h3>Currency Converter<\/h3><p>Develop a simple application that converts currency values from one unit to another. You can use free APIs to fetch current exchange rates and implement the functionality using languages like Python or JavaScript.<\/p><p>These project ideas can help beginner programmers develop their skills and understand fundamental programming concepts. Happy Coding!<\/p>","page":"four-projects-for-beginners","description":"If you're starting your journey into the world of programming, it's essential to choose projects that will help enhance your skills. Here are four project ideas for beginner programmers, along with the technologies and techniques you can use for each of them","keywords":"junior programmer, beginner, simple projects","year":2023}]}